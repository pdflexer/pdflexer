// AUTOGENERATED DO NOT MODIFY

namespace PdfLexer.Validation;

internal static partial class MathUtil
{
    public static bool eq(IPdfObject? obj, int val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfIntNumber;
        if (n == null) { return false; }
        return eq(n, val);
    }
    // public static bool eq(PdfNumber obj, int val) 
    // {
    //     if (obj.NumberType == PdfNumberType.Integer) 
    //     {
    //         return eq((PdfIntNumber)obj, val);
    //     }
    //     return eq(obj, (decimal)val);
    // }
    public static bool eq(PdfIntNumber obj, int val) 
    {
        return (int)obj == val;
    }
    public static bool eq(IPdfObject? obj, IPdfObject? val)
    {
        if (obj == null || val == null) { return false; } // custom for arlington eval to fail
        if (obj.Type != val.Type) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        var n2 = val as PdfNumber;
        if (n2 == null) { return false; }
        return n == n2;
    }
    
    public static bool eq(IPdfObject? obj, int? val)
    {
        if (val == null) return false;
        return eq(obj, val.Value);
    }
    public static bool eq(int val, IPdfObject? obj) => eq(obj, val);
    public static bool eq(int val, int val2) => val == val2;
    public static bool eq(int? val, int val2)
    {
        if (val == null) { return false; }
        return val.Value == val2;
    }
    
    public static bool eq(IPdfObject? obj, decimal val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        return  (decimal)n == val;
    }
    public static bool eq(IPdfObject? obj, decimal? val)
    {
        if (val == null) return false;
        return eq(obj, val.Value);
    }
    public static bool eq(decimal val, IPdfObject? obj) => eq(obj, val);
    public static bool eq(decimal val, decimal val2) => val == val2;
    public static bool eq(decimal? val, decimal val2)
    {
        if (val == null) { return false; }
        return val.Value == val2;
    }
    public static bool eq(IPdfObject? obj, string? val)
    {
        if (obj == null || val == null) { return false; }
        var n = obj as PdfString;
        if (n == null) { return false; }
        return n.Value == val;
    }
    public static bool gt(IPdfObject? obj, int val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfIntNumber;
        if (n == null) { return false; }
        return gt(n, val);
    }
    // public static bool gt(PdfNumber obj, int val) 
    // {
    //     if (obj.NumberType == PdfNumberType.Integer) 
    //     {
    //         return gt((PdfIntNumber)obj, val);
    //     }
    //     return gt(obj, (decimal)val);
    // }
    public static bool gt(PdfIntNumber obj, int val) 
    {
        return (int)obj > val;
    }
    public static bool gt(IPdfObject? obj, IPdfObject? val)
    {
        if (obj == null || val == null) { return false; } // custom for arlington eval to fail
        if (obj.Type != val.Type) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        var n2 = val as PdfNumber;
        if (n2 == null) { return false; }
        return n > n2;
    }
    
    public static bool gt(IPdfObject? obj, int? val)
    {
        if (val == null) return false;
        return gt(obj, val.Value);
    }
    public static bool gt(int val, IPdfObject? obj) => gt(obj, val);
    public static bool gt(int val, int val2) => val == val2;
    public static bool gt(int? val, int val2)
    {
        if (val == null) { return false; }
        return val.Value > val2;
    }
    
    public static bool gt(IPdfObject? obj, decimal val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        return  (decimal)n > val;
    }
    public static bool gt(IPdfObject? obj, decimal? val)
    {
        if (val == null) return false;
        return gt(obj, val.Value);
    }
    public static bool gt(decimal val, IPdfObject? obj) => gt(obj, val);
    public static bool gt(decimal val, decimal val2) => val == val2;
    public static bool gt(decimal? val, decimal val2)
    {
        if (val == null) { return false; }
        return val.Value > val2;
    }
    public static bool lt(IPdfObject? obj, int val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfIntNumber;
        if (n == null) { return false; }
        return lt(n, val);
    }
    // public static bool lt(PdfNumber obj, int val) 
    // {
    //     if (obj.NumberType == PdfNumberType.Integer) 
    //     {
    //         return lt((PdfIntNumber)obj, val);
    //     }
    //     return lt(obj, (decimal)val);
    // }
    public static bool lt(PdfIntNumber obj, int val) 
    {
        return (int)obj < val;
    }
    public static bool lt(IPdfObject? obj, IPdfObject? val)
    {
        if (obj == null || val == null) { return false; } // custom for arlington eval to fail
        if (obj.Type != val.Type) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        var n2 = val as PdfNumber;
        if (n2 == null) { return false; }
        return n < n2;
    }
    
    public static bool lt(IPdfObject? obj, int? val)
    {
        if (val == null) return false;
        return lt(obj, val.Value);
    }
    public static bool lt(int val, IPdfObject? obj) => lt(obj, val);
    public static bool lt(int val, int val2) => val == val2;
    public static bool lt(int? val, int val2)
    {
        if (val == null) { return false; }
        return val.Value < val2;
    }
    
    public static bool lt(IPdfObject? obj, decimal val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        return  (decimal)n < val;
    }
    public static bool lt(IPdfObject? obj, decimal? val)
    {
        if (val == null) return false;
        return lt(obj, val.Value);
    }
    public static bool lt(decimal val, IPdfObject? obj) => lt(obj, val);
    public static bool lt(decimal val, decimal val2) => val == val2;
    public static bool lt(decimal? val, decimal val2)
    {
        if (val == null) { return false; }
        return val.Value < val2;
    }
    public static bool gte(IPdfObject? obj, int val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfIntNumber;
        if (n == null) { return false; }
        return gte(n, val);
    }
    // public static bool gte(PdfNumber obj, int val) 
    // {
    //     if (obj.NumberType == PdfNumberType.Integer) 
    //     {
    //         return gte((PdfIntNumber)obj, val);
    //     }
    //     return gte(obj, (decimal)val);
    // }
    public static bool gte(PdfIntNumber obj, int val) 
    {
        return (int)obj >= val;
    }
    public static bool gte(IPdfObject? obj, IPdfObject? val)
    {
        if (obj == null || val == null) { return false; } // custom for arlington eval to fail
        if (obj.Type != val.Type) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        var n2 = val as PdfNumber;
        if (n2 == null) { return false; }
        return n >= n2;
    }
    
    public static bool gte(IPdfObject? obj, int? val)
    {
        if (val == null) return false;
        return gte(obj, val.Value);
    }
    public static bool gte(int val, IPdfObject? obj) => gte(obj, val);
    public static bool gte(int val, int val2) => val == val2;
    public static bool gte(int? val, int val2)
    {
        if (val == null) { return false; }
        return val.Value >= val2;
    }
    
    public static bool gte(IPdfObject? obj, decimal val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        return  (decimal)n >= val;
    }
    public static bool gte(IPdfObject? obj, decimal? val)
    {
        if (val == null) return false;
        return gte(obj, val.Value);
    }
    public static bool gte(decimal val, IPdfObject? obj) => gte(obj, val);
    public static bool gte(decimal val, decimal val2) => val == val2;
    public static bool gte(decimal? val, decimal val2)
    {
        if (val == null) { return false; }
        return val.Value >= val2;
    }
    public static bool lte(IPdfObject? obj, int val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfIntNumber;
        if (n == null) { return false; }
        return lte(n, val);
    }
    // public static bool lte(PdfNumber obj, int val) 
    // {
    //     if (obj.NumberType == PdfNumberType.Integer) 
    //     {
    //         return lte((PdfIntNumber)obj, val);
    //     }
    //     return lte(obj, (decimal)val);
    // }
    public static bool lte(PdfIntNumber obj, int val) 
    {
        return (int)obj <= val;
    }
    public static bool lte(IPdfObject? obj, IPdfObject? val)
    {
        if (obj == null || val == null) { return false; } // custom for arlington eval to fail
        if (obj.Type != val.Type) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        var n2 = val as PdfNumber;
        if (n2 == null) { return false; }
        return n <= n2;
    }
    
    public static bool lte(IPdfObject? obj, int? val)
    {
        if (val == null) return false;
        return lte(obj, val.Value);
    }
    public static bool lte(int val, IPdfObject? obj) => lte(obj, val);
    public static bool lte(int val, int val2) => val == val2;
    public static bool lte(int? val, int val2)
    {
        if (val == null) { return false; }
        return val.Value <= val2;
    }
    
    public static bool lte(IPdfObject? obj, decimal val)
    {
        if (obj == null) { return false; }
        var n = obj as PdfNumber;
        if (n == null) { return false; }
        return  (decimal)n <= val;
    }
    public static bool lte(IPdfObject? obj, decimal? val)
    {
        if (val == null) return false;
        return lte(obj, val.Value);
    }
    public static bool lte(decimal val, IPdfObject? obj) => lte(obj, val);
    public static bool lte(decimal val, decimal val2) => val == val2;
    public static bool lte(decimal? val, decimal val2)
    {
        if (val == null) { return false; }
        return val.Value <= val2;
    }
    
}
