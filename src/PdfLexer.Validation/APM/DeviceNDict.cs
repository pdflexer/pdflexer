// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_DeviceNDict : APM_DeviceNDict__Base
{
}

internal partial class APM_DeviceNDict__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "DeviceNDict";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_DeviceNDict_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DeviceNDict_Colorants, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DeviceNDict_Process, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DeviceNDict_MixingHints, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_DeviceNDict>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_DeviceNDict>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_DeviceNDict>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_DeviceNDict>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_DeviceNDict>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_DeviceNDict>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_DeviceNDict>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_DeviceNDict>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        
        c.Run<APM_DeviceNDict_Subtype, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_13 { get; } = new List<string> 
    {
        "Colorants"
    };
    public static List<string> AllowedFields_14 { get; } = new List<string> 
    {
        "Colorants"
    };
    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "Colorants"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "Subtype", "Colorants", "Process", "MixingHints"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Subtype", "Colorants", "Process", "MixingHints"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Subtype", "Colorants", "Process", "MixingHints"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Subtype", "Colorants", "Process", "MixingHints"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Subtype", "Colorants", "Process", "MixingHints"
    };
    


}

/// <summary>
/// DeviceNDict_Subtype Table 70
/// </summary>
internal partial class APM_DeviceNDict_Subtype : APM_DeviceNDict_Subtype__Base
{
}


internal partial class APM_DeviceNDict_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DeviceNDict_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_DeviceNDict_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.DeviceN || val == PdfName.NChannel)) 
        {
            ctx.Fail<APM_DeviceNDict_Subtype>($"Invalid value {val}, allowed are: [DeviceN,NChannel]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// DeviceNDict_Colorants 
/// </summary>
internal partial class APM_DeviceNDict_Colorants : APM_DeviceNDict_Colorants__Base
{
}


internal partial class APM_DeviceNDict_Colorants__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DeviceNDict_Colorants";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var Subtype = obj.Get("Subtype");
        var parent1 = parent?.Get(1);
        var val = ctx.GetOptional<PdfDictionary, APM_DeviceNDict_Colorants>(obj, "Colorants", IndirectRequirement.Either);
        if ((((ctx.Version < 1.6m || eq(Subtype,PdfName.NChannel))&&HasSpotColorants(parent1))) && val == null) {
            ctx.Fail<APM_DeviceNDict_Colorants>("Colorants is required when 'fn:IsRequired(fn:SinceVersion(1.6,(@Subtype==NChannel)) && fn:HasSpotColorants(parent::1))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ColorantsDict, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// DeviceNDict_Process 
/// </summary>
internal partial class APM_DeviceNDict_Process : APM_DeviceNDict_Process__Base
{
}


internal partial class APM_DeviceNDict_Process__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DeviceNDict_Process";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var Subtype = obj.Get("Subtype");
        var parent1 = parent?.Get(1);
        var val = ctx.GetOptional<PdfDictionary, APM_DeviceNDict_Process>(obj, "Process", IndirectRequirement.Either);
        if (((eq(Subtype,PdfName.NChannel)&&HasProcessColorants(parent1))) && val == null) {
            ctx.Fail<APM_DeviceNDict_Process>("Process is required when 'fn:IsRequired((@Subtype==NChannel) && fn:HasProcessColorants(parent::1))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DeviceNProcess, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// DeviceNDict_MixingHints 
/// </summary>
internal partial class APM_DeviceNDict_MixingHints : APM_DeviceNDict_MixingHints__Base
{
}


internal partial class APM_DeviceNDict_MixingHints__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DeviceNDict_MixingHints";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_DeviceNDict_MixingHints>(obj, "MixingHints", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DeviceNMixingHints, PdfDictionary>(stack, val, obj);
        
    }


}

