// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_WebCapturePageSet : APM_WebCapturePageSet__Base
{
}

internal partial class APM_WebCapturePageSet__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "WebCapturePageSet";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_WebCapturePageSet_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCapturePageSet_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCapturePageSet_ID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCapturePageSet_O, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCapturePageSet_SI, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCapturePageSet_CT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCapturePageSet_TS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCapturePageSet_T, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCapturePageSet_TID, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_WebCapturePageSet>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_WebCapturePageSet>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_WebCapturePageSet>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_WebCapturePageSet>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_WebCapturePageSet>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_WebCapturePageSet>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_WebCapturePageSet>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_WebCapturePageSet>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_WebCapturePageSet_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "S", "ID", "O", "SI", "CT", "TS", "T", "TID"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "S", "ID", "O", "SI", "CT", "TS", "T", "TID"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "S", "ID", "O", "SI", "CT", "TS", "T", "TID"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "S", "ID", "O", "SI", "CT", "TS", "T", "TID"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "S", "ID", "O", "SI", "CT", "TS", "T", "TID"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "S", "ID", "O", "SI", "CT", "TS", "T", "TID"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "S", "ID", "O", "SI", "CT", "TS", "T", "TID"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "S", "ID", "O", "SI", "CT", "TS", "T", "TID"
    };
    


}

/// <summary>
/// WebCapturePageSet_Type Table 388 and Table 389
/// </summary>
internal partial class APM_WebCapturePageSet_Type : APM_WebCapturePageSet_Type__Base
{
}


internal partial class APM_WebCapturePageSet_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCapturePageSet_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_WebCapturePageSet_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.SpiderContentSet)) 
        {
            ctx.Fail<APM_WebCapturePageSet_Type>($"Invalid value {val}, allowed are: [SpiderContentSet]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// WebCapturePageSet_S 
/// </summary>
internal partial class APM_WebCapturePageSet_S : APM_WebCapturePageSet_S__Base
{
}


internal partial class APM_WebCapturePageSet_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCapturePageSet_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_WebCapturePageSet_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.SPS)) 
        {
            ctx.Fail<APM_WebCapturePageSet_S>($"Invalid value {val}, allowed are: [SPS]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// WebCapturePageSet_ID 
/// </summary>
internal partial class APM_WebCapturePageSet_ID : APM_WebCapturePageSet_ID__Base
{
}


internal partial class APM_WebCapturePageSet_ID__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCapturePageSet_ID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfString, APM_WebCapturePageSet_ID>(obj, "ID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// WebCapturePageSet_O 
/// </summary>
internal partial class APM_WebCapturePageSet_O : APM_WebCapturePageSet_O__Base
{
}


internal partial class APM_WebCapturePageSet_O__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCapturePageSet_O";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_WebCapturePageSet_O>(obj, "O", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfWebCapturePages, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// WebCapturePageSet_SI 
/// </summary>
internal partial class APM_WebCapturePageSet_SI : APM_WebCapturePageSet_SI__Base
{
}


internal partial class APM_WebCapturePageSet_SI__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCapturePageSet_SI";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_WebCapturePageSet_SI>(obj, "SI", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_WebCapturePageSet_SI>("SI is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfSourceInformation, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_SourceInformation, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_WebCapturePageSet_SI>("SI is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// WebCapturePageSet_CT shall conform to the content type specification described in Internet RFC 2045
/// </summary>
internal partial class APM_WebCapturePageSet_CT : APM_WebCapturePageSet_CT__Base
{
}


internal partial class APM_WebCapturePageSet_CT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCapturePageSet_CT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_WebCapturePageSet_CT>(obj, "CT", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// WebCapturePageSet_TS 
/// </summary>
internal partial class APM_WebCapturePageSet_TS : APM_WebCapturePageSet_TS__Base
{
}


internal partial class APM_WebCapturePageSet_TS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCapturePageSet_TS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_WebCapturePageSet_TS>(obj, "TS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// WebCapturePageSet_T 
/// </summary>
internal partial class APM_WebCapturePageSet_T : APM_WebCapturePageSet_T__Base
{
}


internal partial class APM_WebCapturePageSet_T__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCapturePageSet_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_WebCapturePageSet_T>(obj, "T", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// WebCapturePageSet_TID 
/// </summary>
internal partial class APM_WebCapturePageSet_TID : APM_WebCapturePageSet_TID__Base
{
}


internal partial class APM_WebCapturePageSet_TID__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCapturePageSet_TID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_WebCapturePageSet_TID>(obj, "TID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

