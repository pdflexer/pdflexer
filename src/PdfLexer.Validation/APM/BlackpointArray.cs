// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_BlackpointArray : ISpecification<PdfArray>
{
    public static string Name { get; } = "BlackpointArray";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_BlackpointArray_0, PdfArray>(stack, obj, parent);
        ctx.Run<APM_BlackpointArray_1, PdfArray>(stack, obj, parent);
        ctx.Run<APM_BlackpointArray_2, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// BlackpointArray_0 Table 62 and Table 63, BlackPoint cell
/// </summary>
internal partial class APM_BlackpointArray_0 : ISpecification<PdfArray>
{
    public static string Name { get; } = "BlackpointArray_0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfNumber, APM_BlackpointArray_0>(obj, 0, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        IPdfObject v = val;
        
        if (!(gte(v,0))) 
        {
            ctx.Fail<APM_BlackpointArray_0>($"Invalid value {val}, allowed are: [fn:Eval(@0>=0)]");
        }
        // no linked objects
        
    }
}

/// <summary>
/// BlackpointArray_1 
/// </summary>
internal partial class APM_BlackpointArray_1 : ISpecification<PdfArray>
{
    public static string Name { get; } = "BlackpointArray_1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfNumber, APM_BlackpointArray_1>(obj, 1, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        IPdfObject v = val;
        
        if (!(gte(v,0))) 
        {
            ctx.Fail<APM_BlackpointArray_1>($"Invalid value {val}, allowed are: [fn:Eval(@1>=0)]");
        }
        // no linked objects
        
    }
}

/// <summary>
/// BlackpointArray_2 
/// </summary>
internal partial class APM_BlackpointArray_2 : ISpecification<PdfArray>
{
    public static string Name { get; } = "BlackpointArray_2";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfNumber, APM_BlackpointArray_2>(obj, 2, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        IPdfObject v = val;
        
        if (!(gte(v,0))) 
        {
            ctx.Fail<APM_BlackpointArray_2>($"Invalid value {val}, allowed are: [fn:Eval(@2>=0)]");
        }
        // no linked objects
        
    }
}

