// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AnnotMovie : APM_AnnotMovie_Base
{
}

internal partial class APM_AnnotMovie_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AnnotMovie";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AnnotMovie_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_Rect, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_Contents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_NM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_M, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_AP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_AS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_Border, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_ca, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_CA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_BM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_Lang, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_T, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_Movie, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotMovie_A, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_AnnotMovie>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_AnnotMovie>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_AnnotMovie>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_AnnotMovie>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_AnnotMovie>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_AnnotMovie>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_AnnotMovie>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_AnnotMovie>($"Unknown field {extra} for version 1.9");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_AnnotMovie_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "M", "F", "AP", "AS", "Border", "C", "T", "Movie", "A"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "M", "F", "AP", "AS", "Border", "C", "StructParent", "T", "Movie", "A"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "T", "Movie", "A"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "T", "Movie", "A"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "T", "Movie", "A"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "T", "Movie", "A"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "T", "Movie", "A"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "T", "Movie", "A"
    };
    


}

/// <summary>
/// AnnotMovie_Type Table 166 and Table 189 (NOT markup annot)
/// </summary>
internal partial class APM_AnnotMovie_Type : APM_AnnotMovie_Type_Base
{
}


internal partial class APM_AnnotMovie_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotMovie_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Annot")) 
        {
            ctx.Fail<APM_AnnotMovie_Type>($"Invalid value {val}, allowed are: [Annot]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_Subtype 
/// </summary>
internal partial class APM_AnnotMovie_Subtype : APM_AnnotMovie_Subtype_Base
{
}


internal partial class APM_AnnotMovie_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_AnnotMovie_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Movie")) 
        {
            ctx.Fail<APM_AnnotMovie_Subtype>($"Invalid value {val}, allowed are: [Movie]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_Rect 
/// </summary>
internal partial class APM_AnnotMovie_Rect : APM_AnnotMovie_Rect_Base
{
}


internal partial class APM_AnnotMovie_Rect_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_Rect";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_AnnotMovie_Rect>(obj, "Rect", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_Contents 
/// </summary>
internal partial class APM_AnnotMovie_Contents : APM_AnnotMovie_Contents_Base
{
}


internal partial class APM_AnnotMovie_Contents_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_Contents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotMovie_Contents>(obj, "Contents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_P 
/// </summary>
internal partial class APM_AnnotMovie_P : APM_AnnotMovie_P_Base
{
}


internal partial class APM_AnnotMovie_P_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotMovie_P>(obj, "P", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PageObject, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotMovie_NM 
/// </summary>
internal partial class APM_AnnotMovie_NM : APM_AnnotMovie_NM_Base
{
}


internal partial class APM_AnnotMovie_NM_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_NM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotMovie_NM>(obj, "NM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_M 
/// </summary>
internal partial class APM_AnnotMovie_M : APM_AnnotMovie_M_Base
{
}


internal partial class APM_AnnotMovie_M_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotMovie_M>(obj, "M", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            
            // TODO MC date;string-text
            
            default:
                ctx.Fail<APM_AnnotMovie_M>("M is required to one of 'date;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotMovie_F Table 167
/// </summary>
internal partial class APM_AnnotMovie_F : APM_AnnotMovie_F_Base
{
}


internal partial class APM_AnnotMovie_F_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotMovie_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_AP 
/// </summary>
internal partial class APM_AnnotMovie_AP : APM_AnnotMovie_AP_Base
{
}


internal partial class APM_AnnotMovie_AP_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_AP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfDictionary? val;
        {
            var Rect = obj.Get("Rect");
            if (ctx.Version >= 2.0m && (gt(RectWidth(obj),0)||gt(RectHeight(Rect),0))) {
                val = ctx.GetRequired<PdfDictionary, APM_AnnotMovie_AP>(obj, "AP", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfDictionary, APM_AnnotMovie_AP>(obj, "AP", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Appearance, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotMovie_AS 
/// </summary>
internal partial class APM_AnnotMovie_AS : APM_AnnotMovie_AS_Base
{
}


internal partial class APM_AnnotMovie_AS_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_AS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfName? val;
        {
            var APN = obj.Get("AP")?.Get("N");
            var APR = obj.Get("AP")?.Get("R");
            var APD = obj.Get("AP")?.Get("D");
            if (obj.ContainsKey(APN)||obj.ContainsKey(APR)||obj.ContainsKey(APD)) {
                val = ctx.GetRequired<PdfName, APM_AnnotMovie_AS>(obj, "AS", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfName, APM_AnnotMovie_AS>(obj, "AS", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_Border 
/// </summary>
internal partial class APM_AnnotMovie_Border : APM_AnnotMovie_Border_Base
{
}


internal partial class APM_AnnotMovie_Border_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_Border";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotMovie_Border>(obj, "Border", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4AnnotBorderCharacteristics, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotMovie_C 
/// </summary>
internal partial class APM_AnnotMovie_C : APM_AnnotMovie_C_Base
{
}


internal partial class APM_AnnotMovie_C_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotMovie_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4NumbersColorAnnotation, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotMovie_StructParent Table 359
/// </summary>
internal partial class APM_AnnotMovie_StructParent : APM_AnnotMovie_StructParent_Base
{
}


internal partial class APM_AnnotMovie_StructParent_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotMovie_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_OC 
/// </summary>
internal partial class APM_AnnotMovie_OC : APM_AnnotMovie_OC_Base
{
}


internal partial class APM_AnnotMovie_OC_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotMovie_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotMovie_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// AnnotMovie_AF 
/// </summary>
internal partial class APM_AnnotMovie_AF : APM_AnnotMovie_AF_Base
{
}


internal partial class APM_AnnotMovie_AF_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotMovie_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotMovie_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotMovie_ca 
/// </summary>
internal partial class APM_AnnotMovie_ca : APM_AnnotMovie_ca_Base
{
}


internal partial class APM_AnnotMovie_ca_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_ca";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotMovie_ca>(obj, "ca", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @ca = val;
        if (!((gte(@ca,0.0m)&&lte(@ca,1.0m)))) 
        {
            ctx.Fail<APM_AnnotMovie_ca>($"Invalid value {val}, allowed are: [fn:Eval((@ca>=0.0) && (@ca<=1.0))]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_CA 
/// </summary>
internal partial class APM_AnnotMovie_CA : APM_AnnotMovie_CA_Base
{
}


internal partial class APM_AnnotMovie_CA_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_CA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotMovie_CA>(obj, "CA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @CA = val;
        if (!((gte(@CA,0.0m)&&lte(@CA,1.0m)))) 
        {
            ctx.Fail<APM_AnnotMovie_CA>($"Invalid value {val}, allowed are: [fn:Eval((@CA>=0.0) && (@CA<=1.0))]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_BM Table 134 and Table 135
/// </summary>
internal partial class APM_AnnotMovie_BM : APM_AnnotMovie_BM_Base
{
}


internal partial class APM_AnnotMovie_BM_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_BM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotMovie_BM>(obj, "BM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!((ctx.Version <= 1.4m && val == "Compatible") || val == "Normal" || val == "Multiply" || val == "Screen" || val == "Difference" || val == "Darken" || val == "Lighten" || val == "ColorDodge" || val == "ColorBurn" || val == "Exclusion" || val == "HardLight" || val == "Overlay" || val == "SoftLight" || val == "Luminosity" || val == "Hue" || val == "Saturation" || val == "Color")) 
        {
            ctx.Fail<APM_AnnotMovie_BM>($"Invalid value {val}, allowed are: [fn:Deprecated(1.4,Compatible),Normal,Multiply,Screen,Difference,Darken,Lighten,ColorDodge,ColorBurn,Exclusion,HardLight,Overlay,SoftLight,Luminosity,Hue,Saturation,Color]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_Lang 
/// </summary>
internal partial class APM_AnnotMovie_Lang : APM_AnnotMovie_Lang_Base
{
}


internal partial class APM_AnnotMovie_Lang_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_Lang";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotMovie_Lang>(obj, "Lang", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_T 
/// </summary>
internal partial class APM_AnnotMovie_T : APM_AnnotMovie_T_Base
{
}


internal partial class APM_AnnotMovie_T_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotMovie_T>(obj, "T", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotMovie_Movie 
/// </summary>
internal partial class APM_AnnotMovie_Movie : APM_AnnotMovie_Movie_Base
{
}


internal partial class APM_AnnotMovie_Movie_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_Movie";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfDictionary, APM_AnnotMovie_Movie>(obj, "Movie", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Movie, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotMovie_A 
/// </summary>
internal partial class APM_AnnotMovie_A : APM_AnnotMovie_A_Base
{
}


internal partial class APM_AnnotMovie_A_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotMovie_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotMovie_A>(obj, "A", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.BooleanObj:
                {
                    var val =  (PdfBoolean)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_MovieActivation, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotMovie_A>("A is required to one of 'boolean;dictionary', was " + utval.Type);
                return;
        }
    }


}

