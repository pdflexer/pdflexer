// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_CollectionSort : APM_CollectionSort__Base
{
}

internal partial class APM_CollectionSort__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "CollectionSort";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_CollectionSort_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CollectionSort_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CollectionSort_A, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_CollectionSort>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_CollectionSort_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_17_18_19_20 { get; } = new List<string> 
    {
        "A", "S", "Type"
    };
    


}

/// <summary>
/// CollectionSort_Type Table 156
/// </summary>
internal partial class APM_CollectionSort_Type : APM_CollectionSort_Type__Base
{
}


internal partial class APM_CollectionSort_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionSort_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_CollectionSort_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.CollectionSort)) 
        {
            ctx.Fail<APM_CollectionSort_Type>($"Invalid value {val}, allowed are: [CollectionSort]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// CollectionSort_S 
/// </summary>
internal partial class APM_CollectionSort_S : APM_CollectionSort_S__Base
{
}


internal partial class APM_CollectionSort_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionSort_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_CollectionSort_S>(obj, "S", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_CollectionSort_S>("S is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfNamesGeneral, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_CollectionSort_S>("S is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// CollectionSort_A 
/// </summary>
internal partial class APM_CollectionSort_A : APM_CollectionSort_A__Base
{
}


internal partial class APM_CollectionSort_A__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionSort_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_CollectionSort_A>(obj, "A", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfBooleansGeneral, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.BooleanObj:
                {
                    var val =  (PdfBoolean)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_CollectionSort_A>("A is required to one of 'array;boolean', was " + utval.Type);
                return;
        }
    }


}

