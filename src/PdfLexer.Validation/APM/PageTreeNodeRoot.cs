// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_PageTreeNodeRoot : APM_PageTreeNodeRoot__Base
{
}

internal partial class APM_PageTreeNodeRoot__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "PageTreeNodeRoot";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_PageTreeNodeRoot_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PageTreeNodeRoot_Kids, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PageTreeNodeRoot_Count, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PageTreeNodeRoot_Resources, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PageTreeNodeRoot_MediaBox, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PageTreeNodeRoot_CropBox, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PageTreeNodeRoot_Rotate, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.0");
                }
                break;
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_PageTreeNodeRoot>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_PageTreeNodeRoot_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_10 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_11 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Kids", "Count", "Resources", "MediaBox", "CropBox", "Rotate"
    };
    


}

/// <summary>
/// PageTreeNodeRoot_Type Table 30 and Table 31 for inheritable keys
/// </summary>
internal partial class APM_PageTreeNodeRoot_Type : APM_PageTreeNodeRoot_Type__Base
{
}


internal partial class APM_PageTreeNodeRoot_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageTreeNodeRoot_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_PageTreeNodeRoot_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Pages)) 
        {
            ctx.Fail<APM_PageTreeNodeRoot_Type>($"Invalid value {val}, allowed are: [Pages]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// PageTreeNodeRoot_Kids 
/// </summary>
internal partial class APM_PageTreeNodeRoot_Kids : APM_PageTreeNodeRoot_Kids__Base
{
}


internal partial class APM_PageTreeNodeRoot_Kids__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageTreeNodeRoot_Kids";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_PageTreeNodeRoot_Kids>(obj, "Kids", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfPageTreeNodeKids, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// PageTreeNodeRoot_Count 
/// </summary>
internal partial class APM_PageTreeNodeRoot_Count : APM_PageTreeNodeRoot_Count__Base
{
}


internal partial class APM_PageTreeNodeRoot_Count__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageTreeNodeRoot_Count";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_PageTreeNodeRoot_Count>(obj, "Count", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var Count = obj.Get("Count");
        if (!(gte(Count,0))) 
        {
            ctx.Fail<APM_PageTreeNodeRoot_Count>($"Invalid value {val}, allowed are: [fn:Eval(@Count>=0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// PageTreeNodeRoot_Resources Inheritable
/// </summary>
internal partial class APM_PageTreeNodeRoot_Resources : APM_PageTreeNodeRoot_Resources__Base
{
}


internal partial class APM_PageTreeNodeRoot_Resources__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageTreeNodeRoot_Resources";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_PageTreeNodeRoot_Resources>(obj, "Resources", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Resource, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// PageTreeNodeRoot_MediaBox Inheritable
/// </summary>
internal partial class APM_PageTreeNodeRoot_MediaBox : APM_PageTreeNodeRoot_MediaBox__Base
{
}


internal partial class APM_PageTreeNodeRoot_MediaBox__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageTreeNodeRoot_MediaBox";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_PageTreeNodeRoot_MediaBox>(obj, "MediaBox", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PageTreeNodeRoot_CropBox Inheritable
/// </summary>
internal partial class APM_PageTreeNodeRoot_CropBox : APM_PageTreeNodeRoot_CropBox__Base
{
}


internal partial class APM_PageTreeNodeRoot_CropBox__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageTreeNodeRoot_CropBox";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_PageTreeNodeRoot_CropBox>(obj, "CropBox", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PageTreeNodeRoot_Rotate Inheritable
/// </summary>
internal partial class APM_PageTreeNodeRoot_Rotate : APM_PageTreeNodeRoot_Rotate__Base
{
}


internal partial class APM_PageTreeNodeRoot_Rotate__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageTreeNodeRoot_Rotate";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_PageTreeNodeRoot_Rotate>(obj, "Rotate", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var Rotate = obj.Get("Rotate");
        if (!(eq(mod(Rotate,90),0))) 
        {
            ctx.Fail<APM_PageTreeNodeRoot_Rotate>($"Invalid value {val}, allowed are: [fn:Eval((@Rotate mod 90)==0)]");
        }
        // no linked objects
        
    }


}

