// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Resource : APM_Resource__Base
{
}

internal partial class APM_Resource__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Resource";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Resource_ExtGState, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Resource_ColorSpace, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Resource_Pattern, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Resource_Shading, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Resource_XObject, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Resource_Font, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Resource_ProcSet, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Resource_Properties, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10_11.Contains(x)))
                {
                    ctx.Fail<APM_Resource>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_Resource>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 1.3m:
            case 1.4m:
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13_14_15_16_17_18_19.Contains(x)))
                {
                    ctx.Fail<APM_Resource>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_Resource>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_10_11 { get; } = new List<string> 
    {
        "ColorSpace", "Font", "ProcSet", "XObject"
    };
    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "ColorSpace", "ExtGState", "Font", "Pattern", "ProcSet", "Properties", "XObject"
    };
    public static HashSet<string> AllowedFields_13_14_15_16_17_18_19 { get; } = new HashSet<string> 
    {
        "ColorSpace", "ExtGState", "Font", "Pattern", "ProcSet", "Properties", "Shading", "XObject"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "ColorSpace", "ExtGState", "Font", "Pattern", "Properties", "Shading", "XObject"
    };
    


}

/// <summary>
/// Resource_ExtGState Table 34
/// </summary>
internal partial class APM_Resource_ExtGState : APM_Resource_ExtGState__Base
{
}


internal partial class APM_Resource_ExtGState__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Resource_ExtGState";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_Resource_ExtGState>(obj, "ExtGState", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_GraphicsStateParameterMap, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Resource_ColorSpace 
/// </summary>
internal partial class APM_Resource_ColorSpace : APM_Resource_ColorSpace__Base
{
}


internal partial class APM_Resource_ColorSpace__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Resource_ColorSpace";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_Resource_ColorSpace>(obj, "ColorSpace", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ColorSpaceMap, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Resource_Pattern 
/// </summary>
internal partial class APM_Resource_Pattern : APM_Resource_Pattern__Base
{
}


internal partial class APM_Resource_Pattern__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Resource_Pattern";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_Resource_Pattern>(obj, "Pattern", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PatternMap, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Resource_Shading 
/// </summary>
internal partial class APM_Resource_Shading : APM_Resource_Shading__Base
{
}


internal partial class APM_Resource_Shading__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Resource_Shading";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_Resource_Shading>(obj, "Shading", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ShadingMap, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Resource_XObject 
/// </summary>
internal partial class APM_Resource_XObject : APM_Resource_XObject__Base
{
}


internal partial class APM_Resource_XObject__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Resource_XObject";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_Resource_XObject>(obj, "XObject", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_XObjectMap, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Resource_Font 
/// </summary>
internal partial class APM_Resource_Font : APM_Resource_Font__Base
{
}


internal partial class APM_Resource_Font__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Resource_Font";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_Resource_Font>(obj, "Font", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_FontMap, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Resource_ProcSet Clause 14.2 says deprecated in 1.4
/// </summary>
internal partial class APM_Resource_ProcSet : APM_Resource_ProcSet__Base
{
}


internal partial class APM_Resource_ProcSet__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Resource_ProcSet";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_Resource_ProcSet>(obj, "ProcSet", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNamesForProcSet, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// Resource_Properties 
/// </summary>
internal partial class APM_Resource_Properties : APM_Resource_Properties__Base
{
}


internal partial class APM_Resource_Properties__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Resource_Properties";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_Resource_Properties>(obj, "Properties", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM__UniversalDictionary, PdfDictionary>(stack, val, obj);
        
    }


}

