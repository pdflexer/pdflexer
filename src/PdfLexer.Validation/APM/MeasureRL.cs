// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_MeasureRL : APM_MeasureRL_Base
{
}

internal partial class APM_MeasureRL_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "MeasureRL";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_MeasureRL_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_R, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_X, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_Y, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_D, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_A, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_T, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_O, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MeasureRL_CYX, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_MeasureRL>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_MeasureRL>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_MeasureRL>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_MeasureRL>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_MeasureRL>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_MeasureRL_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "R", "X", "Y", "D", "A", "T", "S", "O", "CYX"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "R", "X", "Y", "D", "A", "T", "S", "O", "CYX"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "R", "X", "Y", "D", "A", "T", "S", "O", "CYX"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "R", "X", "Y", "D", "A", "T", "S", "O", "CYX"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "R", "X", "Y", "D", "A", "T", "S", "O", "CYX"
    };
    


}

/// <summary>
/// MeasureRL_Type Table 266 and Table 267
/// </summary>
internal partial class APM_MeasureRL_Type : APM_MeasureRL_Type_Base
{
}


internal partial class APM_MeasureRL_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_MeasureRL_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Measure")) 
        {
            ctx.Fail<APM_MeasureRL_Type>($"Invalid value {val}, allowed are: [Measure]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// MeasureRL_Subtype 
/// </summary>
internal partial class APM_MeasureRL_Subtype : APM_MeasureRL_Subtype_Base
{
}


internal partial class APM_MeasureRL_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_MeasureRL_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "RL")) 
        {
            ctx.Fail<APM_MeasureRL_Subtype>($"Invalid value {val}, allowed are: [RL]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// MeasureRL_R 
/// </summary>
internal partial class APM_MeasureRL_R : APM_MeasureRL_R_Base
{
}


internal partial class APM_MeasureRL_R_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfString, APM_MeasureRL_R>(obj, "R", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MeasureRL_X 
/// </summary>
internal partial class APM_MeasureRL_X : APM_MeasureRL_X_Base
{
}


internal partial class APM_MeasureRL_X_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_X";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_MeasureRL_X>(obj, "X", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumberFormats, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MeasureRL_Y 
/// </summary>
internal partial class APM_MeasureRL_Y : APM_MeasureRL_Y_Base
{
}


internal partial class APM_MeasureRL_Y_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_Y";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_MeasureRL_Y>(obj, "Y", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumberFormats, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MeasureRL_D 
/// </summary>
internal partial class APM_MeasureRL_D : APM_MeasureRL_D_Base
{
}


internal partial class APM_MeasureRL_D_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_D";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_MeasureRL_D>(obj, "D", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumberFormats, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MeasureRL_A 
/// </summary>
internal partial class APM_MeasureRL_A : APM_MeasureRL_A_Base
{
}


internal partial class APM_MeasureRL_A_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_MeasureRL_A>(obj, "A", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumberFormats, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MeasureRL_T 
/// </summary>
internal partial class APM_MeasureRL_T : APM_MeasureRL_T_Base
{
}


internal partial class APM_MeasureRL_T_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_MeasureRL_T>(obj, "T", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumberFormats, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MeasureRL_S 
/// </summary>
internal partial class APM_MeasureRL_S : APM_MeasureRL_S_Base
{
}


internal partial class APM_MeasureRL_S_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_MeasureRL_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumberFormats, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MeasureRL_O 
/// </summary>
internal partial class APM_MeasureRL_O : APM_MeasureRL_O_Base
{
}


internal partial class APM_MeasureRL_O_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_O";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_MeasureRL_O>(obj, "O", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_2Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MeasureRL_CYX 
/// </summary>
internal partial class APM_MeasureRL_CYX : APM_MeasureRL_CYX_Base
{
}


internal partial class APM_MeasureRL_CYX_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MeasureRL_CYX";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_MeasureRL_CYX>(obj, "CYX", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

