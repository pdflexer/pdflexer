// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfCIDGlyphMetricsW2 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfCIDGlyphMetricsW2";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfCIDGlyphMetricsW2_x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// ArrayOfCIDGlyphMetricsW2_* Clause 9.7.4.3 - C-last
/// </summary>
internal partial class APM_ArrayOfCIDGlyphMetricsW2_x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfCIDGlyphMetricsW2_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=1) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var (utval, wasIR) = ctx.GetOptional<APM_ArrayOfCIDGlyphMetricsW2_x>(obj, n, IndirectRequirement.Either);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                case PdfObjectType.ArrayObj:
                    {
                        var val =  (PdfArray)utval;
                        // no indirect obj reqs
                        
                        if (!(eq(mod(((val as PdfArray)?.Count),3),0))) 
                        {
                            ctx.Fail<APM_ArrayOfCIDGlyphMetricsW2_x>($"Value failed special case check: fn:Eval((fn:ArrayLength(*) mod 3)==0)");
                        }
                        // no value restrictions
                        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
                        return;
                    }
                case PdfObjectType.NumericObj:
                    {
                        var val =  (PdfNumber)utval;
                        if (val is PdfIntNumber) 
                        {
                            // integer
                            // no indirect obj reqs
                            // no special cases
                            // no value restrictions
                            // no linked objects
                        } else if (true) 
                        {
                            // number
                            // no indirect obj reqs
                            // no special cases
                            // no value restrictions
                            // no linked objects
                        }
                        return;
                    }
                
                default:
                    ctx.Fail<APM_ArrayOfCIDGlyphMetricsW2_x>("* is required to one of 'array;integer;number', was " + utval.Type);
                    return;
            }
        }
    }
}

