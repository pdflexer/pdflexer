// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_MediaClipData : APM_MediaClipData__Base
{
}

internal partial class APM_MediaClipData__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "MediaClipData";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_MediaClipData_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaClipData_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaClipData_N, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaClipData_D, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaClipData_CT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaClipData_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaClipData_Alt, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaClipData_PL, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaClipData_MH, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaClipData_BE, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_MediaClipData>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_MediaClipData_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_15_16_17_18_19_20 { get; } = new HashSet<string> 
    {
        "Alt", "BE", "CT", "D", "MH", "N", "P", "PL", "S", "Type"
    };
    


}

/// <summary>
/// MediaClipData_Type Table 284 and Table 285
/// </summary>
internal partial class APM_MediaClipData_Type : APM_MediaClipData_Type__Base
{
}


internal partial class APM_MediaClipData_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_MediaClipData_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.MediaClip)) 
        {
            ctx.Fail<APM_MediaClipData_Type>($"Invalid value {val}, allowed are: [MediaClip]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// MediaClipData_S 
/// </summary>
internal partial class APM_MediaClipData_S : APM_MediaClipData_S__Base
{
}


internal partial class APM_MediaClipData_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_MediaClipData_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.MCD)) 
        {
            ctx.Fail<APM_MediaClipData_S>($"Invalid value {val}, allowed are: [MCD]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// MediaClipData_N 
/// </summary>
internal partial class APM_MediaClipData_N : APM_MediaClipData_N__Base
{
}


internal partial class APM_MediaClipData_N__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_N";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_MediaClipData_N>(obj, "N", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MediaClipData_D 
/// </summary>
internal partial class APM_MediaClipData_D : APM_MediaClipData_D__Base
{
}


internal partial class APM_MediaClipData_D__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_D";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_MediaClipData_D>(obj, "D", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_MediaClipData_D>("D is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_MediaClipData_D>("D is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_XObjectFormType1, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_MediaClipData_D>("D is required to one of 'dictionary;stream;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// MediaClipData_CT should conform to the content type specification described in RFC 2045
/// </summary>
internal partial class APM_MediaClipData_CT : APM_MediaClipData_CT__Base
{
}


internal partial class APM_MediaClipData_CT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_CT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_MediaClipData_CT>(obj, "CT", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MediaClipData_P 
/// </summary>
internal partial class APM_MediaClipData_P : APM_MediaClipData_P__Base
{
}


internal partial class APM_MediaClipData_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_MediaClipData_P>(obj, "P", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_MediaPermissions, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// MediaClipData_Alt 
/// </summary>
internal partial class APM_MediaClipData_Alt : APM_MediaClipData_Alt__Base
{
}


internal partial class APM_MediaClipData_Alt__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_Alt";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_MediaClipData_Alt>(obj, "Alt", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsText, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MediaClipData_PL 
/// </summary>
internal partial class APM_MediaClipData_PL : APM_MediaClipData_PL__Base
{
}


internal partial class APM_MediaClipData_PL__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_PL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_MediaClipData_PL>(obj, "PL", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_MediaPlayers, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// MediaClipData_MH 
/// </summary>
internal partial class APM_MediaClipData_MH : APM_MediaClipData_MH__Base
{
}


internal partial class APM_MediaClipData_MH__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_MH";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_MediaClipData_MH>(obj, "MH", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_MediaClipDataMHBE, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// MediaClipData_BE 
/// </summary>
internal partial class APM_MediaClipData_BE : APM_MediaClipData_BE__Base
{
}


internal partial class APM_MediaClipData_BE__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaClipData_BE";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_MediaClipData_BE>(obj, "BE", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_MediaClipDataMHBE, PdfDictionary>(stack, val, obj);
        
    }


}

