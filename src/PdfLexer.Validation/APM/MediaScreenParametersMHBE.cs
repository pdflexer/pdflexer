// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_MediaScreenParametersMHBE : APM_MediaScreenParametersMHBE_Base
{
}

internal partial class APM_MediaScreenParametersMHBE_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "MediaScreenParametersMHBE";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_MediaScreenParametersMHBE_W, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaScreenParametersMHBE_B, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaScreenParametersMHBE_O, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaScreenParametersMHBE_M, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaScreenParametersMHBE_F, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_MediaScreenParametersMHBE>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_MediaScreenParametersMHBE>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_MediaScreenParametersMHBE>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_MediaScreenParametersMHBE>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_MediaScreenParametersMHBE>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_MediaScreenParametersMHBE>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "W", "B", "O", "M", "F"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "W", "B", "O", "M", "F"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "W", "B", "O", "M", "F"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "W", "B", "O", "M", "F"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "W", "B", "O", "M", "F"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "W", "B", "O", "M", "F"
    };
    


}

/// <summary>
/// MediaScreenParametersMHBE_W Table 294
/// </summary>
internal partial class APM_MediaScreenParametersMHBE_W : APM_MediaScreenParametersMHBE_W_Base
{
}


internal partial class APM_MediaScreenParametersMHBE_W_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaScreenParametersMHBE_W";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_MediaScreenParametersMHBE_W>(obj, "W", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == 0 || val == 1 || val == 2 || val == 3)) 
        {
            ctx.Fail<APM_MediaScreenParametersMHBE_W>($"Invalid value {val}, allowed are: [0,1,2,3]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// MediaScreenParametersMHBE_B 
/// </summary>
internal partial class APM_MediaScreenParametersMHBE_B : APM_MediaScreenParametersMHBE_B_Base
{
}


internal partial class APM_MediaScreenParametersMHBE_B_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaScreenParametersMHBE_B";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_MediaScreenParametersMHBE_B>(obj, "B", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3RGBNumbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MediaScreenParametersMHBE_O 
/// </summary>
internal partial class APM_MediaScreenParametersMHBE_O : APM_MediaScreenParametersMHBE_O_Base
{
}


internal partial class APM_MediaScreenParametersMHBE_O_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaScreenParametersMHBE_O";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_MediaScreenParametersMHBE_O>(obj, "O", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @O = val;
        if (!((gte(@O,0.0m)&&lte(@O,1.0m)))) 
        {
            ctx.Fail<APM_MediaScreenParametersMHBE_O>($"Invalid value {val}, allowed are: [fn:Eval((@O>=0.0) && (@O<=1.0))]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// MediaScreenParametersMHBE_M 
/// </summary>
internal partial class APM_MediaScreenParametersMHBE_M : APM_MediaScreenParametersMHBE_M_Base
{
}


internal partial class APM_MediaScreenParametersMHBE_M_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaScreenParametersMHBE_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_MediaScreenParametersMHBE_M>(obj, "M", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == 0 || val == 1 || val == 2 || val == 3 || val == 4 || val == 5 || val == 6)) 
        {
            ctx.Fail<APM_MediaScreenParametersMHBE_M>($"Invalid value {val}, allowed are: [0,1,2,3,4,5,6]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// MediaScreenParametersMHBE_F 
/// </summary>
internal partial class APM_MediaScreenParametersMHBE_F : APM_MediaScreenParametersMHBE_F_Base
{
}


internal partial class APM_MediaScreenParametersMHBE_F_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaScreenParametersMHBE_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_MediaScreenParametersMHBE_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_FloatingWindowParameters, PdfDictionary>(stack, val, obj);
        
    }


}

