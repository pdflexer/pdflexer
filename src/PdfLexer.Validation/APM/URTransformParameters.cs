// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_URTransformParameters : APM_URTransformParameters__Base
{
}

internal partial class APM_URTransformParameters__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "URTransformParameters";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_URTransformParameters_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_URTransformParameters_Document, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_URTransformParameters_Msg, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_URTransformParameters_V, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_URTransformParameters_Annots, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_URTransformParameters_Form, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_URTransformParameters_Signature, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_URTransformParameters_EF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_URTransformParameters_P, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_URTransformParameters>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_URTransformParameters>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_URTransformParameters>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_URTransformParameters>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_URTransformParameters>($"Unknown field {extra} for version 1.9");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_URTransformParameters_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Document", "Msg", "V", "Annots", "Form", "Signature"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Document", "Msg", "V", "Annots", "Form", "Signature", "EF", "P"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Document", "Msg", "V", "Annots", "Form", "Signature", "EF", "P"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Document", "Msg", "V", "Annots", "Form", "Signature", "EF", "P"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Document", "Msg", "V", "Annots", "Form", "Signature", "EF", "P"
    };
    


}

/// <summary>
/// URTransformParameters_Type Table 258
/// </summary>
internal partial class APM_URTransformParameters_Type : APM_URTransformParameters_Type__Base
{
}


internal partial class APM_URTransformParameters_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "URTransformParameters_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_URTransformParameters_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.TransformParams)) 
        {
            ctx.Fail<APM_URTransformParameters_Type>($"Invalid value {val}, allowed are: [TransformParams]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// URTransformParameters_Document 
/// </summary>
internal partial class APM_URTransformParameters_Document : APM_URTransformParameters_Document__Base
{
}


internal partial class APM_URTransformParameters_Document__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "URTransformParameters_Document";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_URTransformParameters_Document>(obj, "Document", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_URTransformParamDocumentArray, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// URTransformParameters_Msg 
/// </summary>
internal partial class APM_URTransformParameters_Msg : APM_URTransformParameters_Msg__Base
{
}


internal partial class APM_URTransformParameters_Msg__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "URTransformParameters_Msg";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_URTransformParameters_Msg>(obj, "Msg", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// URTransformParameters_V 
/// </summary>
internal partial class APM_URTransformParameters_V : APM_URTransformParameters_V__Base
{
}


internal partial class APM_URTransformParameters_V__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "URTransformParameters_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_URTransformParameters_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// URTransformParameters_Annots 
/// </summary>
internal partial class APM_URTransformParameters_Annots : APM_URTransformParameters_Annots__Base
{
}


internal partial class APM_URTransformParameters_Annots__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "URTransformParameters_Annots";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_URTransformParameters_Annots>(obj, "Annots", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_URTransformParamAnnotsArray, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// URTransformParameters_Form 
/// </summary>
internal partial class APM_URTransformParameters_Form : APM_URTransformParameters_Form__Base
{
}


internal partial class APM_URTransformParameters_Form__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "URTransformParameters_Form";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_URTransformParameters_Form>(obj, "Form", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_URTransformParamFormArray, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// URTransformParameters_Signature 
/// </summary>
internal partial class APM_URTransformParameters_Signature : APM_URTransformParameters_Signature__Base
{
}


internal partial class APM_URTransformParameters_Signature__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "URTransformParameters_Signature";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_URTransformParameters_Signature>(obj, "Signature", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_URTransformParamSignatureArray, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// URTransformParameters_EF 
/// </summary>
internal partial class APM_URTransformParameters_EF : APM_URTransformParameters_EF__Base
{
}


internal partial class APM_URTransformParameters_EF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "URTransformParameters_EF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_URTransformParameters_EF>(obj, "EF", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_URTransformParamEFArray, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// URTransformParameters_P 
/// </summary>
internal partial class APM_URTransformParameters_P : APM_URTransformParameters_P__Base
{
}


internal partial class APM_URTransformParameters_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "URTransformParameters_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfBoolean, APM_URTransformParameters_P>(obj, "P", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

