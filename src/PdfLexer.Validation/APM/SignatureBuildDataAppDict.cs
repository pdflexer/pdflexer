// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_SignatureBuildDataAppDict : APM_SignatureBuildDataAppDict_Base
{
}

internal partial class APM_SignatureBuildDataAppDict_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "SignatureBuildDataAppDict";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_SignatureBuildDataAppDict_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataAppDict_Date, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataAppDict_R, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataAppDict_PreRelease, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataAppDict_OS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataAppDict_NonEFontNoWarn, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataAppDict_TrustedMode, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataAppDict_V, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataAppDict_REx, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataAppDict>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataAppDict>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataAppDict>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataAppDict>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataAppDict>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataAppDict>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "V"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "V", "REx"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "REx"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "REx"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "REx"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "REx"
    };
    


}

/// <summary>
/// SignatureBuildDataAppDict_Name Adobe "Digital Signature Build Dictionary Specification" Table 2 and Table 3
/// </summary>
internal partial class APM_SignatureBuildDataAppDict_Name : APM_SignatureBuildDataAppDict_Name_Base
{
}


internal partial class APM_SignatureBuildDataAppDict_Name_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataAppDict_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_SignatureBuildDataAppDict_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataAppDict_Date 
/// </summary>
internal partial class APM_SignatureBuildDataAppDict_Date : APM_SignatureBuildDataAppDict_Date_Base
{
}


internal partial class APM_SignatureBuildDataAppDict_Date_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataAppDict_Date";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_SignatureBuildDataAppDict_Date>(obj, "Date", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataAppDict_R 
/// </summary>
internal partial class APM_SignatureBuildDataAppDict_R : APM_SignatureBuildDataAppDict_R_Base
{
}


internal partial class APM_SignatureBuildDataAppDict_R_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataAppDict_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_SignatureBuildDataAppDict_R>(obj, "R", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataAppDict_PreRelease 
/// </summary>
internal partial class APM_SignatureBuildDataAppDict_PreRelease : APM_SignatureBuildDataAppDict_PreRelease_Base
{
}


internal partial class APM_SignatureBuildDataAppDict_PreRelease_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataAppDict_PreRelease";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_SignatureBuildDataAppDict_PreRelease>(obj, "PreRelease", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataAppDict_OS 
/// </summary>
internal partial class APM_SignatureBuildDataAppDict_OS : APM_SignatureBuildDataAppDict_OS_Base
{
}


internal partial class APM_SignatureBuildDataAppDict_OS_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataAppDict_OS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_SignatureBuildDataAppDict_OS>(obj, "OS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsText, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// SignatureBuildDataAppDict_NonEFontNoWarn 
/// </summary>
internal partial class APM_SignatureBuildDataAppDict_NonEFontNoWarn : APM_SignatureBuildDataAppDict_NonEFontNoWarn_Base
{
}


internal partial class APM_SignatureBuildDataAppDict_NonEFontNoWarn_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataAppDict_NonEFontNoWarn";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_SignatureBuildDataAppDict_NonEFontNoWarn>(obj, "NonEFontNoWarn", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataAppDict_TrustedMode 
/// </summary>
internal partial class APM_SignatureBuildDataAppDict_TrustedMode : APM_SignatureBuildDataAppDict_TrustedMode_Base
{
}


internal partial class APM_SignatureBuildDataAppDict_TrustedMode_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataAppDict_TrustedMode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_SignatureBuildDataAppDict_TrustedMode>(obj, "TrustedMode", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataAppDict_V 
/// </summary>
internal partial class APM_SignatureBuildDataAppDict_V : APM_SignatureBuildDataAppDict_V_Base
{
}


internal partial class APM_SignatureBuildDataAppDict_V_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataAppDict_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_SignatureBuildDataAppDict_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataAppDict_REx 
/// </summary>
internal partial class APM_SignatureBuildDataAppDict_REx : APM_SignatureBuildDataAppDict_REx_Base
{
}


internal partial class APM_SignatureBuildDataAppDict_REx_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataAppDict_REx";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_SignatureBuildDataAppDict_REx>(obj, "REx", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

