// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_ViewParams : APM_ViewParams__Base
{
}

internal partial class APM_ViewParams__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "ViewParams";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_ViewParams_Instance, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ViewParams_Data, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
        
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    


}

/// <summary>
/// ViewParams_Instance Table 345
/// </summary>
internal partial class APM_ViewParams_Instance : APM_ViewParams_Instance__Base
{
}


internal partial class APM_ViewParams_Instance__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ViewParams_Instance";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfDictionary, APM_ViewParams_Instance>(obj, "Instance", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_RichMediaInstance, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// ViewParams_Data 
/// </summary>
internal partial class APM_ViewParams_Data : APM_ViewParams_Data__Base
{
}


internal partial class APM_ViewParams_Data__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ViewParams_Data";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_ViewParams_Data>(obj, "Data", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_ViewParams_Data>("Data is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_ViewParams_Data>("Data is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_ViewParams_Data>("Data is required to one of 'stream;string-text', was " + utval.Type);
                return;
        }
    }


}

