// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfActionHideAnnots : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfActionHideAnnots";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfActionHideAnnots_x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false; // TODO
    }
}

/// <summary>
/// ArrayOfActionHideAnnots_* Table 214 T entry
/// </summary>
internal partial class APM_ArrayOfActionHideAnnots_x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfActionHideAnnots_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=1) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var (utval, wasIR) = ctx.GetOptional<APM_ArrayOfActionHideAnnots_x>(obj, n, IndirectRequirement.Either);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                case PdfObjectType.DictionaryObj:
                    {
                        var val =  (PdfDictionary)utval;
                        if (!wasIR) { ctx.Fail<APM_ArrayOfActionHideAnnots_x>("* is required to be indirect when a dictionary"); return; }
                        // no special cases
                        // no value restrictions
                        if (APM_AnnotText.MatchesType(ctx, val)) 
                        {
                            ctx.Run<APM_AnnotText, PdfDictionary>(stack, val, obj);
                        } else if (APM_AnnotLink.MatchesType(ctx, val)) 
                        {
                            ctx.Run<APM_AnnotLink, PdfDictionary>(stack, val, obj);
                        } else if (APM_AnnotSound.MatchesType(ctx, val)) 
                        {
                            ctx.Run<APM_AnnotSound, PdfDictionary>(stack, val, obj);
                        } else if (APM_AnnotMovie.MatchesType(ctx, val)) 
                        {
                            ctx.Run<APM_AnnotMovie, PdfDictionary>(stack, val, obj);
                        } else if (APM_AnnotWidget.MatchesType(ctx, val)) 
                        {
                            ctx.Run<APM_AnnotWidget, PdfDictionary>(stack, val, obj);
                        }else 
                        {
                            ctx.Fail<APM_ArrayOfActionHideAnnots_x>("x did not match any allowable types: '[AnnotText,AnnotLink,fn:SinceVersion(1.3,AnnotFreeText),fn:SinceVersion(1.3,AnnotLine),fn:SinceVersion(1.3,AnnotSquare),fn:SinceVersion(1.3,AnnotCircle),fn:SinceVersion(1.5,AnnotPolygon),fn:SinceVersion(1.5,AnnotPolyLine),fn:SinceVersion(1.3,AnnotHighlight),fn:SinceVersion(1.3,AnnotUnderline),fn:SinceVersion(1.4,AnnotSquiggly),fn:SinceVersion(1.3,AnnotStrikeOut),fn:SinceVersion(1.5,AnnotCaret),fn:SinceVersion(1.3,AnnotStamp),fn:SinceVersion(1.3,AnnotInk),fn:SinceVersion(1.3,AnnotPopup),fn:SinceVersion(1.3,AnnotFileAttachment),AnnotSound,AnnotMovie,fn:SinceVersion(1.5,AnnotScreen),AnnotWidget,fn:SinceVersion(1.4,AnnotPrinterMark),fn:SinceVersion(1.3,AnnotTrapNetwork),fn:SinceVersion(1.6,AnnotWatermark),fn:SinceVersion(1.6,Annot3D),fn:SinceVersion(1.7,AnnotRedact),fn:SinceVersion(2.0,AnnotProjection),fn:SinceVersion(2.0,AnnotRichMedia)]'");
                        }
                        return;
                    }
                case PdfObjectType.StringObj:
                    {
                        var val =  (PdfString)utval;
                        // no indirect obj reqs
                        // TODO special case
                        // no value restrictions
                        // no linked objects
                        return;
                    }
                
                default:
                    ctx.Fail<APM_ArrayOfActionHideAnnots_x>("* is required to one of 'dictionary;string-text', was " + utval.Type);
                    return;
            }
        }
    }
}

