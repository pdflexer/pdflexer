// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfActions : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfActions";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfActions_x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// ArrayOfActions_* 
/// </summary>
internal partial class APM_ArrayOfActions_x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfActions_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=1) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetOptional<PdfDictionary, APM_ArrayOfActions_x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            if (APM_ActionGoTo.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionGoTo, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionGoToR.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionGoToR, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionLaunch.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionLaunch, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionThread.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionThread, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionURI.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionURI, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionSound.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionSound, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionMovie.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionMovie, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionHide.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionHide, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionNamed.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionNamed, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionSubmitForm.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionSubmitForm, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionResetForm.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionResetForm, PdfDictionary>(stack, val, obj);
            } else if (APM_ActionImportData.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_ActionImportData, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version >= 1.6m && APM_ActionGoToE.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionGoToE, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version >= 2.0m && APM_ActionGoToDp.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionGoToDp, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version == 1.2m && APM_ActionNOP.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionNOP, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version == 1.2m && APM_ActionSetState.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionSetState, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version >= 1.5m && APM_ActionSetOCGState.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionSetOCGState, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version >= 1.5m && APM_ActionRendition.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionRendition, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version >= 1.5m && APM_ActionTransition.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionTransition, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version >= 1.6m && APM_ActionGoTo3DView.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionGoTo3DView, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version >= 1.3m && APM_ActionECMAScript.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
            } else if ((ctx.Version >= 2.0m && APM_ActionRichMediaExecute.MatchesType(ctx, val))) 
            {
                ctx.Run<APM_ActionRichMediaExecute, PdfDictionary>(stack, val, obj);
            }else 
            {
                ctx.Fail<APM_ArrayOfActions_x>("n did not match any allowable types: '[ActionGoTo,ActionGoToR,fn:SinceVersion(1.6,ActionGoToE),fn:SinceVersion(2.0,ActionGoToDp),ActionLaunch,fn:IsPDFVersion(1.2,ActionNOP),fn:IsPDFVersion(1.2,ActionSetState),ActionThread,ActionURI,ActionSound,ActionMovie,ActionHide,ActionNamed,ActionSubmitForm,ActionResetForm,ActionImportData,fn:SinceVersion(1.5,ActionSetOCGState),fn:SinceVersion(1.5,ActionRendition),fn:SinceVersion(1.5,ActionTransition),fn:SinceVersion(1.6,ActionGoTo3DView),fn:SinceVersion(1.3,ActionECMAScript),fn:SinceVersion(2.0,ActionRichMediaExecute)]'");
            }
            
        }
    }
}

