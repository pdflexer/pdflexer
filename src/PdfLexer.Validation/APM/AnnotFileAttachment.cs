// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AnnotFileAttachment : APM_AnnotFileAttachment__Base
{
}

internal partial class APM_AnnotFileAttachment__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AnnotFileAttachment";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AnnotFileAttachment_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_Rect, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_Contents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_NM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_M, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_AP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_AS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_Border, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_ca, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_CA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_BM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_Lang, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_T, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_Popup, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_RC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_CreationDate, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_IRT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_Subj, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_RT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_IT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_FS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotFileAttachment_ExData, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_AnnotFileAttachment>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_AnnotFileAttachment>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_AnnotFileAttachment>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_AnnotFileAttachment>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_AnnotFileAttachment>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_AnnotFileAttachment>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_AnnotFileAttachment>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_AnnotFileAttachment>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_AnnotFileAttachment_Type, PdfDictionary>(new CallStack(), obj, null);
        c.Run<APM_AnnotFileAttachment_Subtype, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "M", "F", "AP", "AS", "Border", "C", "StructParent", "T", "Popup", "FS", "Name"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "CA", "T", "Popup", "FS", "Name"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "FS", "Name"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "FS", "Name"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "FS", "Name", "ExData"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "FS", "Name", "ExData"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "FS", "Name", "ExData"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "AF", "ca", "CA", "BM", "Lang", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "FS", "Name", "ExData"
    };
    


}

/// <summary>
/// AnnotFileAttachment_Type Table 166 and Table 172 and Table 187 (markup annot)
/// </summary>
internal partial class APM_AnnotFileAttachment_Type : APM_AnnotFileAttachment_Type__Base
{
}


internal partial class APM_AnnotFileAttachment_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotFileAttachment_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Annot)) 
        {
            ctx.Fail<APM_AnnotFileAttachment_Type>($"Invalid value {val}, allowed are: [Annot]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_Subtype 
/// </summary>
internal partial class APM_AnnotFileAttachment_Subtype : APM_AnnotFileAttachment_Subtype__Base
{
}


internal partial class APM_AnnotFileAttachment_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_AnnotFileAttachment_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.FileAttachment)) 
        {
            ctx.Fail<APM_AnnotFileAttachment_Subtype>($"Invalid value {val}, allowed are: [FileAttachment]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_Rect 
/// </summary>
internal partial class APM_AnnotFileAttachment_Rect : APM_AnnotFileAttachment_Rect__Base
{
}


internal partial class APM_AnnotFileAttachment_Rect__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_Rect";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_AnnotFileAttachment_Rect>(obj, "Rect", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_Contents 
/// </summary>
internal partial class APM_AnnotFileAttachment_Contents : APM_AnnotFileAttachment_Contents__Base
{
}


internal partial class APM_AnnotFileAttachment_Contents__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_Contents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotFileAttachment_Contents>(obj, "Contents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_P 
/// </summary>
internal partial class APM_AnnotFileAttachment_P : APM_AnnotFileAttachment_P__Base
{
}


internal partial class APM_AnnotFileAttachment_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotFileAttachment_P>(obj, "P", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PageObject, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotFileAttachment_NM 
/// </summary>
internal partial class APM_AnnotFileAttachment_NM : APM_AnnotFileAttachment_NM__Base
{
}


internal partial class APM_AnnotFileAttachment_NM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_NM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotFileAttachment_NM>(obj, "NM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_M 
/// </summary>
internal partial class APM_AnnotFileAttachment_M : APM_AnnotFileAttachment_M__Base
{
}


internal partial class APM_AnnotFileAttachment_M__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotFileAttachment_M>(obj, "M", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StringObj:
                {
            
                    // TODO MC date;string-text
            
                    var val =  (PdfString)utval;
                    if (IsDate(val)) 
                    {
                        // date
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        // no linked objects
                    } else if (true) 
                    {
                        // string-text
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        // no linked objects
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotFileAttachment_M>("M is required to one of 'date;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotFileAttachment_F Table 167
/// </summary>
internal partial class APM_AnnotFileAttachment_F : APM_AnnotFileAttachment_F__Base
{
}


internal partial class APM_AnnotFileAttachment_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_AnnotFileAttachment_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!((ctx.Version >= 1.4m || BitsClear(val,0b11111111111111111111111110000000))&&(ctx.Version >= 1.5m || BitsClear(val,0b11111111111111111111111100000000))&&(ctx.Version >= 1.6m || BitsClear(val,0b11111111111111111111111000000000))&&(ctx.Version < 1.7m || BitsClear(val,0b11111111111111111111110000000000)))) 
        {
            ctx.Fail<APM_AnnotFileAttachment_F>($"Value failed special case check: fn:Eval(fn:BeforeVersion(1.4,fn:BitsClear(8,32)) && fn:BeforeVersion(1.5,fn:BitsClear(9,32)) && fn:BeforeVersion(1.6,fn:BitsClear(10,32)) && fn:SinceVersion(1.7,fn:BitsClear(11,32)))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_AP 
/// </summary>
internal partial class APM_AnnotFileAttachment_AP : APM_AnnotFileAttachment_AP__Base
{
}


internal partial class APM_AnnotFileAttachment_AP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_AP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var Rect = obj.Get("Rect");
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotFileAttachment_AP>(obj, "AP", IndirectRequirement.Either);
        if (((ctx.Version < 2.0m || (gt(RectWidth(Rect),0)||gt(RectHeight(Rect),0)))) && val == null) {
            ctx.Fail<APM_AnnotFileAttachment_AP>("AP is required when 'fn:IsRequired(fn:SinceVersion(2.0,(fn:RectWidth(Rect)>0) || (fn:RectHeight(Rect)>0)))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Appearance, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotFileAttachment_AS 
/// </summary>
internal partial class APM_AnnotFileAttachment_AS : APM_AnnotFileAttachment_AS__Base
{
}


internal partial class APM_AnnotFileAttachment_AS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_AS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var APN = obj.Get("AP")?.Get("N");
        var APR = obj.Get("AP")?.Get("R");
        var APD = obj.Get("AP")?.Get("D");
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotFileAttachment_AS>(obj, "AS", IndirectRequirement.Either);
        if (((APN != null)||(APR != null)||(APD != null)) && val == null) {
            ctx.Fail<APM_AnnotFileAttachment_AS>("AS is required when 'fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_Border 
/// </summary>
internal partial class APM_AnnotFileAttachment_Border : APM_AnnotFileAttachment_Border__Base
{
}


internal partial class APM_AnnotFileAttachment_Border__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_Border";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_AnnotFileAttachment_Border>(obj, "Border", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4AnnotBorderCharacteristics, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotFileAttachment_C 
/// </summary>
internal partial class APM_AnnotFileAttachment_C : APM_AnnotFileAttachment_C__Base
{
}


internal partial class APM_AnnotFileAttachment_C__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_AnnotFileAttachment_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4NumbersColorAnnotation, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotFileAttachment_StructParent Table 359
/// </summary>
internal partial class APM_AnnotFileAttachment_StructParent : APM_AnnotFileAttachment_StructParent__Base
{
}


internal partial class APM_AnnotFileAttachment_StructParent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_AnnotFileAttachment_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_OC 
/// </summary>
internal partial class APM_AnnotFileAttachment_OC : APM_AnnotFileAttachment_OC__Base
{
}


internal partial class APM_AnnotFileAttachment_OC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotFileAttachment_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotFileAttachment_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// AnnotFileAttachment_AF 
/// </summary>
internal partial class APM_AnnotFileAttachment_AF : APM_AnnotFileAttachment_AF__Base
{
}


internal partial class APM_AnnotFileAttachment_AF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotFileAttachment_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotFileAttachment_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotFileAttachment_ca 
/// </summary>
internal partial class APM_AnnotFileAttachment_ca : APM_AnnotFileAttachment_ca__Base
{
}


internal partial class APM_AnnotFileAttachment_ca__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_ca";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_AnnotFileAttachment_ca>(obj, "ca", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var ca = obj.Get("ca");
        if (!((gte(ca,0.0m)&&lte(ca,1.0m)))) 
        {
            ctx.Fail<APM_AnnotFileAttachment_ca>($"Invalid value {val}, allowed are: [fn:Eval((@ca>=0.0) && (@ca<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_CA 
/// </summary>
internal partial class APM_AnnotFileAttachment_CA : APM_AnnotFileAttachment_CA__Base
{
}


internal partial class APM_AnnotFileAttachment_CA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_CA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_AnnotFileAttachment_CA>(obj, "CA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var CA = obj.Get("CA");
        if (!((gte(CA,0.0m)&&lte(CA,1.0m)))) 
        {
            ctx.Fail<APM_AnnotFileAttachment_CA>($"Invalid value {val}, allowed are: [fn:Eval((@CA>=0.0) && (@CA<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_BM Table 134 and Table 135
/// </summary>
internal partial class APM_AnnotFileAttachment_BM : APM_AnnotFileAttachment_BM__Base
{
}


internal partial class APM_AnnotFileAttachment_BM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_BM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotFileAttachment_BM>(obj, "BM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!((ctx.Version < 1.4m && val == PdfName.Compatible) || val == PdfName.Normal || val == PdfName.Multiply || val == PdfName.Screen || val == PdfName.Difference || val == PdfName.Darken || val == PdfName.Lighten || val == PdfName.ColorDodge || val == PdfName.ColorBurn || val == PdfName.Exclusion || val == PdfName.HardLight || val == PdfName.Overlay || val == PdfName.SoftLight || val == PdfName.Luminosity || val == PdfName.Hue || val == PdfName.Saturation || val == PdfName.Color)) 
        {
            ctx.Fail<APM_AnnotFileAttachment_BM>($"Invalid value {val}, allowed are: [fn:Deprecated(1.4,Compatible),Normal,Multiply,Screen,Difference,Darken,Lighten,ColorDodge,ColorBurn,Exclusion,HardLight,Overlay,SoftLight,Luminosity,Hue,Saturation,Color]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_Lang 
/// </summary>
internal partial class APM_AnnotFileAttachment_Lang : APM_AnnotFileAttachment_Lang__Base
{
}


internal partial class APM_AnnotFileAttachment_Lang__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_Lang";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotFileAttachment_Lang>(obj, "Lang", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_T 
/// </summary>
internal partial class APM_AnnotFileAttachment_T : APM_AnnotFileAttachment_T__Base
{
}


internal partial class APM_AnnotFileAttachment_T__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotFileAttachment_T>(obj, "T", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_Popup 
/// </summary>
internal partial class APM_AnnotFileAttachment_Popup : APM_AnnotFileAttachment_Popup__Base
{
}


internal partial class APM_AnnotFileAttachment_Popup__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_Popup";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotFileAttachment_Popup>(obj, "Popup", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_AnnotPopup, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotFileAttachment_RC 
/// </summary>
internal partial class APM_AnnotFileAttachment_RC : APM_AnnotFileAttachment_RC__Base
{
}


internal partial class APM_AnnotFileAttachment_RC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_RC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotFileAttachment_RC>(obj, "RC", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_AnnotFileAttachment_RC>("RC is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotFileAttachment_RC>("RC is required to one of 'stream;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotFileAttachment_CreationDate 
/// </summary>
internal partial class APM_AnnotFileAttachment_CreationDate : APM_AnnotFileAttachment_CreationDate__Base
{
}


internal partial class APM_AnnotFileAttachment_CreationDate__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_CreationDate";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotFileAttachment_CreationDate>(obj, "CreationDate", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_IRT 
/// </summary>
internal partial class APM_AnnotFileAttachment_IRT : APM_AnnotFileAttachment_IRT__Base
{
}


internal partial class APM_AnnotFileAttachment_IRT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_IRT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotFileAttachment_IRT>(obj, "IRT", IndirectRequirement.Either);
        if ((obj.ContainsKey(PdfName.RT)) && val == null) {
            ctx.Fail<APM_AnnotFileAttachment_IRT>("IRT is required when 'fn:IsRequired(fn:IsPresent(RT))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        if (APM_AnnotText.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotText, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotLink.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotLink, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotFreeText.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotFreeText, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotLine.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotLine, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSquare.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSquare, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotCircle.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotCircle, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPolygon.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPolygon, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotHighlight.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotHighlight, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotUnderline.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotUnderline, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSquiggly.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSquiggly, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotStrikeOut.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotStrikeOut, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotCaret.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotCaret, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotStamp.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotStamp, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotInk.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotInk, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPopup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPopup, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotFileAttachment.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotFileAttachment, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSound.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSound, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotMovie.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotMovie, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotScreen.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotScreen, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotWidget.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotWidget, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPrinterMark.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPrinterMark, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.6m && APM_AnnotWatermark.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_AnnotWatermark, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.6m && APM_Annot3D.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_Annot3D, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.7m && APM_AnnotRedact.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_AnnotRedact, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_AnnotProjection.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_AnnotProjection, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_AnnotRichMedia.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_AnnotRichMedia, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotFileAttachment_IRT>("IRT did not match any allowable types: '[AnnotText,AnnotLink,AnnotFreeText,AnnotLine,AnnotSquare,AnnotCircle,AnnotPolygon,AnnotHighlight,AnnotUnderline,AnnotSquiggly,AnnotStrikeOut,AnnotCaret,AnnotStamp,AnnotInk,AnnotPopup,AnnotFileAttachment,AnnotSound,AnnotMovie,AnnotScreen,AnnotWidget,AnnotPrinterMark,fn:SinceVersion(1.6,AnnotWatermark),fn:SinceVersion(1.6,Annot3D),fn:SinceVersion(1.7,AnnotRedact),fn:SinceVersion(2.0,AnnotProjection),fn:SinceVersion(2.0,AnnotRichMedia)]'");
        }
        
    }


}

/// <summary>
/// AnnotFileAttachment_Subj 
/// </summary>
internal partial class APM_AnnotFileAttachment_Subj : APM_AnnotFileAttachment_Subj__Base
{
}


internal partial class APM_AnnotFileAttachment_Subj__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_Subj";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotFileAttachment_Subj>(obj, "Subj", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_RT 
/// </summary>
internal partial class APM_AnnotFileAttachment_RT : APM_AnnotFileAttachment_RT__Base
{
}


internal partial class APM_AnnotFileAttachment_RT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_RT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotFileAttachment_RT>(obj, "RT", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        
        
        if (!(val == PdfName.R || val == PdfName.Group)) 
        {
            ctx.Fail<APM_AnnotFileAttachment_RT>($"Invalid value {val}, allowed are: [R,Group]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_IT 
/// </summary>
internal partial class APM_AnnotFileAttachment_IT : APM_AnnotFileAttachment_IT__Base
{
}


internal partial class APM_AnnotFileAttachment_IT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_IT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotFileAttachment_IT>(obj, "IT", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_FS 
/// </summary>
internal partial class APM_AnnotFileAttachment_FS : APM_AnnotFileAttachment_FS__Base
{
}


internal partial class APM_AnnotFileAttachment_FS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_FS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotFileAttachment_FS>(obj, "FS", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_AnnotFileAttachment_FS>("FS is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotFileAttachment_FS>("FS is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotFileAttachment_Name 
/// </summary>
internal partial class APM_AnnotFileAttachment_Name : APM_AnnotFileAttachment_Name__Base
{
}


internal partial class APM_AnnotFileAttachment_Name__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotFileAttachment_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotFileAttachment_ExData 2D markup annots only 
/// </summary>
internal partial class APM_AnnotFileAttachment_ExData : APM_AnnotFileAttachment_ExData__Base
{
}


internal partial class APM_AnnotFileAttachment_ExData__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotFileAttachment_ExData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotFileAttachment_ExData>(obj, "ExData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_ExData3DMarkup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ExData3DMarkup, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version == 1.7m && (ctx.Extensions.Contains(PdfName.ADBE_Extn3) && APM_ExDataMarkupGeo.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ExDataMarkupGeo, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_ExDataMarkupGeo.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ExDataMarkupGeo, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_ExDataProjection.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ExDataProjection, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotFileAttachment_ExData>("ExData did not match any allowable types: '[ExData3DMarkup,fn:IsPDFVersion(1.7,fn:Extension(ADBE_Extn3,ExDataMarkupGeo)),fn:SinceVersion(2.0,ExDataMarkupGeo),fn:SinceVersion(2.0,ExDataProjection)]'");
        }
        
    }


}

