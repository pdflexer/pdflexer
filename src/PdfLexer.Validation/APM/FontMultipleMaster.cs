// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_FontMultipleMaster : APM_FontMultipleMaster_Base
{
}

internal partial class APM_FontMultipleMaster_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "FontMultipleMaster";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_FontMultipleMaster_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontMultipleMaster_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontMultipleMaster_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontMultipleMaster_BaseFont, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontMultipleMaster_FirstChar, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontMultipleMaster_LastChar, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontMultipleMaster_Widths, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontMultipleMaster_FontDescriptor, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontMultipleMaster_Encoding, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontMultipleMaster_ToUnicode, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.0");
                }
                break;
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_FontMultipleMaster>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_FontMultipleMaster_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_10 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding"
    };
    public static HashSet<string> AllowedFields_11 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding"
    };
    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Name", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "FirstChar", "LastChar", "Widths", "FontDescriptor", "Encoding", "ToUnicode"
    };
    


}

/// <summary>
/// FontMultipleMaster_Type Table 109 and Clause 9.6.2.3
/// </summary>
internal partial class APM_FontMultipleMaster_Type : APM_FontMultipleMaster_Type_Base
{
}


internal partial class APM_FontMultipleMaster_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_FontMultipleMaster_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Font")) 
        {
            ctx.Fail<APM_FontMultipleMaster_Type>($"Invalid value {val}, allowed are: [Font]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// FontMultipleMaster_Subtype 
/// </summary>
internal partial class APM_FontMultipleMaster_Subtype : APM_FontMultipleMaster_Subtype_Base
{
}


internal partial class APM_FontMultipleMaster_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_FontMultipleMaster_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "MMType1")) 
        {
            ctx.Fail<APM_FontMultipleMaster_Subtype>($"Invalid value {val}, allowed are: [MMType1]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// FontMultipleMaster_Name 
/// </summary>
internal partial class APM_FontMultipleMaster_Name : APM_FontMultipleMaster_Name_Base
{
}


internal partial class APM_FontMultipleMaster_Name_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfName? val;
        {
            
            if ((ctx.Version == 1.0m)) {
                val = ctx.GetRequired<PdfName, APM_FontMultipleMaster_Name>(obj, "Name", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfName, APM_FontMultipleMaster_Name>(obj, "Name", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// FontMultipleMaster_BaseFont 
/// </summary>
internal partial class APM_FontMultipleMaster_BaseFont : APM_FontMultipleMaster_BaseFont_Base
{
}


internal partial class APM_FontMultipleMaster_BaseFont_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_BaseFont";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_FontMultipleMaster_BaseFont>(obj, "BaseFont", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// FontMultipleMaster_FirstChar 
/// </summary>
internal partial class APM_FontMultipleMaster_FirstChar : APM_FontMultipleMaster_FirstChar_Base
{
}


internal partial class APM_FontMultipleMaster_FirstChar_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_FirstChar";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfIntNumber? val;
        {
            
            if ((ctx.Version >= 2.0m||NotStandard14Font(obj))) {
                val = ctx.GetRequired<PdfIntNumber, APM_FontMultipleMaster_FirstChar>(obj, "FirstChar", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfIntNumber, APM_FontMultipleMaster_FirstChar>(obj, "FirstChar", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// FontMultipleMaster_LastChar 
/// </summary>
internal partial class APM_FontMultipleMaster_LastChar : APM_FontMultipleMaster_LastChar_Base
{
}


internal partial class APM_FontMultipleMaster_LastChar_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_LastChar";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfIntNumber? val;
        {
            
            if ((ctx.Version >= 2.0m||NotStandard14Font(obj))) {
                val = ctx.GetRequired<PdfIntNumber, APM_FontMultipleMaster_LastChar>(obj, "LastChar", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfIntNumber, APM_FontMultipleMaster_LastChar>(obj, "LastChar", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// FontMultipleMaster_Widths 
/// </summary>
internal partial class APM_FontMultipleMaster_Widths : APM_FontMultipleMaster_Widths_Base
{
}


internal partial class APM_FontMultipleMaster_Widths_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_Widths";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfArray? val;
        {
            
            if ((ctx.Version >= 2.0m||NotStandard14Font(obj))) {
                val = ctx.GetRequired<PdfArray, APM_FontMultipleMaster_Widths>(obj, "Widths", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfArray, APM_FontMultipleMaster_Widths>(obj, "Widths", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FontMultipleMaster_FontDescriptor 
/// </summary>
internal partial class APM_FontMultipleMaster_FontDescriptor : APM_FontMultipleMaster_FontDescriptor_Base
{
}


internal partial class APM_FontMultipleMaster_FontDescriptor_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_FontDescriptor";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfDictionary? val;
        {
            
            if ((ctx.Version >= 2.0m||NotStandard14Font(obj))) {
                val = ctx.GetRequired<PdfDictionary, APM_FontMultipleMaster_FontDescriptor>(obj, "FontDescriptor", IndirectRequirement.MustBeIndirect);
            } else {
                val = ctx.GetOptional<PdfDictionary, APM_FontMultipleMaster_FontDescriptor>(obj, "FontDescriptor", IndirectRequirement.MustBeIndirect);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_FontDescriptorType1, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// FontMultipleMaster_Encoding 
/// </summary>
internal partial class APM_FontMultipleMaster_Encoding : APM_FontMultipleMaster_Encoding_Base
{
}


internal partial class APM_FontMultipleMaster_Encoding_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_Encoding";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_FontMultipleMaster_Encoding>(obj, "Encoding", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_Encoding, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "MacRomanEncoding" || val == "MacExpertEncoding" || val == "WinAnsiEncoding")) 
                    {
                        ctx.Fail<APM_FontMultipleMaster_Encoding>($"Invalid value {val}, allowed are: [MacRomanEncoding,MacExpertEncoding,WinAnsiEncoding]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_FontMultipleMaster_Encoding>("Encoding is required to one of 'dictionary;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// FontMultipleMaster_ToUnicode 
/// </summary>
internal partial class APM_FontMultipleMaster_ToUnicode : APM_FontMultipleMaster_ToUnicode_Base
{
}


internal partial class APM_FontMultipleMaster_ToUnicode_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontMultipleMaster_ToUnicode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_FontMultipleMaster_ToUnicode>(obj, "ToUnicode", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

