// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_SignatureBuildDataSigQDict : APM_SignatureBuildDataSigQDict__Base
{
}

internal partial class APM_SignatureBuildDataSigQDict__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "SignatureBuildDataSigQDict";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_SignatureBuildDataSigQDict_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataSigQDict_Date, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataSigQDict_R, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataSigQDict_PreRelease, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataSigQDict_OS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataSigQDict_NonEFontNoWarn, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataSigQDict_TrustedMode, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataSigQDict_V, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildDataSigQDict_Preview, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataSigQDict>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataSigQDict>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataSigQDict>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataSigQDict>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataSigQDict>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildDataSigQDict>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "V"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "V"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "Preview"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "Preview"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "Preview"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Name", "Date", "R", "PreRelease", "OS", "NonEFontNoWarn", "TrustedMode", "Preview"
    };
    


}

/// <summary>
/// SignatureBuildDataSigQDict_Name Adobe "Digital Signature Build Dictionary Specification" Table 2 and Table 4
/// </summary>
internal partial class APM_SignatureBuildDataSigQDict_Name : APM_SignatureBuildDataSigQDict_Name__Base
{
}


internal partial class APM_SignatureBuildDataSigQDict_Name__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataSigQDict_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_SignatureBuildDataSigQDict_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataSigQDict_Date 
/// </summary>
internal partial class APM_SignatureBuildDataSigQDict_Date : APM_SignatureBuildDataSigQDict_Date__Base
{
}


internal partial class APM_SignatureBuildDataSigQDict_Date__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataSigQDict_Date";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_SignatureBuildDataSigQDict_Date>(obj, "Date", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataSigQDict_R 
/// </summary>
internal partial class APM_SignatureBuildDataSigQDict_R : APM_SignatureBuildDataSigQDict_R__Base
{
}


internal partial class APM_SignatureBuildDataSigQDict_R__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataSigQDict_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_SignatureBuildDataSigQDict_R>(obj, "R", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataSigQDict_PreRelease 
/// </summary>
internal partial class APM_SignatureBuildDataSigQDict_PreRelease : APM_SignatureBuildDataSigQDict_PreRelease__Base
{
}


internal partial class APM_SignatureBuildDataSigQDict_PreRelease__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataSigQDict_PreRelease";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_SignatureBuildDataSigQDict_PreRelease>(obj, "PreRelease", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataSigQDict_OS 
/// </summary>
internal partial class APM_SignatureBuildDataSigQDict_OS : APM_SignatureBuildDataSigQDict_OS__Base
{
}


internal partial class APM_SignatureBuildDataSigQDict_OS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataSigQDict_OS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_SignatureBuildDataSigQDict_OS>(obj, "OS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsText, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// SignatureBuildDataSigQDict_NonEFontNoWarn 
/// </summary>
internal partial class APM_SignatureBuildDataSigQDict_NonEFontNoWarn : APM_SignatureBuildDataSigQDict_NonEFontNoWarn__Base
{
}


internal partial class APM_SignatureBuildDataSigQDict_NonEFontNoWarn__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataSigQDict_NonEFontNoWarn";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_SignatureBuildDataSigQDict_NonEFontNoWarn>(obj, "NonEFontNoWarn", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataSigQDict_TrustedMode 
/// </summary>
internal partial class APM_SignatureBuildDataSigQDict_TrustedMode : APM_SignatureBuildDataSigQDict_TrustedMode__Base
{
}


internal partial class APM_SignatureBuildDataSigQDict_TrustedMode__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataSigQDict_TrustedMode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_SignatureBuildDataSigQDict_TrustedMode>(obj, "TrustedMode", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataSigQDict_V 
/// </summary>
internal partial class APM_SignatureBuildDataSigQDict_V : APM_SignatureBuildDataSigQDict_V__Base
{
}


internal partial class APM_SignatureBuildDataSigQDict_V__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataSigQDict_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_SignatureBuildDataSigQDict_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SignatureBuildDataSigQDict_Preview 
/// </summary>
internal partial class APM_SignatureBuildDataSigQDict_Preview : APM_SignatureBuildDataSigQDict_Preview__Base
{
}


internal partial class APM_SignatureBuildDataSigQDict_Preview__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildDataSigQDict_Preview";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_SignatureBuildDataSigQDict_Preview>(obj, "Preview", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

