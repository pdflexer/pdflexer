// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfQuadPoints : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfQuadPoints";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfQuadPoints_0x, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOfQuadPoints_1x, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOfQuadPoints_2x, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOfQuadPoints_3x, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOfQuadPoints_4x, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOfQuadPoints_5x, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOfQuadPoints_6x, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOfQuadPoints_7x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// ArrayOfQuadPoints_0* Table 176 and Table 182 and Table 195
/// </summary>
internal partial class APM_ArrayOfQuadPoints_0x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfQuadPoints_0*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=8) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetRequired<PdfNumber, APM_ArrayOfQuadPoints_0x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            // no linked objects
            
        }
    }
}

/// <summary>
/// ArrayOfQuadPoints_1* 
/// </summary>
internal partial class APM_ArrayOfQuadPoints_1x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfQuadPoints_1*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 1; i<obj.Count; i+=8) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetRequired<PdfNumber, APM_ArrayOfQuadPoints_1x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            // no linked objects
            
        }
    }
}

/// <summary>
/// ArrayOfQuadPoints_2* 
/// </summary>
internal partial class APM_ArrayOfQuadPoints_2x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfQuadPoints_2*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 2; i<obj.Count; i+=8) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetRequired<PdfNumber, APM_ArrayOfQuadPoints_2x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            // no linked objects
            
        }
    }
}

/// <summary>
/// ArrayOfQuadPoints_3* 
/// </summary>
internal partial class APM_ArrayOfQuadPoints_3x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfQuadPoints_3*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 3; i<obj.Count; i+=8) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetRequired<PdfNumber, APM_ArrayOfQuadPoints_3x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            // no linked objects
            
        }
    }
}

/// <summary>
/// ArrayOfQuadPoints_4* 
/// </summary>
internal partial class APM_ArrayOfQuadPoints_4x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfQuadPoints_4*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 4; i<obj.Count; i+=8) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetRequired<PdfNumber, APM_ArrayOfQuadPoints_4x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            // no linked objects
            
        }
    }
}

/// <summary>
/// ArrayOfQuadPoints_5* 
/// </summary>
internal partial class APM_ArrayOfQuadPoints_5x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfQuadPoints_5*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 5; i<obj.Count; i+=8) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetRequired<PdfNumber, APM_ArrayOfQuadPoints_5x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            // no linked objects
            
        }
    }
}

/// <summary>
/// ArrayOfQuadPoints_6* 
/// </summary>
internal partial class APM_ArrayOfQuadPoints_6x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfQuadPoints_6*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 6; i<obj.Count; i+=8) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetRequired<PdfNumber, APM_ArrayOfQuadPoints_6x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            // no linked objects
            
        }
    }
}

/// <summary>
/// ArrayOfQuadPoints_7* 
/// </summary>
internal partial class APM_ArrayOfQuadPoints_7x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfQuadPoints_7*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 7; i<obj.Count; i+=8) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetRequired<PdfNumber, APM_ArrayOfQuadPoints_7x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            // no linked objects
            
        }
    }
}

