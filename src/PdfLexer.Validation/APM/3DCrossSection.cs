// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_3DCrossSection : APM_3DCrossSection__Base
{
}

internal partial class APM_3DCrossSection__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "3DCrossSection";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_3DCrossSection_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DCrossSection_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DCrossSection_O, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DCrossSection_PO, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DCrossSection_PC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DCrossSection_IV, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DCrossSection_PV, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DCrossSection_IC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DCrossSection_ST, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DCrossSection_SC, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_3DCrossSection>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_3DCrossSection>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_3DCrossSection>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_3DCrossSection>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_3DCrossSection_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "C", "O", "PO", "PC", "IV", "PV", "IC"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "C", "O", "PO", "PC", "IV", "PV", "IC"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "C", "O", "PO", "PC", "IV", "PV", "IC"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "C", "O", "PO", "PC", "IV", "PV", "IC", "ST", "SC"
    };
    


}

/// <summary>
/// 3DCrossSection_Type Table 322
/// </summary>
internal partial class APM_3DCrossSection_Type : APM_3DCrossSection_Type__Base
{
}


internal partial class APM_3DCrossSection_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_3DCrossSection_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.N3DCrossSection)) 
        {
            ctx.Fail<APM_3DCrossSection_Type>($"Invalid value {val}, allowed are: [3DCrossSection]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DCrossSection_C 
/// </summary>
internal partial class APM_3DCrossSection_C : APM_3DCrossSection_C__Base
{
}


internal partial class APM_3DCrossSection_C__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_3DCrossSection_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3CenterOfRotationNumbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DCrossSection_O 
/// </summary>
internal partial class APM_3DCrossSection_O : APM_3DCrossSection_O__Base
{
}


internal partial class APM_3DCrossSection_O__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_O";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_3DCrossSection_O>(obj, "O", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3OrientationNumbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DCrossSection_PO 
/// </summary>
internal partial class APM_3DCrossSection_PO : APM_3DCrossSection_PO__Base
{
}


internal partial class APM_3DCrossSection_PO__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_PO";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_3DCrossSection_PO>(obj, "PO", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var PO = obj.Get("PO");
        if (!((gte(PO,0)&&lte(PO,1)))) 
        {
            ctx.Fail<APM_3DCrossSection_PO>($"Invalid value {val}, allowed are: [fn:Eval((@PO>=0) && (@PO<=1))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DCrossSection_PC 
/// </summary>
internal partial class APM_3DCrossSection_PC : APM_3DCrossSection_PC__Base
{
}


internal partial class APM_3DCrossSection_PC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_PC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_3DCrossSection_PC>(obj, "PC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4ColourSpaceEntries, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DCrossSection_IV 
/// </summary>
internal partial class APM_3DCrossSection_IV : APM_3DCrossSection_IV__Base
{
}


internal partial class APM_3DCrossSection_IV__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_IV";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_3DCrossSection_IV>(obj, "IV", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DCrossSection_PV See https://github.com/pdf-association/pdf-issues/issues/49
/// </summary>
internal partial class APM_3DCrossSection_PV : APM_3DCrossSection_PV__Base
{
}


internal partial class APM_3DCrossSection_PV__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_PV";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_3DCrossSection_PV>(obj, "PV", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DCrossSection_IC 
/// </summary>
internal partial class APM_3DCrossSection_IC : APM_3DCrossSection_IC__Base
{
}


internal partial class APM_3DCrossSection_IC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_IC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_3DCrossSection_IC>(obj, "IC", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        // no value restrictions
        ctx.Run<APM_ArrayOf_4ColourSpaceEntries, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DCrossSection_ST 
/// </summary>
internal partial class APM_3DCrossSection_ST : APM_3DCrossSection_ST__Base
{
}


internal partial class APM_3DCrossSection_ST__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_ST";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_3DCrossSection_ST>(obj, "ST", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DCrossSection_SC 
/// </summary>
internal partial class APM_3DCrossSection_SC : APM_3DCrossSection_SC__Base
{
}


internal partial class APM_3DCrossSection_SC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DCrossSection_SC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_3DCrossSection_SC>(obj, "SC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

