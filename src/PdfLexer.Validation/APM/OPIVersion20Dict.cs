// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_OPIVersion20Dict : APM_OPIVersion20Dict__Base
{
}

internal partial class APM_OPIVersion20Dict__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "OPIVersion20Dict";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_OPIVersion20Dict_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_Version, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_MainImage, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_Tags, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_Size, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_CropRect, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_Overprint, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_Inks, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_IncludedImageDimensions, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OPIVersion20Dict_IncludedImageQuality, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_OPIVersion20Dict>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_OPIVersion20Dict>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_OPIVersion20Dict>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_OPIVersion20Dict>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_OPIVersion20Dict>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_OPIVersion20Dict>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_OPIVersion20Dict>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_OPIVersion20Dict>($"Unknown field {extra} for version 1.9");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_OPIVersion20Dict_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Version", "F", "MainImage", "Tags", "Size", "CropRect", "Overprint", "Inks", "IncludedImageDimensions", "IncludedImageQuality"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Version", "F", "MainImage", "Tags", "Size", "CropRect", "Overprint", "Inks", "IncludedImageDimensions", "IncludedImageQuality"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Version", "F", "MainImage", "Tags", "Size", "CropRect", "Overprint", "Inks", "IncludedImageDimensions", "IncludedImageQuality"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Version", "F", "MainImage", "Tags", "Size", "CropRect", "Overprint", "Inks", "IncludedImageDimensions", "IncludedImageQuality"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Version", "F", "MainImage", "Tags", "Size", "CropRect", "Overprint", "Inks", "IncludedImageDimensions", "IncludedImageQuality"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Version", "F", "MainImage", "Tags", "Size", "CropRect", "Overprint", "Inks", "IncludedImageDimensions", "IncludedImageQuality"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Version", "F", "MainImage", "Tags", "Size", "CropRect", "Overprint", "Inks", "IncludedImageDimensions", "IncludedImageQuality"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Version", "F", "MainImage", "Tags", "Size", "CropRect", "Overprint", "Inks", "IncludedImageDimensions", "IncludedImageQuality"
    };
    


}

/// <summary>
/// OPIVersion20Dict_Type Table 407
/// </summary>
internal partial class APM_OPIVersion20Dict_Type : APM_OPIVersion20Dict_Type__Base
{
}


internal partial class APM_OPIVersion20Dict_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_OPIVersion20Dict_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.OPI)) 
        {
            ctx.Fail<APM_OPIVersion20Dict_Type>($"Invalid value {val}, allowed are: [OPI]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// OPIVersion20Dict_Version 
/// </summary>
internal partial class APM_OPIVersion20Dict_Version : APM_OPIVersion20Dict_Version__Base
{
}


internal partial class APM_OPIVersion20Dict_Version__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_Version";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_OPIVersion20Dict_Version>(obj, "Version", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 2.0m)) 
        {
            ctx.Fail<APM_OPIVersion20Dict_Version>($"Invalid value {val}, allowed are: [2.0]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// OPIVersion20Dict_F 
/// </summary>
internal partial class APM_OPIVersion20Dict_F : APM_OPIVersion20Dict_F__Base
{
}


internal partial class APM_OPIVersion20Dict_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_OPIVersion20Dict_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_OPIVersion20Dict_F>("F is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_OPIVersion20Dict_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// OPIVersion20Dict_MainImage 
/// </summary>
internal partial class APM_OPIVersion20Dict_MainImage : APM_OPIVersion20Dict_MainImage__Base
{
}


internal partial class APM_OPIVersion20Dict_MainImage__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_MainImage";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_OPIVersion20Dict_MainImage>(obj, "MainImage", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OPIVersion20Dict_Tags 
/// </summary>
internal partial class APM_OPIVersion20Dict_Tags : APM_OPIVersion20Dict_Tags__Base
{
}


internal partial class APM_OPIVersion20Dict_Tags__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_Tags";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_OPIVersion20Dict_Tags>(obj, "Tags", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfTags, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// OPIVersion20Dict_Size 
/// </summary>
internal partial class APM_OPIVersion20Dict_Size : APM_OPIVersion20Dict_Size__Base
{
}


internal partial class APM_OPIVersion20Dict_Size__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_Size";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var val = ctx.GetOptional<PdfArray, APM_OPIVersion20Dict_Size>(obj, "Size", IndirectRequirement.Either);
        if ((obj.ContainsKey(PdfName.CropRect)) && val == null) {
            ctx.Fail<APM_OPIVersion20Dict_Size>("Size is required when 'fn:IsRequired(fn:IsPresent(CropRect))"); return;
        } else if (val == null) {
            return;
        }
        var Size0 = val.Get(0);
        var Size1 = val.Get(1);
        if (!((gt(Size0,0)&&gt(Size1,0)))) 
        {
            ctx.Fail<APM_OPIVersion20Dict_Size>($"Value failed special case check: fn:Eval((Size::@0>0) && (Size::@1>0))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOf_2Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// OPIVersion20Dict_CropRect 
/// </summary>
internal partial class APM_OPIVersion20Dict_CropRect : APM_OPIVersion20Dict_CropRect__Base
{
}


internal partial class APM_OPIVersion20Dict_CropRect__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_CropRect";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var val = ctx.GetOptional<PdfArray, APM_OPIVersion20Dict_CropRect>(obj, "CropRect", IndirectRequirement.Either);
        if ((obj.ContainsKey(val)) && val == null) {
            ctx.Fail<APM_OPIVersion20Dict_CropRect>("CropRect is required when 'fn:IsRequired(fn:IsPresent(Size))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OPIVersion20Dict_Overprint 
/// </summary>
internal partial class APM_OPIVersion20Dict_Overprint : APM_OPIVersion20Dict_Overprint__Base
{
}


internal partial class APM_OPIVersion20Dict_Overprint__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_Overprint";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_OPIVersion20Dict_Overprint>(obj, "Overprint", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OPIVersion20Dict_Inks 
/// </summary>
internal partial class APM_OPIVersion20Dict_Inks : APM_OPIVersion20Dict_Inks__Base
{
}


internal partial class APM_OPIVersion20Dict_Inks__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_Inks";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_OPIVersion20Dict_Inks>(obj, "Inks", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfOPI2Inks, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == PdfName.full_color || val == PdfName.registration)) 
                    {
                        ctx.Fail<APM_OPIVersion20Dict_Inks>($"Invalid value {val}, allowed are: [full_color,registration]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_OPIVersion20Dict_Inks>("Inks is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// OPIVersion20Dict_IncludedImageDimensions 
/// </summary>
internal partial class APM_OPIVersion20Dict_IncludedImageDimensions : APM_OPIVersion20Dict_IncludedImageDimensions__Base
{
}


internal partial class APM_OPIVersion20Dict_IncludedImageDimensions__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_IncludedImageDimensions";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_OPIVersion20Dict_IncludedImageDimensions>(obj, "IncludedImageDimensions", IndirectRequirement.Either);
        if (val == null) { return; }
        var IncludedImageDimensions0 = val.Get(0);
        var IncludedImageDimensions1 = val.Get(1);
        if (!((gt(IncludedImageDimensions0,0)&&gt(IncludedImageDimensions1,0)))) 
        {
            ctx.Fail<APM_OPIVersion20Dict_IncludedImageDimensions>($"Value failed special case check: fn:Eval((IncludedImageDimensions::@0>0) && (IncludedImageDimensions::@1>0))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOf_2Integers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// OPIVersion20Dict_IncludedImageQuality 
/// </summary>
internal partial class APM_OPIVersion20Dict_IncludedImageQuality : APM_OPIVersion20Dict_IncludedImageQuality__Base
{
}


internal partial class APM_OPIVersion20Dict_IncludedImageQuality__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OPIVersion20Dict_IncludedImageQuality";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_OPIVersion20Dict_IncludedImageQuality>(obj, "IncludedImageQuality", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 1m || val == 2m || val == 3m)) 
        {
            ctx.Fail<APM_OPIVersion20Dict_IncludedImageQuality>($"Invalid value {val}, allowed are: [1,2,3]");
        }
        // no linked objects
        
    }


}

