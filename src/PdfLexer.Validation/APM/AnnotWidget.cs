// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AnnotWidget : APM_AnnotWidget__Base
{
}

internal partial class APM_AnnotWidget__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AnnotWidget";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AnnotWidget_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_Rect, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_Contents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_NM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_M, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_AP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_AS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_Border, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_ca, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_CA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_BM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_Lang, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_H, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_MK, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_A, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_AA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_BS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_Parent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_Kids, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_T, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_TU, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_TM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_Ff, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotWidget_PMD, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_AnnotWidget>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_AnnotWidget>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_AnnotWidget>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_AnnotWidget>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_AnnotWidget>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_AnnotWidget>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_AnnotWidget>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_AnnotWidget>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_AnnotWidget>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_AnnotWidget_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "M", "F", "AP", "AS", "Border", "C", "H", "MK", "A", "AA", "BS", "Parent", "Kids", "T", "Ff"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "M", "F", "AP", "AS", "Border", "C", "StructParent", "H", "MK", "A", "AA", "BS", "Parent", "Kids", "T", "TU", "TM", "Ff"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "H", "MK", "A", "AA", "BS", "Parent", "Kids", "T", "TU", "TM", "Ff"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "H", "MK", "A", "AA", "BS", "Parent", "Kids", "T", "TU", "TM", "Ff"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "H", "MK", "A", "AA", "BS", "Parent", "Kids", "T", "TU", "TM", "Ff"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "H", "MK", "A", "AA", "BS", "Parent", "Kids", "T", "TU", "TM", "Ff"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "H", "MK", "A", "AA", "BS", "Parent", "Kids", "T", "TU", "TM", "Ff"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "H", "MK", "A", "AA", "BS", "Parent", "Kids", "T", "TU", "TM", "Ff"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "AF", "ca", "CA", "BM", "Lang", "H", "MK", "A", "AA", "BS", "Parent", "Kids", "T", "TU", "TM", "Ff"
    };
    


}

/// <summary>
/// AnnotWidget_Type Table 166 and Table 191 and Table 226 (NOT markup annot)
/// </summary>
internal partial class APM_AnnotWidget_Type : APM_AnnotWidget_Type__Base
{
}


internal partial class APM_AnnotWidget_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotWidget_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Annot")) 
        {
            ctx.Fail<APM_AnnotWidget_Type>($"Invalid value {val}, allowed are: [Annot]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_Subtype 
/// </summary>
internal partial class APM_AnnotWidget_Subtype : APM_AnnotWidget_Subtype__Base
{
}


internal partial class APM_AnnotWidget_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_AnnotWidget_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Widget")) 
        {
            ctx.Fail<APM_AnnotWidget_Subtype>($"Invalid value {val}, allowed are: [Widget]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_Rect 
/// </summary>
internal partial class APM_AnnotWidget_Rect : APM_AnnotWidget_Rect__Base
{
}


internal partial class APM_AnnotWidget_Rect__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_Rect";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_AnnotWidget_Rect>(obj, "Rect", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_Contents 
/// </summary>
internal partial class APM_AnnotWidget_Contents : APM_AnnotWidget_Contents__Base
{
}


internal partial class APM_AnnotWidget_Contents__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_Contents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotWidget_Contents>(obj, "Contents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_P 
/// </summary>
internal partial class APM_AnnotWidget_P : APM_AnnotWidget_P__Base
{
}


internal partial class APM_AnnotWidget_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotWidget_P>(obj, "P", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PageObject, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotWidget_NM 
/// </summary>
internal partial class APM_AnnotWidget_NM : APM_AnnotWidget_NM__Base
{
}


internal partial class APM_AnnotWidget_NM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_NM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotWidget_NM>(obj, "NM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_M 
/// </summary>
internal partial class APM_AnnotWidget_M : APM_AnnotWidget_M__Base
{
}


internal partial class APM_AnnotWidget_M__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotWidget_M>(obj, "M", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            
            // TODO MC date;string-text
            
            default:
                ctx.Fail<APM_AnnotWidget_M>("M is required to one of 'date;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotWidget_F Table 167
/// </summary>
internal partial class APM_AnnotWidget_F : APM_AnnotWidget_F__Base
{
}


internal partial class APM_AnnotWidget_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotWidget_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(ctx.Version < 1.3m && BitsClear(obj)&&ctx.Version < 1.4m && BitsClear(obj)&&ctx.Version < 1.5m && BitsClear(obj)&&ctx.Version < 1.6m && BitsClear(obj)&&(ctx.Version < 1.7m || (ctx.Version >= 1.7m && BitsClear(obj))))) 
        {
            ctx.Fail<APM_AnnotWidget_F>($"Value failed special case check: fn:Eval(fn:BeforeVersion(1.3,fn:BitsClear(4,32)) && fn:BeforeVersion(1.4,fn:BitsClear(8,32)) && fn:BeforeVersion(1.5,fn:BitsClear(9,32)) && fn:BeforeVersion(1.6,fn:BitsClear(10,32)) && fn:SinceVersion(1.7,fn:BitsClear(11,32)))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_AP 
/// </summary>
internal partial class APM_AnnotWidget_AP : APM_AnnotWidget_AP__Base
{
}


internal partial class APM_AnnotWidget_AP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_AP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var Rect = obj.Get("Rect");
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotWidget_AP>(obj, "AP", IndirectRequirement.Either);
        if (((ctx.Version < 2.0m || (ctx.Version >= 2.0m && (gt(RectWidth(obj),0)||gt(RectHeight(Rect),0))))) && val == null) {
            ctx.Fail<APM_AnnotWidget_AP>("AP is required when 'fn:IsRequired(fn:SinceVersion(2.0,(fn:RectWidth(Rect)>0) || (fn:RectHeight(Rect)>0)))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Appearance, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotWidget_AS 
/// </summary>
internal partial class APM_AnnotWidget_AS : APM_AnnotWidget_AS__Base
{
}


internal partial class APM_AnnotWidget_AS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_AS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var APN = obj.Get("AP")?.Get("N");
        var APR = obj.Get("AP")?.Get("R");
        var APD = obj.Get("AP")?.Get("D");
        var val = ctx.GetOptional<PdfName, APM_AnnotWidget_AS>(obj, "AS", IndirectRequirement.Either);
        if (((APN != null)||(APR != null)||(APD != null)) && val == null) {
            ctx.Fail<APM_AnnotWidget_AS>("AS is required when 'fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_Border 
/// </summary>
internal partial class APM_AnnotWidget_Border : APM_AnnotWidget_Border__Base
{
}


internal partial class APM_AnnotWidget_Border__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_Border";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotWidget_Border>(obj, "Border", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        ctx.Run<APM_ArrayOf_4AnnotBorderCharacteristics, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotWidget_C 
/// </summary>
internal partial class APM_AnnotWidget_C : APM_AnnotWidget_C__Base
{
}


internal partial class APM_AnnotWidget_C__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotWidget_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4NumbersColorAnnotation, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotWidget_StructParent Table 359
/// </summary>
internal partial class APM_AnnotWidget_StructParent : APM_AnnotWidget_StructParent__Base
{
}


internal partial class APM_AnnotWidget_StructParent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotWidget_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_OC 
/// </summary>
internal partial class APM_AnnotWidget_OC : APM_AnnotWidget_OC__Base
{
}


internal partial class APM_AnnotWidget_OC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotWidget_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotWidget_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// AnnotWidget_AF 
/// </summary>
internal partial class APM_AnnotWidget_AF : APM_AnnotWidget_AF__Base
{
}


internal partial class APM_AnnotWidget_AF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotWidget_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotWidget_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotWidget_ca 
/// </summary>
internal partial class APM_AnnotWidget_ca : APM_AnnotWidget_ca__Base
{
}


internal partial class APM_AnnotWidget_ca__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_ca";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotWidget_ca>(obj, "ca", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var ca = obj.Get("ca");
        if (!((gte(ca,0.0m)&&lte(ca,1.0m)))) 
        {
            ctx.Fail<APM_AnnotWidget_ca>($"Invalid value {val}, allowed are: [fn:Eval((@ca>=0.0) && (@ca<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_CA 
/// </summary>
internal partial class APM_AnnotWidget_CA : APM_AnnotWidget_CA__Base
{
}


internal partial class APM_AnnotWidget_CA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_CA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotWidget_CA>(obj, "CA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var CA = obj.Get("CA");
        if (!((gte(CA,0.0m)&&lte(CA,1.0m)))) 
        {
            ctx.Fail<APM_AnnotWidget_CA>($"Invalid value {val}, allowed are: [fn:Eval((@CA>=0.0) && (@CA<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_BM Table 134 and Table 135
/// </summary>
internal partial class APM_AnnotWidget_BM : APM_AnnotWidget_BM__Base
{
}


internal partial class APM_AnnotWidget_BM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_BM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotWidget_BM>(obj, "BM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!((ctx.Version <= 1.4m && val == "Compatible") || val == "Normal" || val == "Multiply" || val == "Screen" || val == "Difference" || val == "Darken" || val == "Lighten" || val == "ColorDodge" || val == "ColorBurn" || val == "Exclusion" || val == "HardLight" || val == "Overlay" || val == "SoftLight" || val == "Luminosity" || val == "Hue" || val == "Saturation" || val == "Color")) 
        {
            ctx.Fail<APM_AnnotWidget_BM>($"Invalid value {val}, allowed are: [fn:Deprecated(1.4,Compatible),Normal,Multiply,Screen,Difference,Darken,Lighten,ColorDodge,ColorBurn,Exclusion,HardLight,Overlay,SoftLight,Luminosity,Hue,Saturation,Color]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_Lang 
/// </summary>
internal partial class APM_AnnotWidget_Lang : APM_AnnotWidget_Lang__Base
{
}


internal partial class APM_AnnotWidget_Lang__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_Lang";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotWidget_Lang>(obj, "Lang", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_H 
/// </summary>
internal partial class APM_AnnotWidget_H : APM_AnnotWidget_H__Base
{
}


internal partial class APM_AnnotWidget_H__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_H";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotWidget_H>(obj, "H", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "N" || val == "I" || val == "O" || val == "P" || val == "T")) 
        {
            ctx.Fail<APM_AnnotWidget_H>($"Invalid value {val}, allowed are: [N,I,O,P,T]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_MK 
/// </summary>
internal partial class APM_AnnotWidget_MK : APM_AnnotWidget_MK__Base
{
}


internal partial class APM_AnnotWidget_MK__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_MK";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotWidget_MK>(obj, "MK", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_AppearanceCharacteristics, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotWidget_A 
/// </summary>
internal partial class APM_AnnotWidget_A : APM_AnnotWidget_A__Base
{
}


internal partial class APM_AnnotWidget_A__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotWidget_A>(obj, "A", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_ActionGoTo.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoTo, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionGoToR.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoToR, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionLaunch.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionLaunch, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionThread.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionThread, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionURI.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionURI, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionSound.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionSound, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionMovie.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionMovie, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionHide.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionHide, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionNamed.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionNamed, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionSubmitForm.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionSubmitForm, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionResetForm.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionResetForm, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionImportData.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionImportData, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version < 1.6m || (ctx.Version >= 1.6m && APM_ActionGoToE.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ActionGoToE, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version < 2.0m || (ctx.Version >= 2.0m && APM_ActionGoToDp.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ActionGoToDp, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version == 1.2m && APM_ActionNOP.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionNOP, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version == 1.2m && APM_ActionSetState.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionSetState, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version < 1.5m || (ctx.Version >= 1.5m && APM_ActionSetOCGState.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ActionSetOCGState, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version < 1.5m || (ctx.Version >= 1.5m && APM_ActionRendition.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ActionRendition, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version < 1.5m || (ctx.Version >= 1.5m && APM_ActionTransition.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ActionTransition, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version < 1.6m || (ctx.Version >= 1.6m && APM_ActionGoTo3DView.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ActionGoTo3DView, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version < 1.3m || (ctx.Version >= 1.3m && APM_ActionECMAScript.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version < 2.0m || (ctx.Version >= 2.0m && APM_ActionRichMediaExecute.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ActionRichMediaExecute, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotWidget_A>("A did not match any allowable types: '[ActionGoTo,ActionGoToR,fn:SinceVersion(1.6,ActionGoToE),fn:SinceVersion(2.0,ActionGoToDp),ActionLaunch,fn:IsPDFVersion(1.2,ActionNOP),fn:IsPDFVersion(1.2,ActionSetState),ActionThread,ActionURI,ActionSound,ActionMovie,ActionHide,ActionNamed,ActionSubmitForm,ActionResetForm,ActionImportData,fn:SinceVersion(1.5,ActionSetOCGState),fn:SinceVersion(1.5,ActionRendition),fn:SinceVersion(1.5,ActionTransition),fn:SinceVersion(1.6,ActionGoTo3DView),fn:SinceVersion(1.3,ActionECMAScript),fn:SinceVersion(2.0,ActionRichMediaExecute)]'");
        }
        
    }


}

/// <summary>
/// AnnotWidget_AA 
/// </summary>
internal partial class APM_AnnotWidget_AA : APM_AnnotWidget_AA__Base
{
}


internal partial class APM_AnnotWidget_AA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_AA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotWidget_AA>(obj, "AA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_AddActionWidgetAnnotation, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotWidget_BS 
/// </summary>
internal partial class APM_AnnotWidget_BS : APM_AnnotWidget_BS__Base
{
}


internal partial class APM_AnnotWidget_BS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_BS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotWidget_BS>(obj, "BS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_BorderStyle, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotWidget_Parent 
/// </summary>
internal partial class APM_AnnotWidget_Parent : APM_AnnotWidget_Parent__Base
{
}


internal partial class APM_AnnotWidget_Parent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_Parent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotWidget_Parent>(obj, "Parent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Field, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotWidget_Kids 
/// </summary>
internal partial class APM_AnnotWidget_Kids : APM_AnnotWidget_Kids__Base
{
}


internal partial class APM_AnnotWidget_Kids__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_Kids";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotWidget_Kids>(obj, "Kids", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfFields, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotWidget_T 
/// </summary>
internal partial class APM_AnnotWidget_T : APM_AnnotWidget_T__Base
{
}


internal partial class APM_AnnotWidget_T__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotWidget_T>(obj, "T", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_TU 
/// </summary>
internal partial class APM_AnnotWidget_TU : APM_AnnotWidget_TU__Base
{
}


internal partial class APM_AnnotWidget_TU__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_TU";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotWidget_TU>(obj, "TU", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_TM 
/// </summary>
internal partial class APM_AnnotWidget_TM : APM_AnnotWidget_TM__Base
{
}


internal partial class APM_AnnotWidget_TM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_TM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotWidget_TM>(obj, "TM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_Ff 
/// </summary>
internal partial class APM_AnnotWidget_Ff : APM_AnnotWidget_Ff__Base
{
}


internal partial class APM_AnnotWidget_Ff__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_Ff";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotWidget_Ff>(obj, "Ff", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotWidget_PMD Adobe Extension Level 3 for PaperMetaData
/// </summary>
internal partial class APM_AnnotWidget_PMD : APM_AnnotWidget_PMD__Base
{
}


internal partial class APM_AnnotWidget_PMD__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotWidget_PMD";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotWidget_PMD>(obj, "PMD", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PaperMetaData, PdfDictionary>(stack, val, obj);
        
    }


}

