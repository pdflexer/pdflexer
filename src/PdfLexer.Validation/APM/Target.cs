// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Target : APM_Target_Base
{
}

internal partial class APM_Target_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Target";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Target_R, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Target_N, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Target_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Target_A, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Target_T, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_Target>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_Target>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_Target>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_Target>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_Target>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "R", "N", "P", "A", "T"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "R", "N", "P", "A", "T"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "R", "N", "P", "A", "T"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "R", "N", "P", "A", "T"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "R", "N", "P", "A", "T"
    };
    


}

/// <summary>
/// Target_R Table 205
/// </summary>
internal partial class APM_Target_R : APM_Target_R_Base
{
}


internal partial class APM_Target_R_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Target_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_Target_R>(obj, "R", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "P" || val == "C")) 
        {
            ctx.Fail<APM_Target_R>($"Invalid value {val}, allowed are: [P,C]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// Target_N 
/// </summary>
internal partial class APM_Target_N : APM_Target_N_Base
{
}


internal partial class APM_Target_N_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Target_N";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfString? val;
        {
            var R = obj.Get("R");
            var trailerCatalogNamesEmbeddedFiles = obj.Get("trailer")?.Get("Catalog")?.Get("Names")?.Get("EmbeddedFiles");
            if ((eq(R,"C")&&InNameTree(trailerCatalogNamesEmbeddedFiles))) {
                val = ctx.GetRequired<PdfString, APM_Target_N>(obj, "N", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfString, APM_Target_N>(obj, "N", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// Target_P 
/// </summary>
internal partial class APM_Target_P : APM_Target_P_Base
{
}


internal partial class APM_Target_P_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Target_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Target_P>(obj, "P", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfIntNumber)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    IPdfObject @P = val;
                    if (!((gte(@P,0)&&lt(@P,ctx.NumberOfPages)))) 
                    {
                        ctx.Fail<APM_Target_P>($"Invalid value {val}, allowed are: [fn:Eval((@P>=0) && (@P<fn:NumberOfPages()))]");
                    }
                    }
                    // no linked objects
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // TODO value checks string-byte
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_Target_P>("P is required to one of 'integer;string-byte', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Target_A 
/// </summary>
internal partial class APM_Target_A : APM_Target_A_Base
{
}


internal partial class APM_Target_A_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Target_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Target_A>(obj, "A", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfIntNumber)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    IPdfObject @A = val;
                    if (!((gte(@A,0)&&lt(@A,((obj.Get("P")?.GetAs<PdfDictionary>()?.Get("Annots") as PdfArray)?.Count))))) 
                    {
                        ctx.Fail<APM_Target_A>($"Invalid value {val}, allowed are: [fn:Eval((@A>=0) && (@A<fn:ArrayLength(fn:PageProperty(@P,Annots))))]");
                    }
                    }
                    // no linked objects
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // TODO value checks string-text
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_Target_A>("A is required to one of 'integer;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Target_T 
/// </summary>
internal partial class APM_Target_T : APM_Target_T_Base
{
}


internal partial class APM_Target_T_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Target_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Target_T>(obj, "T", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Target, PdfDictionary>(stack, val, obj);
        
    }


}

