// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Extensions : APM_Extensions__Base
{
}

internal partial class APM_Extensions__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Extensions";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Extensions_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Extensions_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_Extensions_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    


}

/// <summary>
/// Extensions_Type Table 48
/// </summary>
internal partial class APM_Extensions_Type : APM_Extensions_Type__Base
{
}


internal partial class APM_Extensions_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Extensions_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_Extensions_Type>(obj, "Type", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Extensions")) 
        {
            ctx.Fail<APM_Extensions_Type>($"Invalid value {val}, allowed are: [Extensions]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// Extensions_* 
/// </summary>
internal partial class APM_Extensions_CatchAll : APM_Extensions_CatchAll__Base
{
}


internal partial class APM_Extensions_CatchAll__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Extensions_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var (utval, wasIR) = ctx.GetOptional<APM_Extensions_CatchAll>(obj, key, IndirectRequirement.MustBeDirect);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                case PdfObjectType.DictionaryObj:
                    {
                        var val =  (PdfDictionary)utval;
                        if (false && !wasIR) {
                            ctx.Fail<APM_Extensions_CatchAll>("* is required to be indirect when a dictionary");
                            return;
                        }
                        // no special cases
                        // no value restrictions
                        ctx.Run<APM_DevExtensions, PdfDictionary>(stack, val, obj);
                        return;
                    }
                case PdfObjectType.ArrayObj:
                    {
                        if (!(ctx.Version >= 2.0m)) 
                        {
                            ctx.Fail<APM_Extensions_CatchAll>("* was type array but not allowed for current conditions: 'fn:SinceVersion(2.0,array)'");
                        }
                        var val =  (PdfArray)utval;
                        if (false && !wasIR) {
                            ctx.Fail<APM_Extensions_CatchAll>("* is required to be indirect when a array");
                            return;
                        }
                        // no special cases
                        // no value restrictions
                        if ((ctx.Version >= 2.0m && APM_ArrayOfDevExtensions.MatchesType(ctx, val))) 
                        {
                            ctx.Run<APM_ArrayOfDevExtensions, PdfArray>(stack, val, obj);
                        }else 
                        {
                            ctx.Fail<APM_Extensions_CatchAll>("CatchAll did not match any allowable types: '[fn:SinceVersion(2.0,ArrayOfDevExtensions)]'");
                        }
                        return;
                    }
                
                default:
                    ctx.Fail<APM_Extensions_CatchAll>("* is required to one of 'fn:SinceVersion(2.0,array);dictionary', was " + utval.Type);
                    return;
            }
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> { "Type" };
}

