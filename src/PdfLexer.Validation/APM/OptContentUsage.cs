// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_OptContentUsage : APM_OptContentUsage__Base
{
}

internal partial class APM_OptContentUsage__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "OptContentUsage";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_OptContentUsage_CreatorInfo, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentUsage_Language, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentUsage_Export, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentUsage_Zoom, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentUsage_Print, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentUsage_View, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentUsage_User, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentUsage_PageElement, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsage>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsage>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsage>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsage>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsage>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsage>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "CreatorInfo", "Language", "Export", "Zoom", "Print", "View", "User", "PageElement"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "CreatorInfo", "Language", "Export", "Zoom", "Print", "View", "User", "PageElement"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "CreatorInfo", "Language", "Export", "Zoom", "Print", "View", "User", "PageElement"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "CreatorInfo", "Language", "Export", "Zoom", "Print", "View", "User", "PageElement"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "CreatorInfo", "Language", "Export", "Zoom", "Print", "View", "User", "PageElement"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "CreatorInfo", "Language", "Export", "Zoom", "Print", "View", "User", "PageElement"
    };
    


}

/// <summary>
/// OptContentUsage_CreatorInfo Table 100
/// </summary>
internal partial class APM_OptContentUsage_CreatorInfo : APM_OptContentUsage_CreatorInfo__Base
{
}


internal partial class APM_OptContentUsage_CreatorInfo__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsage_CreatorInfo";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OptContentUsage_CreatorInfo>(obj, "CreatorInfo", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentCreatorInfo, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OptContentUsage_Language 
/// </summary>
internal partial class APM_OptContentUsage_Language : APM_OptContentUsage_Language__Base
{
}


internal partial class APM_OptContentUsage_Language__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsage_Language";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OptContentUsage_Language>(obj, "Language", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentLanguage, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OptContentUsage_Export 
/// </summary>
internal partial class APM_OptContentUsage_Export : APM_OptContentUsage_Export__Base
{
}


internal partial class APM_OptContentUsage_Export__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsage_Export";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OptContentUsage_Export>(obj, "Export", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentExport, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OptContentUsage_Zoom 
/// </summary>
internal partial class APM_OptContentUsage_Zoom : APM_OptContentUsage_Zoom__Base
{
}


internal partial class APM_OptContentUsage_Zoom__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsage_Zoom";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OptContentUsage_Zoom>(obj, "Zoom", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentZoom, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OptContentUsage_Print 
/// </summary>
internal partial class APM_OptContentUsage_Print : APM_OptContentUsage_Print__Base
{
}


internal partial class APM_OptContentUsage_Print__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsage_Print";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OptContentUsage_Print>(obj, "Print", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentPrint, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OptContentUsage_View 
/// </summary>
internal partial class APM_OptContentUsage_View : APM_OptContentUsage_View__Base
{
}


internal partial class APM_OptContentUsage_View__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsage_View";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OptContentUsage_View>(obj, "View", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentView, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OptContentUsage_User 
/// </summary>
internal partial class APM_OptContentUsage_User : APM_OptContentUsage_User__Base
{
}


internal partial class APM_OptContentUsage_User__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsage_User";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OptContentUsage_User>(obj, "User", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentUser, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OptContentUsage_PageElement 
/// </summary>
internal partial class APM_OptContentUsage_PageElement : APM_OptContentUsage_PageElement__Base
{
}


internal partial class APM_OptContentUsage_PageElement__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsage_PageElement";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OptContentUsage_PageElement>(obj, "PageElement", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentPageElement, PdfDictionary>(stack, val, obj);
        
    }


}

