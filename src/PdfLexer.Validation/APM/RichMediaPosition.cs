// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_RichMediaPosition : APM_RichMediaPosition__Base
{
}

internal partial class APM_RichMediaPosition__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "RichMediaPosition";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_RichMediaPosition_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaPosition_HAlign, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaPosition_VAlign, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaPosition_HOffset, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaPosition_VOffset, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_RichMediaPosition>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_RichMediaPosition>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_RichMediaPosition>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_RichMediaPosition>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_RichMediaPosition_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "HAlign", "VAlign", "HOffset", "VOffset"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "HAlign", "VAlign", "HOffset", "VOffset"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "HAlign", "VAlign", "HOffset", "VOffset"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "HAlign", "VAlign", "HOffset", "VOffset"
    };
    


}

/// <summary>
/// RichMediaPosition_Type Table 340
/// </summary>
internal partial class APM_RichMediaPosition_Type : APM_RichMediaPosition_Type__Base
{
}


internal partial class APM_RichMediaPosition_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaPosition_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_RichMediaPosition_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.RichMediaPosition)) 
        {
            ctx.Fail<APM_RichMediaPosition_Type>($"Invalid value {val}, allowed are: [RichMediaPosition]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaPosition_HAlign 
/// </summary>
internal partial class APM_RichMediaPosition_HAlign : APM_RichMediaPosition_HAlign__Base
{
}


internal partial class APM_RichMediaPosition_HAlign__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaPosition_HAlign";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_RichMediaPosition_HAlign>(obj, "HAlign", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Near || val == PdfName.Center || val == PdfName.Far)) 
        {
            ctx.Fail<APM_RichMediaPosition_HAlign>($"Invalid value {val}, allowed are: [Near,Center,Far]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaPosition_VAlign 
/// </summary>
internal partial class APM_RichMediaPosition_VAlign : APM_RichMediaPosition_VAlign__Base
{
}


internal partial class APM_RichMediaPosition_VAlign__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaPosition_VAlign";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_RichMediaPosition_VAlign>(obj, "VAlign", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Near || val == PdfName.Center || val == PdfName.Far)) 
        {
            ctx.Fail<APM_RichMediaPosition_VAlign>($"Invalid value {val}, allowed are: [Near,Center,Far]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaPosition_HOffset 
/// </summary>
internal partial class APM_RichMediaPosition_HOffset : APM_RichMediaPosition_HOffset__Base
{
}


internal partial class APM_RichMediaPosition_HOffset__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaPosition_HOffset";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_RichMediaPosition_HOffset>(obj, "HOffset", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaPosition_VOffset 
/// </summary>
internal partial class APM_RichMediaPosition_VOffset : APM_RichMediaPosition_VOffset__Base
{
}


internal partial class APM_RichMediaPosition_VOffset__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaPosition_VOffset";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_RichMediaPosition_VOffset>(obj, "VOffset", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

