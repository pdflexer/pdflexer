// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfDuration : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfDuration";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfDuration_0, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOfDuration_1, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// ArrayOfDuration_0 Table 307 - starting time
/// </summary>
internal partial class APM_ArrayOfDuration_0 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfDuration_0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_ArrayOfDuration_0>(obj, 0, IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_ArrayOfDuration_0>("0 is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfIntNumber)utval;
                    // no indirect obj reqs
                    // no special cases
                    IPdfObject v = val;
                    
                    if (!(gt(v,0))) 
                    {
                        ctx.Fail<APM_ArrayOfDuration_0>($"Invalid value {val}, allowed are: [fn:Eval(@0>0)]");
                    }
                    // no linked objects
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // TODO value checks string-byte
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_ArrayOfDuration_0>("0 is required to one of 'integer;string-byte', was " + utval.Type);
                return;
        }
    }
}

/// <summary>
/// ArrayOfDuration_1 scale in units per second
/// </summary>
internal partial class APM_ArrayOfDuration_1 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfDuration_1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfIntNumber, APM_ArrayOfDuration_1>(obj, 1, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        IPdfObject v = val;
        
        if (!(gt(v,0))) 
        {
            ctx.Fail<APM_ArrayOfDuration_1>($"Invalid value {val}, allowed are: [fn:Eval(@1>0)]");
        }
        // no linked objects
        
    }
}

