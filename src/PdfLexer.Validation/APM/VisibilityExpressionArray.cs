// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_VisibilityExpressionArray : ISpecification<PdfArray>
{
    public static string Name { get; } = "VisibilityExpressionArray";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_VisibilityExpressionArray_0, PdfArray>(stack, obj, parent);
        ctx.Run<APM_VisibilityExpressionArray_1, PdfArray>(stack, obj, parent);
        ctx.Run<APM_VisibilityExpressionArray_x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// VisibilityExpressionArray_0 Table 97 and Clause 8.11.2.2
/// </summary>
internal partial class APM_VisibilityExpressionArray_0 : ISpecification<PdfArray>
{
    public static string Name { get; } = "VisibilityExpressionArray_0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_VisibilityExpressionArray_0>(obj, 0, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.And || val == PdfName.Not || val == PdfName.Or)) 
        {
            ctx.Fail<APM_VisibilityExpressionArray_0>($"Invalid value {val}, allowed are: [And,Not,Or]");
        }
        // no linked objects
        
    }
}

/// <summary>
/// VisibilityExpressionArray_1 
/// </summary>
internal partial class APM_VisibilityExpressionArray_1 : ISpecification<PdfArray>
{
    public static string Name { get; } = "VisibilityExpressionArray_1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_VisibilityExpressionArray_1>(obj, 1, IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_VisibilityExpressionArray_1>("1 is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_VisibilityExpressionArray, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_VisibilityExpressionArray_1>("1 is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }
}

/// <summary>
/// VisibilityExpressionArray_* 
/// </summary>
internal partial class APM_VisibilityExpressionArray_x : ISpecification<PdfArray>
{
    public static string Name { get; } = "VisibilityExpressionArray_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=1) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var (utval, wasIR) = ctx.GetOptional<APM_VisibilityExpressionArray_x>(obj, n, IndirectRequirement.Either);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                case PdfObjectType.ArrayObj:
                    {
                        var val =  (PdfArray)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        ctx.Run<APM_VisibilityExpressionArray, PdfArray>(stack, val, obj);
                        return;
                    }
                case PdfObjectType.DictionaryObj:
                    {
                        var val =  (PdfDictionary)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
                        return;
                    }
                
                default:
                    ctx.Fail<APM_VisibilityExpressionArray_x>("* is required to one of 'array;dictionary', was " + utval.Type);
                    return;
            }
        }
    }
}

