// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_3DActivation : APM_3DActivation__Base
{
}

internal partial class APM_3DActivation__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "3DActivation";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_3DActivation_A, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DActivation_AIS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DActivation_D, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DActivation_DIS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DActivation_TB, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DActivation_NP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DActivation_Style, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DActivation_Window, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DActivation_Transparent, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_3DActivation>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_3DActivation>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "A", "AIS", "D", "DIS"
    };
    public static HashSet<string> AllowedFields_17_18_19_20 { get; } = new HashSet<string> 
    {
        "A", "AIS", "D", "DIS", "NP", "Style", "TB", "Transparent", "Window"
    };
    


}

/// <summary>
/// 3DActivation_A Table 310
/// </summary>
internal partial class APM_3DActivation_A : APM_3DActivation_A__Base
{
}


internal partial class APM_3DActivation_A__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DActivation_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_3DActivation_A>(obj, "A", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.PO || val == PdfName.PV || val == PdfName.XA)) 
        {
            ctx.Fail<APM_3DActivation_A>($"Invalid value {val}, allowed are: [PO,PV,XA]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DActivation_AIS 
/// </summary>
internal partial class APM_3DActivation_AIS : APM_3DActivation_AIS__Base
{
}


internal partial class APM_3DActivation_AIS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DActivation_AIS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_3DActivation_AIS>(obj, "AIS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.I || val == PdfName.L)) 
        {
            ctx.Fail<APM_3DActivation_AIS>($"Invalid value {val}, allowed are: [I,L]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DActivation_D 
/// </summary>
internal partial class APM_3DActivation_D : APM_3DActivation_D__Base
{
}


internal partial class APM_3DActivation_D__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DActivation_D";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_3DActivation_D>(obj, "D", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.PC || val == PdfName.PI || val == PdfName.XD)) 
        {
            ctx.Fail<APM_3DActivation_D>($"Invalid value {val}, allowed are: [PC,PI,XD]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DActivation_DIS 
/// </summary>
internal partial class APM_3DActivation_DIS : APM_3DActivation_DIS__Base
{
}


internal partial class APM_3DActivation_DIS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DActivation_DIS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_3DActivation_DIS>(obj, "DIS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.U || val == PdfName.I || val == PdfName.L)) 
        {
            ctx.Fail<APM_3DActivation_DIS>($"Invalid value {val}, allowed are: [U,I,L]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DActivation_TB 
/// </summary>
internal partial class APM_3DActivation_TB : APM_3DActivation_TB__Base
{
}


internal partial class APM_3DActivation_TB__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DActivation_TB";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfBoolean, APM_3DActivation_TB>(obj, "TB", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DActivation_NP 
/// </summary>
internal partial class APM_3DActivation_NP : APM_3DActivation_NP__Base
{
}


internal partial class APM_3DActivation_NP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DActivation_NP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfBoolean, APM_3DActivation_NP>(obj, "NP", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DActivation_Style 
/// </summary>
internal partial class APM_3DActivation_Style : APM_3DActivation_Style__Base
{
}


internal partial class APM_3DActivation_Style__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DActivation_Style";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_3DActivation_Style>(obj, "Style", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Embedded || val == PdfName.Windowed)) 
        {
            ctx.Fail<APM_3DActivation_Style>($"Invalid value {val}, allowed are: [Embedded,Windowed]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DActivation_Window 
/// </summary>
internal partial class APM_3DActivation_Window : APM_3DActivation_Window__Base
{
}


internal partial class APM_3DActivation_Window__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DActivation_Window";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_3DActivation_Window>(obj, "Window", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_RichMediaWindow, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DActivation_Transparent 
/// </summary>
internal partial class APM_3DActivation_Transparent : APM_3DActivation_Transparent__Base
{
}


internal partial class APM_3DActivation_Transparent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DActivation_Transparent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfBoolean, APM_3DActivation_Transparent>(obj, "Transparent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

