// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_FieldMDPTransformParameters : APM_FieldMDPTransformParameters__Base
{
}

internal partial class APM_FieldMDPTransformParameters__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "FieldMDPTransformParameters";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_FieldMDPTransformParameters_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FieldMDPTransformParameters_Action, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FieldMDPTransformParameters_Fields, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FieldMDPTransformParameters_V, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_FieldMDPTransformParameters>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_FieldMDPTransformParameters_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_15_16_17_18_19_20 { get; } = new List<string> 
    {
        "Action", "Fields", "Type", "V"
    };
    


}

/// <summary>
/// FieldMDPTransformParameters_Type Table 259
/// </summary>
internal partial class APM_FieldMDPTransformParameters_Type : APM_FieldMDPTransformParameters_Type__Base
{
}


internal partial class APM_FieldMDPTransformParameters_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FieldMDPTransformParameters_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_FieldMDPTransformParameters_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.TransformParams)) 
        {
            ctx.Fail<APM_FieldMDPTransformParameters_Type>($"Invalid value {val}, allowed are: [TransformParams]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FieldMDPTransformParameters_Action 
/// </summary>
internal partial class APM_FieldMDPTransformParameters_Action : APM_FieldMDPTransformParameters_Action__Base
{
}


internal partial class APM_FieldMDPTransformParameters_Action__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FieldMDPTransformParameters_Action";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_FieldMDPTransformParameters_Action>(obj, "Action", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.All || val == PdfName.Include || val == PdfName.Exclude)) 
        {
            ctx.Fail<APM_FieldMDPTransformParameters_Action>($"Invalid value {val}, allowed are: [All,Include,Exclude]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FieldMDPTransformParameters_Fields 
/// </summary>
internal partial class APM_FieldMDPTransformParameters_Fields : APM_FieldMDPTransformParameters_Fields__Base
{
}


internal partial class APM_FieldMDPTransformParameters_Fields__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FieldMDPTransformParameters_Fields";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var Action = obj.Get("Action");
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_FieldMDPTransformParameters_Fields>(obj, "Fields", IndirectRequirement.Either);
        if (((eq(Action,PdfName.Include)||eq(Action,PdfName.Exclude))) && val == null) {
            ctx.Fail<APM_FieldMDPTransformParameters_Fields>("Fields is required when 'fn:IsRequired((@Action==Include) || (@Action==Exclude))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsText, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FieldMDPTransformParameters_V 
/// </summary>
internal partial class APM_FieldMDPTransformParameters_V : APM_FieldMDPTransformParameters_V__Base
{
}


internal partial class APM_FieldMDPTransformParameters_V__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FieldMDPTransformParameters_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_FieldMDPTransformParameters_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.N12)) 
        {
            ctx.Fail<APM_FieldMDPTransformParameters_V>($"Invalid value {val}, allowed are: [1.2]");
        }
        // no linked objects
        
    }


}

