// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfRequirements : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfRequirements";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfRequirements_x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false; // TODO
    }
}

/// <summary>
/// ArrayOfRequirements_* Table 29
/// </summary>
internal partial class APM_ArrayOfRequirements_x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfRequirements_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=1) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetOptional<PdfDictionary, APM_ArrayOfRequirements_x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            if (APM_RequirementsEnableJavaScripts.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_RequirementsEnableJavaScripts, PdfDictionary>(stack, val, obj);
            } else if (APM_RequirementsHandler.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_RequirementsHandler, PdfDictionary>(stack, val, obj);
            }else 
            {
                ctx.Fail<APM_ArrayOfRequirements_x>("n did not match any allowable types: '[fn:SinceVersion(2.0,RequirementsOCInteract),fn:SinceVersion(2.0,RequirementsOCAutoStates),fn:SinceVersion(2.0,RequirementsAcroFormInteract),fn:SinceVersion(2.0,RequirementsNavigation),fn:SinceVersion(2.0,RequirementsMarkup),fn:SinceVersion(2.0,Requirements3DMarkup),fn:SinceVersion(2.0,RequirementsMultimedia),fn:SinceVersion(2.0,RequirementsU3D),fn:SinceVersion(2.0,RequirementsPRC),fn:SinceVersion(2.0,RequirementsAction),RequirementsEnableJavaScripts,fn:SinceVersion(2.0,RequirementsAttachment),fn:SinceVersion(2.0,RequirementsAttachmentEditing),fn:SinceVersion(2.0,RequirementsCollection),fn:SinceVersion(2.0,RequirementsCollectionEditing),fn:SinceVersion(2.0,RequirementsDigSigValidation),fn:SinceVersion(2.0,RequirementsDigSig),fn:SinceVersion(2.0,RequirementsDigSigMDP),fn:SinceVersion(2.0,RequirementsRichMedia),fn:SinceVersion(2.0,RequirementsGeospatial2D),fn:SinceVersion(2.0,RequirementsGeospatial3D),fn:SinceVersion(2.0,RequirementsDPartInteract),fn:SinceVersion(2.0,RequirementsSeparationSimulation),fn:SinceVersion(2.0,RequirementsTransitions),fn:SinceVersion(2.0,RequirementsEncryption),RequirementsHandler,fn:SinceVersion(2.0,fn:Extension(ISO_TS_24064,RequirementsSTEP)),fn:SinceVersion(2.0,RequirementsglTF)]'");
            }
            
        }
    }
}

