// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_CertSeedValue : APM_CertSeedValue_Base
{
}

internal partial class APM_CertSeedValue_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "CertSeedValue";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_CertSeedValue_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_Ff, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_Subject, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_SignaturePolicyOID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_SignaturePolicyHashValue, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_SignaturePolicyHashAlgorithm, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_SignaturePolicyCommitmentType, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_SubjectDN, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_KeyUsage, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_Issuer, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_OID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_URL, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CertSeedValue_URLType, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_CertSeedValue>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_CertSeedValue>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_CertSeedValue>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_CertSeedValue>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_CertSeedValue>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_CertSeedValue>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_CertSeedValue_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Ff", "Subject", "Issuer", "OID", "URL"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Ff", "Subject", "Issuer", "OID", "URL"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Ff", "Subject", "SubjectDN", "KeyUsage", "Issuer", "OID", "URL", "URLType"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Ff", "Subject", "SubjectDN", "KeyUsage", "Issuer", "OID", "URL", "URLType"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Ff", "Subject", "SubjectDN", "KeyUsage", "Issuer", "OID", "URL", "URLType"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Ff", "Subject", "SignaturePolicyOID", "SignaturePolicyHashValue", "SignaturePolicyHashAlgorithm", "SignaturePolicyCommitmentType", "SubjectDN", "KeyUsage", "Issuer", "OID", "URL", "URLType"
    };
    


}

/// <summary>
/// CertSeedValue_Type Table 238
/// </summary>
internal partial class APM_CertSeedValue_Type : APM_CertSeedValue_Type_Base
{
}


internal partial class APM_CertSeedValue_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_CertSeedValue_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "SVCert")) 
        {
            ctx.Fail<APM_CertSeedValue_Type>($"Invalid value {val}, allowed are: [SVCert]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// CertSeedValue_Ff 
/// </summary>
internal partial class APM_CertSeedValue_Ff : APM_CertSeedValue_Ff_Base
{
}


internal partial class APM_CertSeedValue_Ff_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_Ff";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_CertSeedValue_Ff>(obj, "Ff", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CertSeedValue_Subject 
/// </summary>
internal partial class APM_CertSeedValue_Subject : APM_CertSeedValue_Subject_Base
{
}


internal partial class APM_CertSeedValue_Subject_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_Subject";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_CertSeedValue_Subject>(obj, "Subject", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsByte, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CertSeedValue_SignaturePolicyOID 
/// </summary>
internal partial class APM_CertSeedValue_SignaturePolicyOID : APM_CertSeedValue_SignaturePolicyOID_Base
{
}


internal partial class APM_CertSeedValue_SignaturePolicyOID_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_SignaturePolicyOID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_CertSeedValue_SignaturePolicyOID>(obj, "SignaturePolicyOID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CertSeedValue_SignaturePolicyHashValue 
/// </summary>
internal partial class APM_CertSeedValue_SignaturePolicyHashValue : APM_CertSeedValue_SignaturePolicyHashValue_Base
{
}


internal partial class APM_CertSeedValue_SignaturePolicyHashValue_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_SignaturePolicyHashValue";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_CertSeedValue_SignaturePolicyHashValue>(obj, "SignaturePolicyHashValue", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CertSeedValue_SignaturePolicyHashAlgorithm Table 260
/// </summary>
internal partial class APM_CertSeedValue_SignaturePolicyHashAlgorithm : APM_CertSeedValue_SignaturePolicyHashAlgorithm_Base
{
}


internal partial class APM_CertSeedValue_SignaturePolicyHashAlgorithm_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_SignaturePolicyHashAlgorithm";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_CertSeedValue_SignaturePolicyHashAlgorithm>(obj, "SignaturePolicyHashAlgorithm", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "adbe.pkcs7.detached" || (ctx.Version <= 2.0m && val == "adbe.pkcs7.sha1") || val == "adbe.x509.rsa_sha1" || val == "ETSI.CAdES.detached" || val == "ETSI.RFC3161")) 
        {
            ctx.Fail<APM_CertSeedValue_SignaturePolicyHashAlgorithm>($"Invalid value {val}, allowed are: [adbe.pkcs7.detached,fn:Deprecated(2.0,adbe.pkcs7.sha1),adbe.x509.rsa_sha1,ETSI.CAdES.detached,ETSI.RFC3161]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// CertSeedValue_SignaturePolicyCommitmentType 
/// </summary>
internal partial class APM_CertSeedValue_SignaturePolicyCommitmentType : APM_CertSeedValue_SignaturePolicyCommitmentType_Base
{
}


internal partial class APM_CertSeedValue_SignaturePolicyCommitmentType_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_SignaturePolicyCommitmentType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_CertSeedValue_SignaturePolicyCommitmentType>(obj, "SignaturePolicyCommitmentType", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsASCII, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CertSeedValue_SubjectDN 
/// </summary>
internal partial class APM_CertSeedValue_SubjectDN : APM_CertSeedValue_SubjectDN_Base
{
}


internal partial class APM_CertSeedValue_SubjectDN_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_SubjectDN";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_CertSeedValue_SubjectDN>(obj, "SubjectDN", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfSubjectDN, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CertSeedValue_KeyUsage RFC 5280
/// </summary>
internal partial class APM_CertSeedValue_KeyUsage : APM_CertSeedValue_KeyUsage_Base
{
}


internal partial class APM_CertSeedValue_KeyUsage_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_KeyUsage";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_CertSeedValue_KeyUsage>(obj, "KeyUsage", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsASCII, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CertSeedValue_Issuer 
/// </summary>
internal partial class APM_CertSeedValue_Issuer : APM_CertSeedValue_Issuer_Base
{
}


internal partial class APM_CertSeedValue_Issuer_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_Issuer";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_CertSeedValue_Issuer>(obj, "Issuer", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsByte, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CertSeedValue_OID 
/// </summary>
internal partial class APM_CertSeedValue_OID : APM_CertSeedValue_OID_Base
{
}


internal partial class APM_CertSeedValue_OID_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_OID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_CertSeedValue_OID>(obj, "OID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsByte, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CertSeedValue_URL 
/// </summary>
internal partial class APM_CertSeedValue_URL : APM_CertSeedValue_URL_Base
{
}


internal partial class APM_CertSeedValue_URL_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_URL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_CertSeedValue_URL>(obj, "URL", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CertSeedValue_URLType 
/// </summary>
internal partial class APM_CertSeedValue_URLType : APM_CertSeedValue_URLType_Base
{
}


internal partial class APM_CertSeedValue_URLType_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CertSeedValue_URLType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_CertSeedValue_URLType>(obj, "URLType", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Browser" || val == "*")) 
        {
            ctx.Fail<APM_CertSeedValue_URLType>($"Invalid value {val}, allowed are: [Browser,*]");
        }
        }
        // no linked objects
        
    }


}

