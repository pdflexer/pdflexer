// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_EncryptionPublicKey : APM_EncryptionPublicKey__Base
{
}

internal partial class APM_EncryptionPublicKey__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "EncryptionPublicKey";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_EncryptionPublicKey_Recipients, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_SubFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_V, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_CF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_StmF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_StrF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_EFF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_EncryptMetadata, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_EncryptionPublicKey_KDFSalt, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_EncryptionPublicKey>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_11 { get; } = new List<string> 
    {
        "Filter", "V"
    };
    public static List<string> AllowedFields_12 { get; } = new List<string> 
    {
        "Filter", "V"
    };
    public static List<string> AllowedFields_13 { get; } = new List<string> 
    {
        "Recipients", "P", "Filter", "SubFilter", "V"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Recipients", "P", "Filter", "SubFilter", "V", "Length"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Recipients", "P", "Filter", "SubFilter", "V", "Length", "CF", "StmF", "StrF", "EncryptMetadata"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Recipients", "P", "Filter", "SubFilter", "V", "Length", "CF", "StmF", "StrF", "EFF", "EncryptMetadata"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Recipients", "P", "Filter", "SubFilter", "V", "Length", "CF", "StmF", "StrF", "EFF", "EncryptMetadata"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Recipients", "P", "Filter", "SubFilter", "V", "Length", "CF", "StmF", "StrF", "EFF", "EncryptMetadata"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Recipients", "P", "Filter", "SubFilter", "V", "Length", "CF", "StmF", "StrF", "EFF", "EncryptMetadata"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Recipients", "Filter", "SubFilter", "V", "CF", "StmF", "StrF", "EFF", "EncryptMetadata"
    };
    


}

/// <summary>
/// EncryptionPublicKey_Recipients Table 23, https://github.com/pdf-association/pdf-issues/issues/16
/// </summary>
internal partial class APM_EncryptionPublicKey_Recipients : APM_EncryptionPublicKey_Recipients__Base
{
}


internal partial class APM_EncryptionPublicKey_Recipients__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_Recipients";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var SubFilter = obj.Get("SubFilter");
        var val = ctx.GetOptional<PdfArray, APM_EncryptionPublicKey_Recipients>(obj, "Recipients", IndirectRequirement.Either);
        if (((eq(SubFilter,"adbe.pkcs7.s3")||eq(SubFilter,"adbe.pkcs7.s4"))) && val == null) {
            ctx.Fail<APM_EncryptionPublicKey_Recipients>("Recipients is required when 'fn:IsRequired((@SubFilter==adbe.pkcs7.s3) || (@SubFilter==adbe.pkcs7.s4))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsByte, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// EncryptionPublicKey_P Table 23 and Table 24 - removed from ISO 32000-2:2020
/// </summary>
internal partial class APM_EncryptionPublicKey_P : APM_EncryptionPublicKey_P__Base
{
}


internal partial class APM_EncryptionPublicKey_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_EncryptionPublicKey_P>(obj, "P", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(BitsClear(obj))) 
        {
            ctx.Fail<APM_EncryptionPublicKey_P>($"Value failed special case check: fn:Eval(fn:BitsClear(13,32))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// EncryptionPublicKey_Filter Table 20
/// </summary>
internal partial class APM_EncryptionPublicKey_Filter : APM_EncryptionPublicKey_Filter__Base
{
}


internal partial class APM_EncryptionPublicKey_Filter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_EncryptionPublicKey_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Adobe.PubSec" || val == "AdobePPKLite")) 
        {
            ctx.Fail<APM_EncryptionPublicKey_Filter>($"Invalid value {val}, allowed are: [Adobe.PubSec,AdobePPKLite]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// EncryptionPublicKey_SubFilter https://github.com/pdf-association/pdf-issues/issues/219
/// </summary>
internal partial class APM_EncryptionPublicKey_SubFilter : APM_EncryptionPublicKey_SubFilter__Base
{
}


internal partial class APM_EncryptionPublicKey_SubFilter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_SubFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_EncryptionPublicKey_SubFilter>(obj, "SubFilter", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "adbe.pkcs7.s3" || (ctx.Version >= 1.4m && val == "adbe.pkcs7.s4") || (ctx.Version >= 1.5m && val == "adbe.pkcs7.s5"))) 
        {
            ctx.Fail<APM_EncryptionPublicKey_SubFilter>($"Invalid value {val}, allowed are: [adbe.pkcs7.s3,fn:SinceVersion(1.4,adbe.pkcs7.s4),fn:SinceVersion(1.5,adbe.pkcs7.s5)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// EncryptionPublicKey_V 
/// </summary>
internal partial class APM_EncryptionPublicKey_V : APM_EncryptionPublicKey_V__Base
{
}


internal partial class APM_EncryptionPublicKey_V__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_EncryptionPublicKey_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!((ctx.Version <= 1.1m && val == 0) || (ctx.Version <= 2.0m && val == 1) || (ctx.Version <= 2.0m && (ctx.Version >= 1.4m && val == 2)) || (ctx.Version <= 2.0m && (ctx.Version >= 1.4m && val == 3)) || (ctx.Version <= 2.0m && (ctx.Version >= 1.5m && val == 4)) || (ctx.Version == 1.7m && (ctx.Extensions.Contains("ADBE_Extn3") && val == 5)) || (ctx.Version >= 2.0m && val == 5) || (ctx.Version < 2.0m || (ctx.Extensions.Contains("ISO_TS_32003") && val == 6)))) 
        {
            ctx.Fail<APM_EncryptionPublicKey_V>($"Invalid value {val}, allowed are: [fn:Deprecated(1.1,0),fn:Deprecated(2.0,1),fn:Deprecated(2.0,fn:SinceVersion(1.4,2)),fn:Deprecated(2.0,fn:SinceVersion(1.4,3)),fn:Deprecated(2.0,fn:SinceVersion(1.5,4)),fn:IsPDFVersion(1.7,fn:Extension(ADBE_Extn3,5)),fn:SinceVersion(2.0,5),fn:SinceVersion(2.0,fn:Extension(ISO_TS_32003,6))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// EncryptionPublicKey_Length 
/// </summary>
internal partial class APM_EncryptionPublicKey_Length : APM_EncryptionPublicKey_Length__Base
{
}


internal partial class APM_EncryptionPublicKey_Length__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_EncryptionPublicKey_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var Length = obj.Get("Length");
        if (!(gte(Length,40)&&lte(Length,128)&&eq(mod(Length,8),0))) 
        {
            ctx.Fail<APM_EncryptionPublicKey_Length>($"Invalid value {val}, allowed are: [fn:Eval((@Length>=40) && (@Length<=128) && ((@Length mod 8)==0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// EncryptionPublicKey_CF 
/// </summary>
internal partial class APM_EncryptionPublicKey_CF : APM_EncryptionPublicKey_CF__Base
{
}


internal partial class APM_EncryptionPublicKey_CF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_CF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_EncryptionPublicKey_CF>(obj, "CF", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        // no value restrictions
        if (APM_CryptFilterMap.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_CryptFilterMap, PdfDictionary>(stack, val, obj);
        } else if (APM_CryptFilterPublicKeyMap.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_CryptFilterPublicKeyMap, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_EncryptionPublicKey_CF>("CF did not match any allowable types: '[CryptFilterMap,CryptFilterPublicKeyMap]'");
        }
        
    }


}

/// <summary>
/// EncryptionPublicKey_StmF 
/// </summary>
internal partial class APM_EncryptionPublicKey_StmF : APM_EncryptionPublicKey_StmF__Base
{
}


internal partial class APM_EncryptionPublicKey_StmF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_StmF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_EncryptionPublicKey_StmF>(obj, "StmF", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        
        
        if (!(val == "Identity" || val == "DefaultCryptFilter" || val == "DefEmbeddedFile")) 
        {
            ctx.Fail<APM_EncryptionPublicKey_StmF>($"Invalid value {val}, allowed are: [Identity,DefaultCryptFilter,DefEmbeddedFile]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// EncryptionPublicKey_StrF 
/// </summary>
internal partial class APM_EncryptionPublicKey_StrF : APM_EncryptionPublicKey_StrF__Base
{
}


internal partial class APM_EncryptionPublicKey_StrF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_StrF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_EncryptionPublicKey_StrF>(obj, "StrF", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        
        
        if (!(val == "Identity" || val == "DefaultCryptFilter")) 
        {
            ctx.Fail<APM_EncryptionPublicKey_StrF>($"Invalid value {val}, allowed are: [Identity,DefaultCryptFilter]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// EncryptionPublicKey_EFF 
/// </summary>
internal partial class APM_EncryptionPublicKey_EFF : APM_EncryptionPublicKey_EFF__Base
{
}


internal partial class APM_EncryptionPublicKey_EFF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_EFF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_EncryptionPublicKey_EFF>(obj, "EFF", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        
        
        if (!(val == "Identity" || val == "DefaultCryptFilter" || val == "DefEmbeddedFile")) 
        {
            ctx.Fail<APM_EncryptionPublicKey_EFF>($"Invalid value {val}, allowed are: [Identity,DefaultCryptFilter,DefEmbeddedFile]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// EncryptionPublicKey_EncryptMetadata 
/// </summary>
internal partial class APM_EncryptionPublicKey_EncryptMetadata : APM_EncryptionPublicKey_EncryptMetadata__Base
{
}


internal partial class APM_EncryptionPublicKey_EncryptMetadata__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_EncryptMetadata";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_EncryptionPublicKey_EncryptMetadata>(obj, "EncryptMetadata", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// EncryptionPublicKey_KDFSalt ISO/TS 32004 integrity protection
/// </summary>
internal partial class APM_EncryptionPublicKey_KDFSalt : APM_EncryptionPublicKey_KDFSalt__Base
{
}


internal partial class APM_EncryptionPublicKey_KDFSalt__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "EncryptionPublicKey_KDFSalt";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_EncryptionPublicKey_KDFSalt>(obj, "KDFSalt", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        
        if (!(AlwaysUnencrypted(obj))) 
        {
            ctx.Fail<APM_EncryptionPublicKey_KDFSalt>($"Value failed special case check: fn:Eval(fn:AlwaysUnencrypted())");
        }
        // no value restrictions
        // no linked objects
        
    }


}

