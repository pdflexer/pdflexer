// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_XObjectFormPrinterMark : APM_XObjectFormPrinterMark_Base
{
}

internal partial class APM_XObjectFormPrinterMark_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "XObjectFormPrinterMark";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_XObjectFormPrinterMark_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_FormType, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_BBox, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Matrix, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Resources, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Group, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Ref, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Metadata, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_PieceInfo, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_LastModified, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_StructParents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_OPI, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Measure, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_PtData, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_DecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_FFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_FDecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_DL, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_MarkStyle, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormPrinterMark_Colorants, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormPrinterMark>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormPrinterMark>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormPrinterMark>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormPrinterMark>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormPrinterMark>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormPrinterMark>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormPrinterMark>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_XObjectFormPrinterMark_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "MarkStyle", "Colorants"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "MarkStyle", "Colorants"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "MarkStyle", "Colorants"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "MarkStyle", "Colorants"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "MarkStyle", "Colorants"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "MarkStyle", "Colorants"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OC", "AF", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "MarkStyle", "Colorants"
    };
    


}

/// <summary>
/// XObjectFormPrinterMark_Type Table 5, Table 93 and Table 399
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Type : APM_XObjectFormPrinterMark_Type_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectFormPrinterMark_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "XObject")) 
        {
            ctx.Fail<APM_XObjectFormPrinterMark_Type>($"Invalid value {val}, allowed are: [XObject]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Subtype 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Subtype : APM_XObjectFormPrinterMark_Subtype_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_XObjectFormPrinterMark_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Form")) 
        {
            ctx.Fail<APM_XObjectFormPrinterMark_Subtype>($"Invalid value {val}, allowed are: [Form]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_FormType 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_FormType : APM_XObjectFormPrinterMark_FormType_Base
{
}


internal partial class APM_XObjectFormPrinterMark_FormType_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_FormType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormPrinterMark_FormType>(obj, "FormType", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == 1)) 
        {
            ctx.Fail<APM_XObjectFormPrinterMark_FormType>($"Invalid value {val}, allowed are: [1]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_BBox 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_BBox : APM_XObjectFormPrinterMark_BBox_Base
{
}


internal partial class APM_XObjectFormPrinterMark_BBox_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_BBox";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_XObjectFormPrinterMark_BBox>(obj, "BBox", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Matrix 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Matrix : APM_XObjectFormPrinterMark_Matrix_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Matrix_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Matrix";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectFormPrinterMark_Matrix>(obj, "Matrix", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Resources 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Resources : APM_XObjectFormPrinterMark_Resources_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Resources_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Resources";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormPrinterMark_Resources>(obj, "Resources", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Resource, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Group 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Group : APM_XObjectFormPrinterMark_Group_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Group_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Group";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormPrinterMark_Group>(obj, "Group", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_GroupAttributes, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Ref 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Ref : APM_XObjectFormPrinterMark_Ref_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Ref_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Ref";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormPrinterMark_Ref>(obj, "Ref", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Reference, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Metadata 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Metadata : APM_XObjectFormPrinterMark_Metadata_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Metadata_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Metadata";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_XObjectFormPrinterMark_Metadata>(obj, "Metadata", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Metadata, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_PieceInfo 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_PieceInfo : APM_XObjectFormPrinterMark_PieceInfo_Base
{
}


internal partial class APM_XObjectFormPrinterMark_PieceInfo_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_PieceInfo";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormPrinterMark_PieceInfo>(obj, "PieceInfo", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PagePiece, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_LastModified 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_LastModified : APM_XObjectFormPrinterMark_LastModified_Base
{
}


internal partial class APM_XObjectFormPrinterMark_LastModified_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_LastModified";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfString? val;
        {
            
            if (obj.ContainsKey("PieceInfo")) {
                val = ctx.GetRequired<PdfString, APM_XObjectFormPrinterMark_LastModified>(obj, "LastModified", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfString, APM_XObjectFormPrinterMark_LastModified>(obj, "LastModified", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_StructParent Table 359
/// </summary>
internal partial class APM_XObjectFormPrinterMark_StructParent : APM_XObjectFormPrinterMark_StructParent_Base
{
}


internal partial class APM_XObjectFormPrinterMark_StructParent_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormPrinterMark_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_StructParents Table 359
/// </summary>
internal partial class APM_XObjectFormPrinterMark_StructParents : APM_XObjectFormPrinterMark_StructParents_Base
{
}


internal partial class APM_XObjectFormPrinterMark_StructParents_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_StructParents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormPrinterMark_StructParents>(obj, "StructParents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_OPI 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_OPI : APM_XObjectFormPrinterMark_OPI_Base
{
}


internal partial class APM_XObjectFormPrinterMark_OPI_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_OPI";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormPrinterMark_OPI>(obj, "OPI", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OPIVersion13.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion13, PdfDictionary>(stack, val, obj);
        } else if (APM_OPIVersion20.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion20, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectFormPrinterMark_OPI>("OPI did not match any allowable types: '[OPIVersion13,OPIVersion20]'");
        }
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_OC 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_OC : APM_XObjectFormPrinterMark_OC_Base
{
}


internal partial class APM_XObjectFormPrinterMark_OC_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormPrinterMark_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectFormPrinterMark_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Name 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Name : APM_XObjectFormPrinterMark_Name_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Name_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectFormPrinterMark_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_AF 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_AF : APM_XObjectFormPrinterMark_AF_Base
{
}


internal partial class APM_XObjectFormPrinterMark_AF_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormPrinterMark_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormPrinterMark_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormPrinterMark_Measure 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Measure : APM_XObjectFormPrinterMark_Measure_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Measure_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Measure";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormPrinterMark_Measure>(obj, "Measure", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_MeasureRL.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_MeasureRL, PdfDictionary>(stack, val, obj);
        } else if (APM_MeasureGEO.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_MeasureGEO, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectFormPrinterMark_Measure>("Measure did not match any allowable types: '[MeasureRL,MeasureGEO]'");
        }
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_PtData 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_PtData : APM_XObjectFormPrinterMark_PtData_Base
{
}


internal partial class APM_XObjectFormPrinterMark_PtData_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_PtData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormPrinterMark_PtData>(obj, "PtData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PointData, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Length 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Length : APM_XObjectFormPrinterMark_Length_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Length_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectFormPrinterMark_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Filter 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Filter : APM_XObjectFormPrinterMark_Filter_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Filter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormPrinterMark_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_XObjectFormPrinterMark_Filter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormPrinterMark_Filter>("Filter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormPrinterMark_DecodeParms 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_DecodeParms : APM_XObjectFormPrinterMark_DecodeParms_Base
{
}


internal partial class APM_XObjectFormPrinterMark_DecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_DecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormPrinterMark_DecodeParms>(obj, "DecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectFormPrinterMark_DecodeParms>("DecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormPrinterMark_DecodeParms>("DecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormPrinterMark_F 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_F : APM_XObjectFormPrinterMark_F_Base
{
}


internal partial class APM_XObjectFormPrinterMark_F_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormPrinterMark_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormPrinterMark_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormPrinterMark_FFilter 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_FFilter : APM_XObjectFormPrinterMark_FFilter_Base
{
}


internal partial class APM_XObjectFormPrinterMark_FFilter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_FFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormPrinterMark_FFilter>(obj, "FFilter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_XObjectFormPrinterMark_FFilter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormPrinterMark_FFilter>("FFilter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormPrinterMark_FDecodeParms 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_FDecodeParms : APM_XObjectFormPrinterMark_FDecodeParms_Base
{
}


internal partial class APM_XObjectFormPrinterMark_FDecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_FDecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormPrinterMark_FDecodeParms>(obj, "FDecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectFormPrinterMark_FDecodeParms>("FDecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormPrinterMark_FDecodeParms>("FDecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormPrinterMark_DL 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_DL : APM_XObjectFormPrinterMark_DL_Base
{
}


internal partial class APM_XObjectFormPrinterMark_DL_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_DL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormPrinterMark_DL>(obj, "DL", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_MarkStyle from Table 399 printer mark form dictionary
/// </summary>
internal partial class APM_XObjectFormPrinterMark_MarkStyle : APM_XObjectFormPrinterMark_MarkStyle_Base
{
}


internal partial class APM_XObjectFormPrinterMark_MarkStyle_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_MarkStyle";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_XObjectFormPrinterMark_MarkStyle>(obj, "MarkStyle", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormPrinterMark_Colorants 
/// </summary>
internal partial class APM_XObjectFormPrinterMark_Colorants : APM_XObjectFormPrinterMark_Colorants_Base
{
}


internal partial class APM_XObjectFormPrinterMark_Colorants_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormPrinterMark_Colorants";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormPrinterMark_Colorants>(obj, "Colorants", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ColorantsDict, PdfDictionary>(stack, val, obj);
        
    }


}

