// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_RichMediaConfiguration : APM_RichMediaConfiguration_Base
{
}

internal partial class APM_RichMediaConfiguration_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "RichMediaConfiguration";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_RichMediaConfiguration_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaConfiguration_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaConfiguration_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaConfiguration_Instances, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
        
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_RichMediaConfiguration_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    


}

/// <summary>
/// RichMediaConfiguration_Type Table 342
/// </summary>
internal partial class APM_RichMediaConfiguration_Type : APM_RichMediaConfiguration_Type_Base
{
}


internal partial class APM_RichMediaConfiguration_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaConfiguration_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaConfiguration_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "RichMediaConfiguration")) 
        {
            ctx.Fail<APM_RichMediaConfiguration_Type>($"Invalid value {val}, allowed are: [RichMediaConfiguration]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaConfiguration_Subtype 
/// </summary>
internal partial class APM_RichMediaConfiguration_Subtype : APM_RichMediaConfiguration_Subtype_Base
{
}


internal partial class APM_RichMediaConfiguration_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaConfiguration_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaConfiguration_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "3D" || val == "Sound" || val == "Video")) 
        {
            ctx.Fail<APM_RichMediaConfiguration_Subtype>($"Invalid value {val}, allowed are: [3D,Sound,Video]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaConfiguration_Name 
/// </summary>
internal partial class APM_RichMediaConfiguration_Name : APM_RichMediaConfiguration_Name_Base
{
}


internal partial class APM_RichMediaConfiguration_Name_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaConfiguration_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_RichMediaConfiguration_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaConfiguration_Instances 
/// </summary>
internal partial class APM_RichMediaConfiguration_Instances : APM_RichMediaConfiguration_Instances_Base
{
}


internal partial class APM_RichMediaConfiguration_Instances_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaConfiguration_Instances";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_RichMediaConfiguration_Instances>(obj, "Instances", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfRichMediaInstances, PdfArray>(stack, val, obj);
        
    }


}

