// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOf_2UnencryptedStringsByte : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOf_2UnencryptedStringsByte";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOf_2UnencryptedStringsByte_0, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOf_2UnencryptedStringsByte_1, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// ArrayOf_2UnencryptedStringsByte_0 Clause 7.6.2 - file trailer ID array
/// </summary>
internal partial class APM_ArrayOf_2UnencryptedStringsByte_0 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOf_2UnencryptedStringsByte_0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfString, APM_ArrayOf_2UnencryptedStringsByte_0>(obj, 0, IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(AlwaysUnencrypted(obj))) 
        {
            ctx.Fail<APM_ArrayOf_2UnencryptedStringsByte_0>($"Value failed special case check: fn:Eval(fn:AlwaysUnencrypted())");
        }
        // no value restrictions
        // no linked objects
        
    }
}

/// <summary>
/// ArrayOf_2UnencryptedStringsByte_1 
/// </summary>
internal partial class APM_ArrayOf_2UnencryptedStringsByte_1 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOf_2UnencryptedStringsByte_1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfString, APM_ArrayOf_2UnencryptedStringsByte_1>(obj, 1, IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(AlwaysUnencrypted(obj))) 
        {
            ctx.Fail<APM_ArrayOf_2UnencryptedStringsByte_1>($"Value failed special case check: fn:Eval(fn:AlwaysUnencrypted())");
        }
        // no value restrictions
        // no linked objects
        
    }
}

