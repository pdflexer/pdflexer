// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_3DLightingScheme : APM_3DLightingScheme_Base
{
}

internal partial class APM_3DLightingScheme_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "3DLightingScheme";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_3DLightingScheme_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DLightingScheme_Subtype, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_3DLightingScheme>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_3DLightingScheme>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_3DLightingScheme>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_3DLightingScheme>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_3DLightingScheme_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "Subtype"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "Subtype"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "Subtype"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "Subtype"
    };
    


}

/// <summary>
/// 3DLightingScheme_Type Table 320
/// </summary>
internal partial class APM_3DLightingScheme_Type : APM_3DLightingScheme_Type_Base
{
}


internal partial class APM_3DLightingScheme_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DLightingScheme_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_3DLightingScheme_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "3DLightingScheme")) 
        {
            ctx.Fail<APM_3DLightingScheme_Type>($"Invalid value {val}, allowed are: [3DLightingScheme]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DLightingScheme_Subtype Table 321
/// </summary>
internal partial class APM_3DLightingScheme_Subtype : APM_3DLightingScheme_Subtype_Base
{
}


internal partial class APM_3DLightingScheme_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DLightingScheme_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_3DLightingScheme_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Artwork" || val == "None" || val == "White" || val == "Day" || val == "Night" || val == "Hard" || val == "Primary" || val == "Blue" || val == "Red" || val == "Cube" || val == "CAD" || val == "Headlamp")) 
        {
            ctx.Fail<APM_3DLightingScheme_Subtype>($"Invalid value {val}, allowed are: [Artwork,None,White,Day,Night,Hard,Primary,Blue,Red,Cube,CAD,Headlamp]");
        }
        }
        // no linked objects
        
    }


}

