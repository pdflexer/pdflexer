// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_DeviceNMixingHints : APM_DeviceNMixingHints__Base
{
}

internal partial class APM_DeviceNMixingHints__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "DeviceNMixingHints";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_DeviceNMixingHints_Solidities, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DeviceNMixingHints_PrintingOrder, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DeviceNMixingHints_DotGain, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_DeviceNMixingHints>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_16_17_18_19_20 { get; } = new List<string> 
    {
        "DotGain", "PrintingOrder", "Solidities"
    };
    


}

/// <summary>
/// DeviceNMixingHints_Solidities Table 72
/// </summary>
internal partial class APM_DeviceNMixingHints_Solidities : APM_DeviceNMixingHints_Solidities__Base
{
}


internal partial class APM_DeviceNMixingHints_Solidities__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DeviceNMixingHints_Solidities";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_DeviceNMixingHints_Solidities>(obj, "Solidities", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Solidities, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// DeviceNMixingHints_PrintingOrder 
/// </summary>
internal partial class APM_DeviceNMixingHints_PrintingOrder : APM_DeviceNMixingHints_PrintingOrder__Base
{
}


internal partial class APM_DeviceNMixingHints_PrintingOrder__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DeviceNMixingHints_PrintingOrder";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_DeviceNMixingHints_PrintingOrder>(obj, "PrintingOrder", IndirectRequirement.Either);
        if ((obj.ContainsKey(PdfName.Solidities)) && val == null) {
            ctx.Fail<APM_DeviceNMixingHints_PrintingOrder>("PrintingOrder is required when 'fn:IsRequired(fn:IsPresent(Solidities))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNamesForPrintingOrder, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// DeviceNMixingHints_DotGain 
/// </summary>
internal partial class APM_DeviceNMixingHints_DotGain : APM_DeviceNMixingHints_DotGain__Base
{
}


internal partial class APM_DeviceNMixingHints_DotGain__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DeviceNMixingHints_DotGain";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_DeviceNMixingHints_DotGain>(obj, "DotGain", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DictionaryOfFunctions, PdfDictionary>(stack, val, obj);
        
    }


}

