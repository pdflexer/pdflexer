// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_SignatureBuildPropDict : APM_SignatureBuildPropDict__Base
{
}

internal partial class APM_SignatureBuildPropDict__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "SignatureBuildPropDict";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_SignatureBuildPropDict_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildPropDict_PubSec, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildPropDict_App, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SignatureBuildPropDict_SigQ, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_SignatureBuildPropDict>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_15_16_17_18_19_20 { get; } = new List<string> 
    {
        "App", "Filter", "PubSec", "SigQ"
    };
    


}

/// <summary>
/// SignatureBuildPropDict_Filter Adobe "Digital Signature Build Dictionary Specification" Table 1
/// </summary>
internal partial class APM_SignatureBuildPropDict_Filter : APM_SignatureBuildPropDict_Filter__Base
{
}


internal partial class APM_SignatureBuildPropDict_Filter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildPropDict_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_SignatureBuildPropDict_Filter>(obj, "Filter", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        
        // no special cases
        // no value restrictions
        ctx.Run<APM_SignatureBuildDataDict, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// SignatureBuildPropDict_PubSec 
/// </summary>
internal partial class APM_SignatureBuildPropDict_PubSec : APM_SignatureBuildPropDict_PubSec__Base
{
}


internal partial class APM_SignatureBuildPropDict_PubSec__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildPropDict_PubSec";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_SignatureBuildPropDict_PubSec>(obj, "PubSec", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        
        // no special cases
        // no value restrictions
        ctx.Run<APM_SignatureBuildDataDict, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// SignatureBuildPropDict_App 
/// </summary>
internal partial class APM_SignatureBuildPropDict_App : APM_SignatureBuildPropDict_App__Base
{
}


internal partial class APM_SignatureBuildPropDict_App__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildPropDict_App";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_SignatureBuildPropDict_App>(obj, "App", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        
        // no special cases
        // no value restrictions
        ctx.Run<APM_SignatureBuildDataAppDict, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// SignatureBuildPropDict_SigQ 
/// </summary>
internal partial class APM_SignatureBuildPropDict_SigQ : APM_SignatureBuildPropDict_SigQ__Base
{
}


internal partial class APM_SignatureBuildPropDict_SigQ__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SignatureBuildPropDict_SigQ";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_SignatureBuildPropDict_SigQ>(obj, "SigQ", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        
        // no special cases
        // no value restrictions
        ctx.Run<APM_SignatureBuildDataSigQDict, PdfDictionary>(stack, val, obj);
        
    }


}

