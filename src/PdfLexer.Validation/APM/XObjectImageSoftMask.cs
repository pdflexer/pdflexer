// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_XObjectImageSoftMask : APM_XObjectImageSoftMask_Base
{
}

internal partial class APM_XObjectImageSoftMask_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "XObjectImageSoftMask";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_XObjectImageSoftMask_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Width, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Height, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_ColorSpace, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_BitsPerComponent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Intent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_ImageMask, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Decode, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Interpolate, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Matte, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Metadata, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_DecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_FFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_FDecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageSoftMask_DL, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageSoftMask>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageSoftMask>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageSoftMask>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageSoftMask>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageSoftMask>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageSoftMask>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageSoftMask>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_XObjectImageSoftMask_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Name", "Decode", "Interpolate", "Matte", "Metadata", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Name", "Decode", "Interpolate", "Matte", "Metadata", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Name", "Decode", "Interpolate", "Matte", "Metadata", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Name", "Decode", "Interpolate", "Matte", "Metadata", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Name", "Decode", "Interpolate", "Matte", "Metadata", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Name", "Decode", "Interpolate", "Matte", "Metadata", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Matte", "Metadata", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    


}

/// <summary>
/// XObjectImageSoftMask_Type Table87 and Table 143 and Table 144
/// </summary>
internal partial class APM_XObjectImageSoftMask_Type : APM_XObjectImageSoftMask_Type_Base
{
}


internal partial class APM_XObjectImageSoftMask_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectImageSoftMask_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "XObject")) 
        {
            ctx.Fail<APM_XObjectImageSoftMask_Type>($"Invalid value {val}, allowed are: [XObject]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Subtype 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Subtype : APM_XObjectImageSoftMask_Subtype_Base
{
}


internal partial class APM_XObjectImageSoftMask_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_XObjectImageSoftMask_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Image")) 
        {
            ctx.Fail<APM_XObjectImageSoftMask_Subtype>($"Invalid value {val}, allowed are: [Image]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Width 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Width : APM_XObjectImageSoftMask_Width_Base
{
}


internal partial class APM_XObjectImageSoftMask_Width_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Width";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectImageSoftMask_Width>(obj, "Width", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Height 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Height : APM_XObjectImageSoftMask_Height_Base
{
}


internal partial class APM_XObjectImageSoftMask_Height_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Height";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectImageSoftMask_Height>(obj, "Height", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_ColorSpace 
/// </summary>
internal partial class APM_XObjectImageSoftMask_ColorSpace : APM_XObjectImageSoftMask_ColorSpace_Base
{
}


internal partial class APM_XObjectImageSoftMask_ColorSpace_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_ColorSpace";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_XObjectImageSoftMask_ColorSpace>(obj, "ColorSpace", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "DeviceGray")) 
        {
            ctx.Fail<APM_XObjectImageSoftMask_ColorSpace>($"Invalid value {val}, allowed are: [DeviceGray]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_BitsPerComponent 
/// </summary>
internal partial class APM_XObjectImageSoftMask_BitsPerComponent : APM_XObjectImageSoftMask_BitsPerComponent_Base
{
}


internal partial class APM_XObjectImageSoftMask_BitsPerComponent_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_BitsPerComponent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfIntNumber? val;
        {
            var Filter = obj.Get("Filter");
            var ImageMask = obj.Get("ImageMask");
            if (!(Contains(Filter, "JPXDecode")||eq(ImageMask,"true"))) {
                val = ctx.GetRequired<PdfIntNumber, APM_XObjectImageSoftMask_BitsPerComponent>(obj, "BitsPerComponent", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfIntNumber, APM_XObjectImageSoftMask_BitsPerComponent>(obj, "BitsPerComponent", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        {
        
        var Filter2 = obj.Get("Filter");
        if (!(val == 2 || val == 4 || ctx.Version >= 1.5m && val == 16)) 
        {
            ctx.Fail<APM_XObjectImageSoftMask_BitsPerComponent>($"Invalid value {val}, allowed are: [fn:RequiredValue((fn:Contains(@Filter,CCITTFaxDecode) || fn:Contains(@Filter,JBIG2Decode)),1),2,4,fn:RequiredValue((fn:Contains(@Filter,RunLengthDecode) || fn:Contains(@Filter,DCTDecode)),8),fn:SinceVersion(1.5,16)]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Intent 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Intent : APM_XObjectImageSoftMask_Intent_Base
{
}


internal partial class APM_XObjectImageSoftMask_Intent_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Intent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectImageSoftMask_Intent>(obj, "Intent", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_ImageMask Table 143
/// </summary>
internal partial class APM_XObjectImageSoftMask_ImageMask : APM_XObjectImageSoftMask_ImageMask_Base
{
}


internal partial class APM_XObjectImageSoftMask_ImageMask_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_ImageMask";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_XObjectImageSoftMask_ImageMask>(obj, "ImageMask", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Name 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Name : APM_XObjectImageSoftMask_Name_Base
{
}


internal partial class APM_XObjectImageSoftMask_Name_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectImageSoftMask_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Decode 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Decode : APM_XObjectImageSoftMask_Decode_Base
{
}


internal partial class APM_XObjectImageSoftMask_Decode_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Decode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectImageSoftMask_Decode>(obj, "Decode", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Interpolate 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Interpolate : APM_XObjectImageSoftMask_Interpolate_Base
{
}


internal partial class APM_XObjectImageSoftMask_Interpolate_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Interpolate";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_XObjectImageSoftMask_Interpolate>(obj, "Interpolate", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Matte Table 144
/// </summary>
internal partial class APM_XObjectImageSoftMask_Matte : APM_XObjectImageSoftMask_Matte_Base
{
}


internal partial class APM_XObjectImageSoftMask_Matte_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Matte";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectImageSoftMask_Matte>(obj, "Matte", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Metadata 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Metadata : APM_XObjectImageSoftMask_Metadata_Base
{
}


internal partial class APM_XObjectImageSoftMask_Metadata_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Metadata";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_XObjectImageSoftMask_Metadata>(obj, "Metadata", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Metadata, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Length 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Length : APM_XObjectImageSoftMask_Length_Base
{
}


internal partial class APM_XObjectImageSoftMask_Length_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectImageSoftMask_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageSoftMask_Filter 
/// </summary>
internal partial class APM_XObjectImageSoftMask_Filter : APM_XObjectImageSoftMask_Filter_Base
{
}


internal partial class APM_XObjectImageSoftMask_Filter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageSoftMask_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || val == "CCITTFaxDecode" || val == "JBIG2Decode" || val == "DCTDecode" || ctx.Version >= 1.5m && val == "JPXDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_XObjectImageSoftMask_Filter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,CCITTFaxDecode,JBIG2Decode,DCTDecode,fn:SinceVersion(1.5,JPXDecode),fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageSoftMask_Filter>("Filter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageSoftMask_DecodeParms 
/// </summary>
internal partial class APM_XObjectImageSoftMask_DecodeParms : APM_XObjectImageSoftMask_DecodeParms_Base
{
}


internal partial class APM_XObjectImageSoftMask_DecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_DecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageSoftMask_DecodeParms>(obj, "DecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterCCITTFaxDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterCCITTFaxDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterJBIG2Decode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterJBIG2Decode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterDCTDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterDCTDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectImageSoftMask_DecodeParms>("DecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,FilterCCITTFaxDecode,FilterJBIG2Decode,FilterDCTDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageSoftMask_DecodeParms>("DecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageSoftMask_F 
/// </summary>
internal partial class APM_XObjectImageSoftMask_F : APM_XObjectImageSoftMask_F_Base
{
}


internal partial class APM_XObjectImageSoftMask_F_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageSoftMask_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageSoftMask_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageSoftMask_FFilter 
/// </summary>
internal partial class APM_XObjectImageSoftMask_FFilter : APM_XObjectImageSoftMask_FFilter_Base
{
}


internal partial class APM_XObjectImageSoftMask_FFilter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_FFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageSoftMask_FFilter>(obj, "FFilter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || val == "CCITTFaxDecode" || val == "JBIG2Decode" || val == "DCTDecode" || ctx.Version >= 1.5m && val == "JPXDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_XObjectImageSoftMask_FFilter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,CCITTFaxDecode,JBIG2Decode,DCTDecode,fn:SinceVersion(1.5,JPXDecode),fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageSoftMask_FFilter>("FFilter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageSoftMask_FDecodeParms 
/// </summary>
internal partial class APM_XObjectImageSoftMask_FDecodeParms : APM_XObjectImageSoftMask_FDecodeParms_Base
{
}


internal partial class APM_XObjectImageSoftMask_FDecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_FDecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageSoftMask_FDecodeParms>(obj, "FDecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterCCITTFaxDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterCCITTFaxDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterJBIG2Decode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterJBIG2Decode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterDCTDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterDCTDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectImageSoftMask_FDecodeParms>("FDecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,FilterCCITTFaxDecode,FilterJBIG2Decode,FilterDCTDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageSoftMask_FDecodeParms>("FDecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageSoftMask_DL 
/// </summary>
internal partial class APM_XObjectImageSoftMask_DL : APM_XObjectImageSoftMask_DL_Base
{
}


internal partial class APM_XObjectImageSoftMask_DL_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageSoftMask_DL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectImageSoftMask_DL>(obj, "DL", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

