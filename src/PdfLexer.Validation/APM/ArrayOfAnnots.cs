// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfAnnots : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfAnnots";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfAnnots_x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false; // TODO
    }
}

/// <summary>
/// ArrayOfAnnots_* 
/// </summary>
internal partial class APM_ArrayOfAnnots_x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfAnnots_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=1) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetOptional<PdfDictionary, APM_ArrayOfAnnots_x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            if (APM_AnnotText.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_AnnotText, PdfDictionary>(stack, val, obj);
            } else if (APM_AnnotLink.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_AnnotLink, PdfDictionary>(stack, val, obj);
            }else 
            {
                ctx.Fail<APM_ArrayOfAnnots_x>("n did not match any allowable types: '[AnnotText,AnnotLink,fn:SinceVersion(1.3,AnnotFreeText),fn:SinceVersion(1.3,AnnotLine),fn:SinceVersion(1.3,AnnotSquare),fn:SinceVersion(1.3,AnnotCircle),fn:SinceVersion(1.5,AnnotPolygon),fn:SinceVersion(1.5,AnnotPolyLine),fn:SinceVersion(1.3,AnnotHighlight),fn:SinceVersion(1.3,AnnotUnderline),fn:SinceVersion(1.4,AnnotSquiggly),fn:SinceVersion(1.3,AnnotStrikeOut),fn:SinceVersion(1.5,AnnotCaret),fn:SinceVersion(1.3,AnnotStamp),fn:SinceVersion(1.3,AnnotInk),fn:SinceVersion(1.3,AnnotPopup),fn:SinceVersion(1.3,AnnotFileAttachment),fn:SinceVersion(1.2,AnnotSound),fn:SinceVersion(1.2,AnnotMovie),fn:SinceVersion(1.5,AnnotScreen),fn:SinceVersion(1.2,AnnotWidget),fn:SinceVersion(1.4,AnnotPrinterMark),fn:SinceVersion(1.3,AnnotTrapNetwork),fn:SinceVersion(1.6,AnnotWatermark),fn:SinceVersion(1.6,Annot3D),fn:SinceVersion(1.7,AnnotRedact),fn:IsPDFVersion(1.7,fn:Extension(ADBE_Extn3,AnnotProjection)),fn:SinceVersion(2.0,AnnotProjection),fn:IsPDFVersion(1.7,fn:Extension(ADBE_Extn3,AnnotRichMedia)),fn:SinceVersion(2.0,AnnotRichMedia)]'");
            }
            
        }
    }
}

