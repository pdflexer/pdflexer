// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_XObjectFormTrapNet : APM_XObjectFormTrapNet__Base
{
}

internal partial class APM_XObjectFormTrapNet__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "XObjectFormTrapNet";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_XObjectFormTrapNet_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_FormType, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_BBox, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Matrix, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Resources, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Group, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Ref, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Metadata, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_PieceInfo, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_LastModified, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_StructParents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_OPI, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Measure, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_PtData, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_DecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_FFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_FDecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_DL, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_PCM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_SeparationColorNames, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_TrapRegions, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormTrapNet_TrapStyles, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormTrapNet>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormTrapNet>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormTrapNet>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormTrapNet>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormTrapNet>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormTrapNet>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormTrapNet>($"Unknown field {extra} for version 1.9");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_XObjectFormTrapNet_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "PCM", "SeparationColorNames", "TrapRegions", "TrapStyles"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "PCM", "SeparationColorNames", "TrapRegions", "TrapStyles"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "PCM", "SeparationColorNames", "TrapRegions", "TrapStyles"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "PCM", "SeparationColorNames", "TrapRegions", "TrapStyles"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "PCM", "SeparationColorNames", "TrapRegions", "TrapStyles"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "PCM", "SeparationColorNames", "TrapRegions", "TrapStyles"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL", "PCM", "SeparationColorNames", "TrapRegions", "TrapStyles"
    };
    


}

/// <summary>
/// XObjectFormTrapNet_Type Table 93 and Table 404
/// </summary>
internal partial class APM_XObjectFormTrapNet_Type : APM_XObjectFormTrapNet_Type__Base
{
}


internal partial class APM_XObjectFormTrapNet_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectFormTrapNet_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "XObject")) 
        {
            ctx.Fail<APM_XObjectFormTrapNet_Type>($"Invalid value {val}, allowed are: [XObject]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_Subtype 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Subtype : APM_XObjectFormTrapNet_Subtype__Base
{
}


internal partial class APM_XObjectFormTrapNet_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_XObjectFormTrapNet_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Form")) 
        {
            ctx.Fail<APM_XObjectFormTrapNet_Subtype>($"Invalid value {val}, allowed are: [Form]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_FormType 
/// </summary>
internal partial class APM_XObjectFormTrapNet_FormType : APM_XObjectFormTrapNet_FormType__Base
{
}


internal partial class APM_XObjectFormTrapNet_FormType__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_FormType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormTrapNet_FormType>(obj, "FormType", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 1)) 
        {
            ctx.Fail<APM_XObjectFormTrapNet_FormType>($"Invalid value {val}, allowed are: [1]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_BBox 
/// </summary>
internal partial class APM_XObjectFormTrapNet_BBox : APM_XObjectFormTrapNet_BBox__Base
{
}


internal partial class APM_XObjectFormTrapNet_BBox__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_BBox";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_XObjectFormTrapNet_BBox>(obj, "BBox", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_Matrix 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Matrix : APM_XObjectFormTrapNet_Matrix__Base
{
}


internal partial class APM_XObjectFormTrapNet_Matrix__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Matrix";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectFormTrapNet_Matrix>(obj, "Matrix", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_Resources 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Resources : APM_XObjectFormTrapNet_Resources__Base
{
}


internal partial class APM_XObjectFormTrapNet_Resources__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Resources";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormTrapNet_Resources>(obj, "Resources", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Resource, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormTrapNet_Group 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Group : APM_XObjectFormTrapNet_Group__Base
{
}


internal partial class APM_XObjectFormTrapNet_Group__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Group";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormTrapNet_Group>(obj, "Group", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_GroupAttributes, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormTrapNet_Ref 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Ref : APM_XObjectFormTrapNet_Ref__Base
{
}


internal partial class APM_XObjectFormTrapNet_Ref__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Ref";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormTrapNet_Ref>(obj, "Ref", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Reference, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormTrapNet_Metadata 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Metadata : APM_XObjectFormTrapNet_Metadata__Base
{
}


internal partial class APM_XObjectFormTrapNet_Metadata__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Metadata";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_XObjectFormTrapNet_Metadata>(obj, "Metadata", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Metadata, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// XObjectFormTrapNet_PieceInfo 
/// </summary>
internal partial class APM_XObjectFormTrapNet_PieceInfo : APM_XObjectFormTrapNet_PieceInfo__Base
{
}


internal partial class APM_XObjectFormTrapNet_PieceInfo__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_PieceInfo";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormTrapNet_PieceInfo>(obj, "PieceInfo", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PagePiece, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormTrapNet_LastModified 
/// </summary>
internal partial class APM_XObjectFormTrapNet_LastModified : APM_XObjectFormTrapNet_LastModified__Base
{
}


internal partial class APM_XObjectFormTrapNet_LastModified__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_LastModified";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var val = ctx.GetOptional<PdfString, APM_XObjectFormTrapNet_LastModified>(obj, "LastModified", IndirectRequirement.Either);
        if ((obj.ContainsKey(val)) && val == null) {
            ctx.Fail<APM_XObjectFormTrapNet_LastModified>("LastModified is required when 'fn:IsRequired(fn:IsPresent(PieceInfo))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_StructParent Table 359
/// </summary>
internal partial class APM_XObjectFormTrapNet_StructParent : APM_XObjectFormTrapNet_StructParent__Base
{
}


internal partial class APM_XObjectFormTrapNet_StructParent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormTrapNet_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_StructParents Table 359
/// </summary>
internal partial class APM_XObjectFormTrapNet_StructParents : APM_XObjectFormTrapNet_StructParents__Base
{
}


internal partial class APM_XObjectFormTrapNet_StructParents__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_StructParents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormTrapNet_StructParents>(obj, "StructParents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_OPI 
/// </summary>
internal partial class APM_XObjectFormTrapNet_OPI : APM_XObjectFormTrapNet_OPI__Base
{
}


internal partial class APM_XObjectFormTrapNet_OPI__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_OPI";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormTrapNet_OPI>(obj, "OPI", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OPIVersion13.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion13, PdfDictionary>(stack, val, obj);
        } else if (APM_OPIVersion20.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion20, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectFormTrapNet_OPI>("OPI did not match any allowable types: '[OPIVersion13,OPIVersion20]'");
        }
        
    }


}

/// <summary>
/// XObjectFormTrapNet_OC 
/// </summary>
internal partial class APM_XObjectFormTrapNet_OC : APM_XObjectFormTrapNet_OC__Base
{
}


internal partial class APM_XObjectFormTrapNet_OC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormTrapNet_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectFormTrapNet_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// XObjectFormTrapNet_Name 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Name : APM_XObjectFormTrapNet_Name__Base
{
}


internal partial class APM_XObjectFormTrapNet_Name__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectFormTrapNet_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_AF 
/// </summary>
internal partial class APM_XObjectFormTrapNet_AF : APM_XObjectFormTrapNet_AF__Base
{
}


internal partial class APM_XObjectFormTrapNet_AF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormTrapNet_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormTrapNet_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormTrapNet_Measure 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Measure : APM_XObjectFormTrapNet_Measure__Base
{
}


internal partial class APM_XObjectFormTrapNet_Measure__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Measure";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormTrapNet_Measure>(obj, "Measure", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_MeasureRL, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormTrapNet_PtData 
/// </summary>
internal partial class APM_XObjectFormTrapNet_PtData : APM_XObjectFormTrapNet_PtData__Base
{
}


internal partial class APM_XObjectFormTrapNet_PtData__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_PtData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormTrapNet_PtData>(obj, "PtData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PointData, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormTrapNet_Length 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Length : APM_XObjectFormTrapNet_Length__Base
{
}


internal partial class APM_XObjectFormTrapNet_Length__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectFormTrapNet_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_Filter 
/// </summary>
internal partial class APM_XObjectFormTrapNet_Filter : APM_XObjectFormTrapNet_Filter__Base
{
}


internal partial class APM_XObjectFormTrapNet_Filter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormTrapNet_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var DecodeParms = obj.Get("DecodeParms");
                    var Filter = obj.Get("Filter");
                    if (!(eq(((DecodeParms as PdfArray)?.Count),((Filter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_XObjectFormTrapNet_Filter>($"Value failed special case check: fn:Eval(fn:ArrayLength(DecodeParms)==fn:ArrayLength(Filter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || (ctx.Version >= 1.5m && val == "Crypt"))) 
                    {
                        ctx.Fail<APM_XObjectFormTrapNet_Filter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormTrapNet_Filter>("Filter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormTrapNet_DecodeParms 
/// </summary>
internal partial class APM_XObjectFormTrapNet_DecodeParms : APM_XObjectFormTrapNet_DecodeParms__Base
{
}


internal partial class APM_XObjectFormTrapNet_DecodeParms__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_DecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormTrapNet_DecodeParms>(obj, "DecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var DecodeParms = obj.Get("DecodeParms");
                    var Filter = obj.Get("Filter");
                    if (!(eq(((DecodeParms as PdfArray)?.Count),((Filter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_XObjectFormTrapNet_DecodeParms>($"Value failed special case check: fn:Eval(fn:ArrayLength(DecodeParms)==fn:ArrayLength(Filter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_FilterCrypt.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterCrypt, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectFormTrapNet_DecodeParms>("DecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormTrapNet_DecodeParms>("DecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormTrapNet_F 
/// </summary>
internal partial class APM_XObjectFormTrapNet_F : APM_XObjectFormTrapNet_F__Base
{
}


internal partial class APM_XObjectFormTrapNet_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormTrapNet_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormTrapNet_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormTrapNet_FFilter 
/// </summary>
internal partial class APM_XObjectFormTrapNet_FFilter : APM_XObjectFormTrapNet_FFilter__Base
{
}


internal partial class APM_XObjectFormTrapNet_FFilter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_FFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormTrapNet_FFilter>(obj, "FFilter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var FDecodeParms = obj.Get("FDecodeParms");
                    var FFilter = obj.Get("FFilter");
                    if (!(eq(((FDecodeParms as PdfArray)?.Count),((FFilter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_XObjectFormTrapNet_FFilter>($"Value failed special case check: fn:Eval(fn:ArrayLength(FDecodeParms)==fn:ArrayLength(FFilter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || (ctx.Version >= 1.5m && val == "Crypt"))) 
                    {
                        ctx.Fail<APM_XObjectFormTrapNet_FFilter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormTrapNet_FFilter>("FFilter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormTrapNet_FDecodeParms 
/// </summary>
internal partial class APM_XObjectFormTrapNet_FDecodeParms : APM_XObjectFormTrapNet_FDecodeParms__Base
{
}


internal partial class APM_XObjectFormTrapNet_FDecodeParms__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_FDecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormTrapNet_FDecodeParms>(obj, "FDecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var FDecodeParms = obj.Get("FDecodeParms");
                    var FFilter = obj.Get("FFilter");
                    if (!(eq(((FDecodeParms as PdfArray)?.Count),((FFilter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_XObjectFormTrapNet_FDecodeParms>($"Value failed special case check: fn:Eval(fn:ArrayLength(FDecodeParms)==fn:ArrayLength(FFilter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_FilterCrypt.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterCrypt, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectFormTrapNet_FDecodeParms>("FDecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormTrapNet_FDecodeParms>("FDecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormTrapNet_DL 
/// </summary>
internal partial class APM_XObjectFormTrapNet_DL : APM_XObjectFormTrapNet_DL__Base
{
}


internal partial class APM_XObjectFormTrapNet_DL__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_DL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormTrapNet_DL>(obj, "DL", IndirectRequirement.Either);
        if (val == null) { return; }
        var DL = obj.Get("DL");
        if (!(gte(DL,0))) 
        {
            ctx.Fail<APM_XObjectFormTrapNet_DL>($"Value failed special case check: fn:Eval(@DL>=0)");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_PCM Table 404
/// </summary>
internal partial class APM_XObjectFormTrapNet_PCM : APM_XObjectFormTrapNet_PCM__Base
{
}


internal partial class APM_XObjectFormTrapNet_PCM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_PCM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_XObjectFormTrapNet_PCM>(obj, "PCM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "DeviceGray" || val == "DeviceRGB" || val == "DeviceCMYK" || val == "DeviceCMY" || val == "DeviceRGBK" || val == "DeviceN")) 
        {
            ctx.Fail<APM_XObjectFormTrapNet_PCM>($"Invalid value {val}, allowed are: [DeviceGray,DeviceRGB,DeviceCMYK,DeviceCMY,DeviceRGBK,DeviceN]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormTrapNet_SeparationColorNames Table 404
/// </summary>
internal partial class APM_XObjectFormTrapNet_SeparationColorNames : APM_XObjectFormTrapNet_SeparationColorNames__Base
{
}


internal partial class APM_XObjectFormTrapNet_SeparationColorNames__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_SeparationColorNames";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectFormTrapNet_SeparationColorNames>(obj, "SeparationColorNames", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNamesGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormTrapNet_TrapRegions Table 404
/// </summary>
internal partial class APM_XObjectFormTrapNet_TrapRegions : APM_XObjectFormTrapNet_TrapRegions__Base
{
}


internal partial class APM_XObjectFormTrapNet_TrapRegions__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_TrapRegions";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectFormTrapNet_TrapRegions>(obj, "TrapRegions", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfTrapRegions, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormTrapNet_TrapStyles Table 404
/// </summary>
internal partial class APM_XObjectFormTrapNet_TrapStyles : APM_XObjectFormTrapNet_TrapStyles__Base
{
}


internal partial class APM_XObjectFormTrapNet_TrapStyles__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormTrapNet_TrapStyles";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_XObjectFormTrapNet_TrapStyles>(obj, "TrapStyles", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

