// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Thread : APM_Thread__Base
{
}

internal partial class APM_Thread__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Thread";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Thread_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Thread_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Thread_I, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Thread_Metadata, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.1m:
            case 1.2m:
            case 1.3m:
            case 1.4m:
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11_12_13_14_15_16_17_18_19.Contains(x)))
                {
                    ctx.Fail<APM_Thread>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_Thread>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_Thread_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_11_12_13_14_15_16_17_18_19 { get; } = new List<string> 
    {
        "F", "I", "Type"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "F", "I", "Metadata", "Type"
    };
    


}

/// <summary>
/// Thread_Type Table 162
/// </summary>
internal partial class APM_Thread_Type : APM_Thread_Type__Base
{
}


internal partial class APM_Thread_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Thread_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_Thread_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Thread)) 
        {
            ctx.Fail<APM_Thread_Type>($"Invalid value {val}, allowed are: [Thread]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// Thread_F 
/// </summary>
internal partial class APM_Thread_F : APM_Thread_F__Base
{
}


internal partial class APM_Thread_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Thread_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfDictionary, APM_Thread_F>(obj, "F", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_BeadFirst, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Thread_I 
/// </summary>
internal partial class APM_Thread_I : APM_Thread_I__Base
{
}


internal partial class APM_Thread_I__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Thread_I";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_Thread_I>(obj, "I", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DocInfo, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Thread_Metadata 
/// </summary>
internal partial class APM_Thread_Metadata : APM_Thread_Metadata__Base
{
}


internal partial class APM_Thread_Metadata__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Thread_Metadata";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfStream, APM_Thread_Metadata>(obj, "Metadata", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Metadata, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

