// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_FontType0 : APM_FontType0__Base
{
}

internal partial class APM_FontType0__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "FontType0";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_FontType0_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontType0_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontType0_BaseFont, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontType0_Encoding, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontType0_DescendantFonts, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FontType0_ToUnicode, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_FontType0>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_FontType0>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_FontType0>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_FontType0>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_FontType0>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_FontType0>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_FontType0>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_FontType0>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_FontType0>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_FontType0_Type, PdfDictionary>(new CallStack(), obj, null);
        c.Run<APM_FontType0_Subtype, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "Encoding", "DescendantFonts", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "Encoding", "DescendantFonts", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "Encoding", "DescendantFonts", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "Encoding", "DescendantFonts", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "Encoding", "DescendantFonts", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "Encoding", "DescendantFonts", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "Encoding", "DescendantFonts", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "Encoding", "DescendantFonts", "ToUnicode"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "BaseFont", "Encoding", "DescendantFonts", "ToUnicode"
    };
    


}

/// <summary>
/// FontType0_Type Table 119
/// </summary>
internal partial class APM_FontType0_Type : APM_FontType0_Type__Base
{
}


internal partial class APM_FontType0_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontType0_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_FontType0_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Font)) 
        {
            ctx.Fail<APM_FontType0_Type>($"Invalid value {val}, allowed are: [Font]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FontType0_Subtype 
/// </summary>
internal partial class APM_FontType0_Subtype : APM_FontType0_Subtype__Base
{
}


internal partial class APM_FontType0_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontType0_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_FontType0_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Type0)) 
        {
            ctx.Fail<APM_FontType0_Subtype>($"Invalid value {val}, allowed are: [Type0]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FontType0_BaseFont 
/// </summary>
internal partial class APM_FontType0_BaseFont : APM_FontType0_BaseFont__Base
{
}


internal partial class APM_FontType0_BaseFont__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontType0_BaseFont";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_FontType0_BaseFont>(obj, "BaseFont", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// FontType0_Encoding Table 116
/// </summary>
internal partial class APM_FontType0_Encoding : APM_FontType0_Encoding__Base
{
}


internal partial class APM_FontType0_Encoding__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontType0_Encoding";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_FontType0_Encoding>(obj, "Encoding", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_FontType0_Encoding>("Encoding is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == PdfName.GBEUCH || val == PdfName.GBEUCV || val == PdfName.GBpcEUCH || val == PdfName.GBpcEUCV || val == PdfName.GBKEUCH || val == PdfName.GBKEUCV || val == PdfName.GBKpEUCH || val == PdfName.GBKpEUCV || val == PdfName.GBK2KH || val == PdfName.GBK2KV || val == PdfName.UniGBUCS2H || val == PdfName.UniGBUCS2V || val == PdfName.UniGBUTF16H || val == PdfName.UniGBUTF16V || val == PdfName.B5pcH || val == PdfName.B5pcV || val == PdfName.HKscsB5H || val == PdfName.HKscsB5V || val == PdfName.ETenB5H || val == PdfName.ETenB5V || val == PdfName.ETenmsB5H || val == PdfName.ETenmsB5V || val == PdfName.CNSEUCH || val == PdfName.CNSEUCV || val == PdfName.UniCNSUCS2H || val == PdfName.UniCNSUCS2V || val == PdfName.UniCNSUTF16H || val == PdfName.UniCNSUTF16V || val == PdfName.N83pvRKSJH || val == PdfName.N90msRKSJH || val == PdfName.N90msRKSJV || val == PdfName.N90mspRKSJH || val == PdfName.N90mspRKSJV || val == PdfName.N90pvRKSJH || val == PdfName.AddRKSJH || val == PdfName.AddRKSJV || val == PdfName.EUCH || val == PdfName.EUCV || val == PdfName.ExtRKSJH || val == PdfName.ExtRKSJV || val == PdfName.H || val == PdfName.V || val == PdfName.UniJISUCS2H || val == PdfName.UniJISUCS2V || val == PdfName.UniJISUCS2HWH || val == PdfName.UniJISUCS2HWV || val == PdfName.UniJISUTF16H || val == PdfName.UniJISUTF16V || val == PdfName.KSCEUCH || val == PdfName.KSCEUCV || val == PdfName.KSCmsUHCH || val == PdfName.KSCmsUHCV || val == PdfName.KSCmsUHCHWH || val == PdfName.KSCmsUHCHWV || val == PdfName.KSCpcEUCH || val == PdfName.UniKSUCS2H || val == PdfName.UniKSUCS2V || val == PdfName.UniKSUTF16H || val == PdfName.UniKSUTF16V || val == PdfName.IdentityH || val == PdfName.IdentityV)) 
                    {
                        ctx.Fail<APM_FontType0_Encoding>($"Invalid value {val}, allowed are: [GB-EUC-H,GB-EUC-V,GBpc-EUC-H,GBpc-EUC-V,GBK-EUC-H,GBK-EUC-V,GBKp-EUC-H,GBKp-EUC-V,GBK2K-H,GBK2K-V,UniGB-UCS2-H,UniGB-UCS2-V,UniGB-UTF16-H,UniGB-UTF16-V,B5pc-H,B5pc-V,HKscs-B5-H,HKscs-B5-V,ETen-B5-H,ETen-B5-V,ETenms-B5-H,ETenms-B5-V,CNS-EUC-H,CNS-EUC-V,UniCNS-UCS2-H,UniCNS-UCS2-V,UniCNS-UTF16-H,UniCNS-UTF16-V,83pv-RKSJ-H,90ms-RKSJ-H,90ms-RKSJ-V,90msp-RKSJ-H,90msp-RKSJ-V,90pv-RKSJ-H,Add-RKSJ-H,Add-RKSJ-V,EUC-H,EUC-V,Ext-RKSJ-H,Ext-RKSJ-V,H,V,UniJIS-UCS2-H,UniJIS-UCS2-V,UniJIS-UCS2-HW-H,UniJIS-UCS2-HW-V,UniJIS-UTF16-H,UniJIS-UTF16-V,KSC-EUC-H,KSC-EUC-V,KSCms-UHC-H,KSCms-UHC-V,KSCms-UHC-HW-H,KSCms-UHC-HW-V,KSCpc-EUC-H,UniKS-UCS2-H,UniKS-UCS2-V,UniKS-UTF16-H,UniKS-UTF16-V,Identity-H,Identity-V]");
                    }
                    // no linked objects
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_FontType0_Encoding>("Encoding is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_CMapStream, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_FontType0_Encoding>("Encoding is required to one of 'name;stream', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// FontType0_DescendantFonts 
/// </summary>
internal partial class APM_FontType0_DescendantFonts : APM_FontType0_DescendantFonts__Base
{
}


internal partial class APM_FontType0_DescendantFonts__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontType0_DescendantFonts";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_FontType0_DescendantFonts>(obj, "DescendantFonts", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfDescendantFonts, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FontType0_ToUnicode 
/// </summary>
internal partial class APM_FontType0_ToUnicode : APM_FontType0_ToUnicode__Base
{
}


internal partial class APM_FontType0_ToUnicode__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FontType0_ToUnicode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_FontType0_ToUnicode>(obj, "ToUnicode", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

