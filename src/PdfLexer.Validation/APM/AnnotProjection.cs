// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AnnotProjection : APM_AnnotProjection__Base
{
}

internal partial class APM_AnnotProjection__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AnnotProjection";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AnnotProjection_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_Rect, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_Contents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_NM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_M, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_AP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_AS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_Border, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_ca, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_CA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_BM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_Lang, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_T, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_Popup, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_RC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_CreationDate, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_IRT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_Subj, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_RT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_IT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotProjection_ExData, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
            case 1.8m:
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17_18_19.Contains(x)))
                {
                    ctx.Fail<APM_AnnotProjection>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_AnnotProjection>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_AnnotProjection_Type, PdfDictionary>(new CallStack(), obj, null);
        c.Run<APM_AnnotProjection_Subtype, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_17_18_19 { get; } = new HashSet<string> 
    {
        "AP", "AS", "Border", "C", "CA", "Contents", "CreationDate", "ExData", "F", "IRT", "IT", "M", "NM", "OC", "P", "Popup", "RC", "Rect", "RT", "StructParent", "Subj", "Subtype", "T", "Type"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "AF", "AP", "AS", "BM", "Border", "C", "ca", "CA", "Contents", "CreationDate", "ExData", "F", "IRT", "IT", "Lang", "M", "NM", "OC", "P", "Popup", "RC", "Rect", "RT", "StructParent", "Subj", "Subtype", "T", "Type"
    };
    


}

/// <summary>
/// AnnotProjection_Type Table 166 and Table 172 and Clause 12.5.6.24 (markup annot)
/// </summary>
internal partial class APM_AnnotProjection_Type : APM_AnnotProjection_Type__Base
{
}


internal partial class APM_AnnotProjection_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotProjection_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Annot)) 
        {
            ctx.Fail<APM_AnnotProjection_Type>($"Invalid value {val}, allowed are: [Annot]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_Subtype 
/// </summary>
internal partial class APM_AnnotProjection_Subtype : APM_AnnotProjection_Subtype__Base
{
}


internal partial class APM_AnnotProjection_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_AnnotProjection_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Projection)) 
        {
            ctx.Fail<APM_AnnotProjection_Subtype>($"Invalid value {val}, allowed are: [Projection]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_Rect 
/// </summary>
internal partial class APM_AnnotProjection_Rect : APM_AnnotProjection_Rect__Base
{
}


internal partial class APM_AnnotProjection_Rect__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_Rect";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_AnnotProjection_Rect>(obj, "Rect", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_Contents 
/// </summary>
internal partial class APM_AnnotProjection_Contents : APM_AnnotProjection_Contents__Base
{
}


internal partial class APM_AnnotProjection_Contents__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_Contents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotProjection_Contents>(obj, "Contents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_P 
/// </summary>
internal partial class APM_AnnotProjection_P : APM_AnnotProjection_P__Base
{
}


internal partial class APM_AnnotProjection_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotProjection_P>(obj, "P", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PageObject, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotProjection_NM 
/// </summary>
internal partial class APM_AnnotProjection_NM : APM_AnnotProjection_NM__Base
{
}


internal partial class APM_AnnotProjection_NM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_NM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotProjection_NM>(obj, "NM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_M 
/// </summary>
internal partial class APM_AnnotProjection_M : APM_AnnotProjection_M__Base
{
}


internal partial class APM_AnnotProjection_M__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotProjection_M>(obj, "M", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    if (IsDate(val)) 
                    {
                        // date
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        // no linked objects
                    } else if (true) 
                    {
                        // string-text
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        // no linked objects
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotProjection_M>("M is required to one of 'date;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotProjection_F Table 167
/// </summary>
internal partial class APM_AnnotProjection_F : APM_AnnotProjection_F__Base
{
}


internal partial class APM_AnnotProjection_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_AnnotProjection_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(BitsClear(val,0b11111111111111111111110000000000))) 
        {
            ctx.Fail<APM_AnnotProjection_F>($"Value failed special case check: fn:Eval(fn:BitsClear(11,32))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_AP 
/// </summary>
internal partial class APM_AnnotProjection_AP : APM_AnnotProjection_AP__Base
{
}


internal partial class APM_AnnotProjection_AP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_AP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotProjection_AP>(obj, "AP", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Appearance, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotProjection_AS 
/// </summary>
internal partial class APM_AnnotProjection_AS : APM_AnnotProjection_AS__Base
{
}


internal partial class APM_AnnotProjection_AS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_AS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var APN = obj.Get("AP")?.Get("N");
        var APR = obj.Get("AP")?.Get("R");
        var APD = obj.Get("AP")?.Get("D");
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotProjection_AS>(obj, "AS", IndirectRequirement.Either);
        if (((APN != null)||(APR != null)||(APD != null)) && val == null) {
            ctx.Fail<APM_AnnotProjection_AS>("AS is required when 'fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_Border 
/// </summary>
internal partial class APM_AnnotProjection_Border : APM_AnnotProjection_Border__Base
{
}


internal partial class APM_AnnotProjection_Border__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_Border";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_AnnotProjection_Border>(obj, "Border", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4AnnotBorderCharacteristics, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotProjection_C 
/// </summary>
internal partial class APM_AnnotProjection_C : APM_AnnotProjection_C__Base
{
}


internal partial class APM_AnnotProjection_C__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_AnnotProjection_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4NumbersColorAnnotation, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotProjection_StructParent Table 359
/// </summary>
internal partial class APM_AnnotProjection_StructParent : APM_AnnotProjection_StructParent__Base
{
}


internal partial class APM_AnnotProjection_StructParent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_AnnotProjection_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_OC 
/// </summary>
internal partial class APM_AnnotProjection_OC : APM_AnnotProjection_OC__Base
{
}


internal partial class APM_AnnotProjection_OC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotProjection_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotProjection_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// AnnotProjection_AF 
/// </summary>
internal partial class APM_AnnotProjection_AF : APM_AnnotProjection_AF__Base
{
}


internal partial class APM_AnnotProjection_AF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotProjection_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotProjection_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotProjection_ca 
/// </summary>
internal partial class APM_AnnotProjection_ca : APM_AnnotProjection_ca__Base
{
}


internal partial class APM_AnnotProjection_ca__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_ca";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_AnnotProjection_ca>(obj, "ca", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var ca = obj.Get("ca");
        if (!((gte(ca,0.0m)&&lte(ca,1.0m)))) 
        {
            ctx.Fail<APM_AnnotProjection_ca>($"Invalid value {val}, allowed are: [fn:Eval((@ca>=0.0) && (@ca<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_CA 
/// </summary>
internal partial class APM_AnnotProjection_CA : APM_AnnotProjection_CA__Base
{
}


internal partial class APM_AnnotProjection_CA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_CA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_AnnotProjection_CA>(obj, "CA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var CA = obj.Get("CA");
        if (!((gte(CA,0.0m)&&lte(CA,1.0m)))) 
        {
            ctx.Fail<APM_AnnotProjection_CA>($"Invalid value {val}, allowed are: [fn:Eval((@CA>=0.0) && (@CA<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_BM Table 134 and Table 135
/// </summary>
internal partial class APM_AnnotProjection_BM : APM_AnnotProjection_BM__Base
{
}


internal partial class APM_AnnotProjection_BM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_BM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotProjection_BM>(obj, "BM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!((ctx.Version < 1.4m && val == PdfName.Compatible) || val == PdfName.Normal || val == PdfName.Multiply || val == PdfName.Screen || val == PdfName.Difference || val == PdfName.Darken || val == PdfName.Lighten || val == PdfName.ColorDodge || val == PdfName.ColorBurn || val == PdfName.Exclusion || val == PdfName.HardLight || val == PdfName.Overlay || val == PdfName.SoftLight || val == PdfName.Luminosity || val == PdfName.Hue || val == PdfName.Saturation || val == PdfName.Color)) 
        {
            ctx.Fail<APM_AnnotProjection_BM>($"Invalid value {val}, allowed are: [fn:Deprecated(1.4,Compatible),Normal,Multiply,Screen,Difference,Darken,Lighten,ColorDodge,ColorBurn,Exclusion,HardLight,Overlay,SoftLight,Luminosity,Hue,Saturation,Color]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_Lang 
/// </summary>
internal partial class APM_AnnotProjection_Lang : APM_AnnotProjection_Lang__Base
{
}


internal partial class APM_AnnotProjection_Lang__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_Lang";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotProjection_Lang>(obj, "Lang", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_T 
/// </summary>
internal partial class APM_AnnotProjection_T : APM_AnnotProjection_T__Base
{
}


internal partial class APM_AnnotProjection_T__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotProjection_T>(obj, "T", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_Popup 
/// </summary>
internal partial class APM_AnnotProjection_Popup : APM_AnnotProjection_Popup__Base
{
}


internal partial class APM_AnnotProjection_Popup__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_Popup";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotProjection_Popup>(obj, "Popup", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_AnnotPopup, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotProjection_RC 
/// </summary>
internal partial class APM_AnnotProjection_RC : APM_AnnotProjection_RC__Base
{
}


internal partial class APM_AnnotProjection_RC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_RC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotProjection_RC>(obj, "RC", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_AnnotProjection_RC>("RC is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotProjection_RC>("RC is required to one of 'stream;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotProjection_CreationDate 
/// </summary>
internal partial class APM_AnnotProjection_CreationDate : APM_AnnotProjection_CreationDate__Base
{
}


internal partial class APM_AnnotProjection_CreationDate__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_CreationDate";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotProjection_CreationDate>(obj, "CreationDate", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_IRT 
/// </summary>
internal partial class APM_AnnotProjection_IRT : APM_AnnotProjection_IRT__Base
{
}


internal partial class APM_AnnotProjection_IRT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_IRT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotProjection_IRT>(obj, "IRT", IndirectRequirement.Either);
        if ((obj.ContainsKey(PdfName.RT)) && val == null) {
            ctx.Fail<APM_AnnotProjection_IRT>("IRT is required when 'fn:IsRequired(fn:IsPresent(RT))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        if (APM_AnnotText.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotText, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotLink.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotLink, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotFreeText.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotFreeText, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotLine.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotLine, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSquare.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSquare, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotCircle.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotCircle, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPolygon.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPolygon, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotHighlight.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotHighlight, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotUnderline.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotUnderline, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSquiggly.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSquiggly, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotStrikeOut.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotStrikeOut, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotCaret.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotCaret, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotStamp.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotStamp, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotInk.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotInk, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPopup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPopup, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotFileAttachment.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotFileAttachment, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSound.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSound, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotMovie.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotMovie, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotScreen.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotScreen, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotWidget.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotWidget, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPrinterMark.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPrinterMark, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotWatermark.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotWatermark, PdfDictionary>(stack, val, obj);
        } else if (APM_Annot3D.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_Annot3D, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotRedact.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotRedact, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotProjection.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotProjection, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotRichMedia.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotRichMedia, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotProjection_IRT>("IRT did not match any allowable types: '[AnnotText,AnnotLink,AnnotFreeText,AnnotLine,AnnotSquare,AnnotCircle,AnnotPolygon,AnnotHighlight,AnnotUnderline,AnnotSquiggly,AnnotStrikeOut,AnnotCaret,AnnotStamp,AnnotInk,AnnotPopup,AnnotFileAttachment,AnnotSound,AnnotMovie,AnnotScreen,AnnotWidget,AnnotPrinterMark,AnnotWatermark,Annot3D,AnnotRedact,AnnotProjection,AnnotRichMedia]'");
        }
        
    }


}

/// <summary>
/// AnnotProjection_Subj 
/// </summary>
internal partial class APM_AnnotProjection_Subj : APM_AnnotProjection_Subj__Base
{
}


internal partial class APM_AnnotProjection_Subj__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_Subj";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AnnotProjection_Subj>(obj, "Subj", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_RT 
/// </summary>
internal partial class APM_AnnotProjection_RT : APM_AnnotProjection_RT__Base
{
}


internal partial class APM_AnnotProjection_RT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_RT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotProjection_RT>(obj, "RT", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        
        
        if (!(val == PdfName.R || val == PdfName.Group)) 
        {
            ctx.Fail<APM_AnnotProjection_RT>($"Invalid value {val}, allowed are: [R,Group]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_IT 
/// </summary>
internal partial class APM_AnnotProjection_IT : APM_AnnotProjection_IT__Base
{
}


internal partial class APM_AnnotProjection_IT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_IT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_AnnotProjection_IT>(obj, "IT", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotProjection_ExData 2D markup annots only
/// </summary>
internal partial class APM_AnnotProjection_ExData : APM_AnnotProjection_ExData__Base
{
}


internal partial class APM_AnnotProjection_ExData__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotProjection_ExData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AnnotProjection_ExData>(obj, "ExData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_ExData3DMarkup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ExData3DMarkup, PdfDictionary>(stack, val, obj);
        } else if (APM_ExDataMarkupGeo.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ExDataMarkupGeo, PdfDictionary>(stack, val, obj);
        } else if (APM_ExDataProjection.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ExDataProjection, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotProjection_ExData>("ExData did not match any allowable types: '[ExData3DMarkup,ExDataMarkupGeo,ExDataProjection]'");
        }
        
    }


}

