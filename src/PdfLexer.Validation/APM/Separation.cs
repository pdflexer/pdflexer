// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Separation : APM_Separation__Base
{
}

internal partial class APM_Separation__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Separation";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Separation_Pages, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Separation_DeviceColorant, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Separation_ColorSpace, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_Separation>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_Separation>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_Separation>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_Separation>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_Separation>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_Separation>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_Separation>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_Separation>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_13 { get; } = new List<string> 
    {
        "Pages", "DeviceColorant", "ColorSpace"
    };
    public static List<string> AllowedFields_14 { get; } = new List<string> 
    {
        "Pages", "DeviceColorant", "ColorSpace"
    };
    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "Pages", "DeviceColorant", "ColorSpace"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "Pages", "DeviceColorant", "ColorSpace"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Pages", "DeviceColorant", "ColorSpace"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Pages", "DeviceColorant", "ColorSpace"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Pages", "DeviceColorant", "ColorSpace"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Pages", "DeviceColorant", "ColorSpace"
    };
    


}

/// <summary>
/// Separation_Pages Table 400
/// </summary>
internal partial class APM_Separation_Pages : APM_Separation_Pages__Base
{
}


internal partial class APM_Separation_Pages__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Separation_Pages";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_Separation_Pages>(obj, "Pages", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfPages, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// Separation_DeviceColorant 
/// </summary>
internal partial class APM_Separation_DeviceColorant : APM_Separation_DeviceColorant__Base
{
}


internal partial class APM_Separation_DeviceColorant__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Separation_DeviceColorant";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Separation_DeviceColorant>(obj, "DeviceColorant", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_Separation_DeviceColorant>("DeviceColorant is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_Separation_DeviceColorant>("DeviceColorant is required to one of 'name;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Separation_ColorSpace 
/// </summary>
internal partial class APM_Separation_ColorSpace : APM_Separation_ColorSpace__Base
{
}


internal partial class APM_Separation_ColorSpace__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Separation_ColorSpace";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_Separation_ColorSpace>(obj, "ColorSpace", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_SeparationColorSpace.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_SeparationColorSpace, PdfArray>(stack, val, obj);
        } else if (APM_DeviceNColorSpace.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_DeviceNColorSpace, PdfArray>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_Separation_ColorSpace>("ColorSpace did not match any allowable types: '[SeparationColorSpace,DeviceNColorSpace]'");
        }
        
    }


}

