// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_DictionaryOfFunctions : APM_DictionaryOfFunctions_Base
{
}

internal partial class APM_DictionaryOfFunctions_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "DictionaryOfFunctions";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_DictionaryOfFunctions_Default, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DictionaryOfFunctions_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    


}

/// <summary>
/// DictionaryOfFunctions_Default Table 72, DotGain
/// </summary>
internal partial class APM_DictionaryOfFunctions_Default : APM_DictionaryOfFunctions_Default_Base
{
}


internal partial class APM_DictionaryOfFunctions_Default_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DictionaryOfFunctions_Default";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_DictionaryOfFunctions_Default>(obj, "Default", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FunctionType2.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FunctionType2, PdfDictionary>(stack, val, obj);
                    } else if (APM_FunctionType3.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FunctionType3, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_DictionaryOfFunctions_Default>("Default did not match any allowable types: '[FunctionType2,FunctionType3]'");
                    }
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_DictionaryOfFunctions_Default>("Default is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    if (APM_FunctionType0.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_FunctionType0, PdfDictionary>(stack, val.Dictionary, obj);
                    } else if (APM_FunctionType4.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_FunctionType4, PdfDictionary>(stack, val.Dictionary, obj);
                    }else 
                    {
                        ctx.Fail<APM_DictionaryOfFunctions_Default>("Default did not match any allowable types: '[FunctionType0,FunctionType4]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_DictionaryOfFunctions_Default>("Default is required to one of 'dictionary;stream', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// DictionaryOfFunctions_* 
/// </summary>
internal partial class APM_DictionaryOfFunctions_CatchAll : APM_DictionaryOfFunctions_CatchAll_Base
{
}


internal partial class APM_DictionaryOfFunctions_CatchAll_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DictionaryOfFunctions_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var (utval, wasIR) = ctx.GetOptional<APM_DictionaryOfFunctions_CatchAll>(obj, key, IndirectRequirement.Either);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                case PdfObjectType.DictionaryObj:
                    {
                        var val =  (PdfDictionary)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        if (APM_FunctionType2.MatchesType(ctx, val)) 
                        {
                            ctx.Run<APM_FunctionType2, PdfDictionary>(stack, val, obj);
                        } else if (APM_FunctionType3.MatchesType(ctx, val)) 
                        {
                            ctx.Run<APM_FunctionType3, PdfDictionary>(stack, val, obj);
                        }else 
                        {
                            ctx.Fail<APM_DictionaryOfFunctions_CatchAll>("CatchAll did not match any allowable types: '[FunctionType2,FunctionType3]'");
                        }
                        return;
                    }
                case PdfObjectType.StreamObj:
                    {
                        var val =  (PdfStream)utval;
                        if (!wasIR) { ctx.Fail<APM_DictionaryOfFunctions_CatchAll>("* is required to be indirect when a stream"); return; }
                        // no special cases
                        // no value restrictions
                        if (APM_FunctionType0.MatchesType(ctx, val.Dictionary)) 
                        {
                            ctx.Run<APM_FunctionType0, PdfDictionary>(stack, val.Dictionary, obj);
                        } else if (APM_FunctionType4.MatchesType(ctx, val.Dictionary)) 
                        {
                            ctx.Run<APM_FunctionType4, PdfDictionary>(stack, val.Dictionary, obj);
                        }else 
                        {
                            ctx.Fail<APM_DictionaryOfFunctions_CatchAll>("CatchAll did not match any allowable types: '[FunctionType0,FunctionType4]'");
                        }
                        return;
                    }
                
                default:
                    ctx.Fail<APM_DictionaryOfFunctions_CatchAll>("* is required to one of 'dictionary;stream', was " + utval.Type);
                    return;
            }
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> { "Default" };
}

