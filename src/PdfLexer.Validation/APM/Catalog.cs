// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Catalog : APM_Catalog__Base
{
}

internal partial class APM_Catalog__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Catalog";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Catalog_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Version, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Extensions, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Pages, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_PageLabels, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Names, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Dests, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_ViewerPreferences, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_PageLayout, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_PageMode, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Outlines, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Threads, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_OpenAction, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_AA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_URI, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_AcroForm, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Metadata, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_StructTreeRoot, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_MarkInfo, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Lang, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_SpiderInfo, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_OutputIntents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_PieceInfo, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_OCProperties, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Perms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Legal, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Requirements, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_Collection, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_NeedsRendering, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_DSS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Catalog_DPartRoot, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.0");
                }
                break;
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_Catalog>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_Catalog_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_10 { get; } = new HashSet<string> 
    {
        "Type", "Pages", "PageLayout", "PageMode", "Outlines", "NeedsRendering"
    };
    public static HashSet<string> AllowedFields_11 { get; } = new HashSet<string> 
    {
        "Type", "Pages", "Dests", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "URI", "NeedsRendering"
    };
    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Pages", "Names", "Dests", "ViewerPreferences", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "URI", "AcroForm", "NeedsRendering"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Pages", "PageLabels", "Names", "Dests", "ViewerPreferences", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "URI", "AcroForm", "StructTreeRoot", "SpiderInfo", "NeedsRendering"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Version", "Pages", "PageLabels", "Names", "Dests", "ViewerPreferences", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "AA", "URI", "AcroForm", "Metadata", "StructTreeRoot", "MarkInfo", "Lang", "SpiderInfo", "OutputIntents", "PieceInfo", "NeedsRendering"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Version", "Pages", "PageLabels", "Names", "Dests", "ViewerPreferences", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "AA", "URI", "AcroForm", "Metadata", "StructTreeRoot", "MarkInfo", "Lang", "SpiderInfo", "OutputIntents", "PieceInfo", "OCProperties", "Perms", "Legal", "NeedsRendering"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Version", "Pages", "PageLabels", "Names", "Dests", "ViewerPreferences", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "AA", "URI", "AcroForm", "Metadata", "StructTreeRoot", "MarkInfo", "Lang", "SpiderInfo", "OutputIntents", "PieceInfo", "OCProperties", "Perms", "Legal", "NeedsRendering", "DPartRoot"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Version", "Extensions", "Pages", "PageLabels", "Names", "Dests", "ViewerPreferences", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "AA", "URI", "AcroForm", "Metadata", "StructTreeRoot", "MarkInfo", "Lang", "SpiderInfo", "OutputIntents", "PieceInfo", "OCProperties", "Perms", "Legal", "Requirements", "Collection", "NeedsRendering", "DPartRoot"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Version", "Extensions", "Pages", "PageLabels", "Names", "Dests", "ViewerPreferences", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "AA", "URI", "AcroForm", "Metadata", "StructTreeRoot", "MarkInfo", "Lang", "SpiderInfo", "OutputIntents", "PieceInfo", "OCProperties", "Perms", "Legal", "Requirements", "Collection", "NeedsRendering", "DPartRoot"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Version", "Extensions", "Pages", "PageLabels", "Names", "Dests", "ViewerPreferences", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "AA", "URI", "AcroForm", "Metadata", "StructTreeRoot", "MarkInfo", "Lang", "SpiderInfo", "OutputIntents", "PieceInfo", "OCProperties", "Perms", "Legal", "Requirements", "Collection", "NeedsRendering", "DPartRoot"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Version", "Extensions", "Pages", "PageLabels", "Names", "Dests", "ViewerPreferences", "PageLayout", "PageMode", "Outlines", "Threads", "OpenAction", "AA", "URI", "AcroForm", "Metadata", "StructTreeRoot", "MarkInfo", "Lang", "SpiderInfo", "OutputIntents", "PieceInfo", "OCProperties", "Perms", "Legal", "Requirements", "Collection", "DSS", "AF", "DPartRoot"
    };
    


}

/// <summary>
/// Catalog_Type Table 29
/// </summary>
internal partial class APM_Catalog_Type : APM_Catalog_Type__Base
{
}


internal partial class APM_Catalog_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_Catalog_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Catalog")) 
        {
            ctx.Fail<APM_Catalog_Type>($"Invalid value {val}, allowed are: [Catalog]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// Catalog_Version 
/// </summary>
internal partial class APM_Catalog_Version : APM_Catalog_Version__Base
{
}


internal partial class APM_Catalog_Version__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Version";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_Catalog_Version>(obj, "Version", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "1.0" || val == "1.1" || val == "1.2" || val == "1.3" || val == "1.4" || val == "1.5" || val == "1.6" || val == "1.7" || val == "2.0")) 
        {
            ctx.Fail<APM_Catalog_Version>($"Invalid value {val}, allowed are: [1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,2.0]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// Catalog_Extensions 
/// </summary>
internal partial class APM_Catalog_Extensions : APM_Catalog_Extensions__Base
{
}


internal partial class APM_Catalog_Extensions__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Extensions";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_Extensions>(obj, "Extensions", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Extensions, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_Pages 
/// </summary>
internal partial class APM_Catalog_Pages : APM_Catalog_Pages__Base
{
}


internal partial class APM_Catalog_Pages__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Pages";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfDictionary, APM_Catalog_Pages>(obj, "Pages", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PageTreeNodeRoot, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_PageLabels 
/// </summary>
internal partial class APM_Catalog_PageLabels : APM_Catalog_PageLabels__Base
{
}


internal partial class APM_Catalog_PageLabels__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_PageLabels";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_PageLabels>(obj, "PageLabels", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // TODO trees
        
    }


}

/// <summary>
/// Catalog_Names 
/// </summary>
internal partial class APM_Catalog_Names : APM_Catalog_Names__Base
{
}


internal partial class APM_Catalog_Names__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Names";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_Names>(obj, "Names", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Name, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_Dests https://github.com/pdf-association/pdf-issues/issues/106
/// </summary>
internal partial class APM_Catalog_Dests : APM_Catalog_Dests__Base
{
}


internal partial class APM_Catalog_Dests__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Dests";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_Dests>(obj, "Dests", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DestsMap, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_ViewerPreferences 
/// </summary>
internal partial class APM_Catalog_ViewerPreferences : APM_Catalog_ViewerPreferences__Base
{
}


internal partial class APM_Catalog_ViewerPreferences__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_ViewerPreferences";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_ViewerPreferences>(obj, "ViewerPreferences", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ViewerPreferences, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_PageLayout 
/// </summary>
internal partial class APM_Catalog_PageLayout : APM_Catalog_PageLayout__Base
{
}


internal partial class APM_Catalog_PageLayout__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_PageLayout";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_Catalog_PageLayout>(obj, "PageLayout", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "SinglePage" || val == "OneColumn" || val == "TwoColumnLeft" || val == "TwoColumnRight" || val == "TwoPageLeft" || val == "TwoPageRight")) 
        {
            ctx.Fail<APM_Catalog_PageLayout>($"Invalid value {val}, allowed are: [SinglePage,OneColumn,TwoColumnLeft,TwoColumnRight,TwoPageLeft,TwoPageRight]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// Catalog_PageMode 
/// </summary>
internal partial class APM_Catalog_PageMode : APM_Catalog_PageMode__Base
{
}


internal partial class APM_Catalog_PageMode__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_PageMode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_Catalog_PageMode>(obj, "PageMode", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "UseNone" || val == "UseOutlines" || val == "UseThumbs" || val == "FullScreen" || val == "UseOC" || val == "UseAttachments")) 
        {
            ctx.Fail<APM_Catalog_PageMode>($"Invalid value {val}, allowed are: [UseNone,UseOutlines,UseThumbs,FullScreen,UseOC,UseAttachments]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// Catalog_Outlines https://github.com/pdf-association/pdf-issues/issues/106
/// </summary>
internal partial class APM_Catalog_Outlines : APM_Catalog_Outlines__Base
{
}


internal partial class APM_Catalog_Outlines__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Outlines";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_Outlines>(obj, "Outlines", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Outline, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_Threads https://github.com/pdf-association/pdf-issues/issues/106
/// </summary>
internal partial class APM_Catalog_Threads : APM_Catalog_Threads__Base
{
}


internal partial class APM_Catalog_Threads__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Threads";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_Catalog_Threads>(obj, "Threads", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfThreads, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_OpenAction 
/// </summary>
internal partial class APM_Catalog_OpenAction : APM_Catalog_OpenAction__Base
{
}


internal partial class APM_Catalog_OpenAction__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_OpenAction";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Catalog_OpenAction>(obj, "OpenAction", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_DestXYZArray.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_DestXYZArray, PdfArray>(stack, val, obj);
                    } else if (APM_Dest0Array.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_Dest0Array, PdfArray>(stack, val, obj);
                    } else if (APM_Dest1Array.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_Dest1Array, PdfArray>(stack, val, obj);
                    } else if (APM_Dest4Array.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_Dest4Array, PdfArray>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_Catalog_OpenAction>("OpenAction did not match any allowable types: '[DestXYZArray,Dest0Array,Dest1Array,Dest4Array]'");
                    }
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_ActionGoTo.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionGoTo, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionGoToR.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionGoToR, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionLaunch.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionLaunch, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionThread.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionThread, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionURI.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionURI, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.6m && APM_ActionGoToE.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionGoToE, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 2.0m && APM_ActionGoToDp.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionGoToDp, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version == 1.2m && APM_ActionNOP.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionNOP, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version == 1.2m && APM_ActionSetState.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionSetState, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_ActionSound.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionSound, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_ActionMovie.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionMovie, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_ActionHide.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionHide, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_ActionNamed.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionNamed, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_ActionSubmitForm.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionSubmitForm, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_ActionResetForm.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionResetForm, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_ActionImportData.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionImportData, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_ActionSetOCGState.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionSetOCGState, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_ActionRendition.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionRendition, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_ActionTransition.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionTransition, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.6m && APM_ActionGoTo3DView.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionGoTo3DView, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_ActionECMAScript.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 2.0m && APM_ActionRichMediaExecute.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionRichMediaExecute, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_Catalog_OpenAction>("OpenAction did not match any allowable types: '[ActionGoTo,ActionGoToR,fn:SinceVersion(1.6,ActionGoToE),fn:SinceVersion(2.0,ActionGoToDp),ActionLaunch,fn:IsPDFVersion(1.2,ActionNOP),fn:IsPDFVersion(1.2,ActionSetState),ActionThread,ActionURI,fn:SinceVersion(1.2,ActionSound),fn:SinceVersion(1.2,ActionMovie),fn:SinceVersion(1.2,ActionHide),fn:SinceVersion(1.2,ActionNamed),fn:SinceVersion(1.2,ActionSubmitForm),fn:SinceVersion(1.2,ActionResetForm),fn:SinceVersion(1.2,ActionImportData),fn:SinceVersion(1.5,ActionSetOCGState),fn:SinceVersion(1.5,ActionRendition),fn:SinceVersion(1.5,ActionTransition),fn:SinceVersion(1.6,ActionGoTo3DView),fn:SinceVersion(1.3,ActionECMAScript),fn:SinceVersion(2.0,ActionRichMediaExecute)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_Catalog_OpenAction>("OpenAction is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Catalog_AA 
/// </summary>
internal partial class APM_Catalog_AA : APM_Catalog_AA__Base
{
}


internal partial class APM_Catalog_AA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_AA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_AA>(obj, "AA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_AddActionCatalog, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_URI 
/// </summary>
internal partial class APM_Catalog_URI : APM_Catalog_URI__Base
{
}


internal partial class APM_Catalog_URI__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_URI";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_URI>(obj, "URI", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_URI, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_AcroForm 
/// </summary>
internal partial class APM_Catalog_AcroForm : APM_Catalog_AcroForm__Base
{
}


internal partial class APM_Catalog_AcroForm__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_AcroForm";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_AcroForm>(obj, "AcroForm", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_InteractiveForm, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_Metadata 
/// </summary>
internal partial class APM_Catalog_Metadata : APM_Catalog_Metadata__Base
{
}


internal partial class APM_Catalog_Metadata__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Metadata";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_Catalog_Metadata>(obj, "Metadata", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Metadata, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// Catalog_StructTreeRoot 
/// </summary>
internal partial class APM_Catalog_StructTreeRoot : APM_Catalog_StructTreeRoot__Base
{
}


internal partial class APM_Catalog_StructTreeRoot__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_StructTreeRoot";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_StructTreeRoot>(obj, "StructTreeRoot", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_StructTreeRoot, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_MarkInfo 
/// </summary>
internal partial class APM_Catalog_MarkInfo : APM_Catalog_MarkInfo__Base
{
}


internal partial class APM_Catalog_MarkInfo__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_MarkInfo";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_MarkInfo>(obj, "MarkInfo", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_MarkInfo, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_Lang 
/// </summary>
internal partial class APM_Catalog_Lang : APM_Catalog_Lang__Base
{
}


internal partial class APM_Catalog_Lang__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Lang";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_Catalog_Lang>(obj, "Lang", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// Catalog_SpiderInfo 
/// </summary>
internal partial class APM_Catalog_SpiderInfo : APM_Catalog_SpiderInfo__Base
{
}


internal partial class APM_Catalog_SpiderInfo__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_SpiderInfo";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_SpiderInfo>(obj, "SpiderInfo", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_WebCaptureInfo, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_OutputIntents 
/// </summary>
internal partial class APM_Catalog_OutputIntents : APM_Catalog_OutputIntents__Base
{
}


internal partial class APM_Catalog_OutputIntents__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_OutputIntents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_Catalog_OutputIntents>(obj, "OutputIntents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfOutputIntents, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_PieceInfo 
/// </summary>
internal partial class APM_Catalog_PieceInfo : APM_Catalog_PieceInfo__Base
{
}


internal partial class APM_Catalog_PieceInfo__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_PieceInfo";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_PieceInfo>(obj, "PieceInfo", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PagePiece, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_OCProperties 
/// </summary>
internal partial class APM_Catalog_OCProperties : APM_Catalog_OCProperties__Base
{
}


internal partial class APM_Catalog_OCProperties__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_OCProperties";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_OCProperties>(obj, "OCProperties", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentProperties, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_Perms 
/// </summary>
internal partial class APM_Catalog_Perms : APM_Catalog_Perms__Base
{
}


internal partial class APM_Catalog_Perms__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Perms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_Perms>(obj, "Perms", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Permissions, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_Legal 
/// </summary>
internal partial class APM_Catalog_Legal : APM_Catalog_Legal__Base
{
}


internal partial class APM_Catalog_Legal__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Legal";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_Legal>(obj, "Legal", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_LegalAttestation, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_Requirements 
/// </summary>
internal partial class APM_Catalog_Requirements : APM_Catalog_Requirements__Base
{
}


internal partial class APM_Catalog_Requirements__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Requirements";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_Catalog_Requirements>(obj, "Requirements", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfRequirements, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_Collection 
/// </summary>
internal partial class APM_Catalog_Collection : APM_Catalog_Collection__Base
{
}


internal partial class APM_Catalog_Collection__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_Collection";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_Collection>(obj, "Collection", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Collection, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_NeedsRendering 
/// </summary>
internal partial class APM_Catalog_NeedsRendering : APM_Catalog_NeedsRendering__Base
{
}


internal partial class APM_Catalog_NeedsRendering__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_NeedsRendering";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_Catalog_NeedsRendering>(obj, "NeedsRendering", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// Catalog_DSS 
/// </summary>
internal partial class APM_Catalog_DSS : APM_Catalog_DSS__Base
{
}


internal partial class APM_Catalog_DSS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_DSS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_DSS>(obj, "DSS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DSS, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_AF 
/// </summary>
internal partial class APM_Catalog_AF : APM_Catalog_AF__Base
{
}


internal partial class APM_Catalog_AF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_Catalog_AF>(obj, "AF", IndirectRequirement.Either);
        if (val == null) { return; }
        var AF = obj.Get("AF");
        if (!(gte(((AF as PdfArray)?.Count),1))) 
        {
            ctx.Fail<APM_Catalog_AF>($"Value failed special case check: fn:Eval(fn:ArrayLength(AF)>=1)");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// Catalog_DPartRoot 
/// </summary>
internal partial class APM_Catalog_DPartRoot : APM_Catalog_DPartRoot__Base
{
}


internal partial class APM_Catalog_DPartRoot__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Catalog_DPartRoot";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_Catalog_DPartRoot>(obj, "DPartRoot", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DPartRoot, PdfDictionary>(stack, val, obj);
        
    }


}

