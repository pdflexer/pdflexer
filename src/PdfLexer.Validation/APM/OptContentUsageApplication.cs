// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_OptContentUsageApplication : APM_OptContentUsageApplication__Base
{
}

internal partial class APM_OptContentUsageApplication__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "OptContentUsageApplication";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_OptContentUsageApplication_Event, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentUsageApplication_OCGs, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentUsageApplication_Category, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsageApplication>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsageApplication>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsageApplication>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsageApplication>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsageApplication>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_OptContentUsageApplication>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "Event", "OCGs", "Category"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "Event", "OCGs", "Category"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Event", "OCGs", "Category"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Event", "OCGs", "Category"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Event", "OCGs", "Category"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Event", "OCGs", "Category"
    };
    


}

/// <summary>
/// OptContentUsageApplication_Event Table 101
/// </summary>
internal partial class APM_OptContentUsageApplication_Event : APM_OptContentUsageApplication_Event__Base
{
}


internal partial class APM_OptContentUsageApplication_Event__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsageApplication_Event";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_OptContentUsageApplication_Event>(obj, "Event", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.View || val == PdfName.Print || val == PdfName.Export)) 
        {
            ctx.Fail<APM_OptContentUsageApplication_Event>($"Invalid value {val}, allowed are: [View,Print,Export]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// OptContentUsageApplication_OCGs 
/// </summary>
internal partial class APM_OptContentUsageApplication_OCGs : APM_OptContentUsageApplication_OCGs__Base
{
}


internal partial class APM_OptContentUsageApplication_OCGs__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsageApplication_OCGs";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_OptContentUsageApplication_OCGs>(obj, "OCGs", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfOCG, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// OptContentUsageApplication_Category 
/// </summary>
internal partial class APM_OptContentUsageApplication_Category : APM_OptContentUsageApplication_Category__Base
{
}


internal partial class APM_OptContentUsageApplication_Category__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentUsageApplication_Category";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_OptContentUsageApplication_Category>(obj, "Category", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNamesGeneral, PdfArray>(stack, val, obj);
        
    }


}

