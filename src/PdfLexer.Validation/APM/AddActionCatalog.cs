// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AddActionCatalog : APM_AddActionCatalog__Base
{
}

internal partial class APM_AddActionCatalog__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AddActionCatalog";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AddActionCatalog_DC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AddActionCatalog_WS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AddActionCatalog_DS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AddActionCatalog_WP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AddActionCatalog_DP, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.4m:
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_AddActionCatalog>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_14_15_16_17_18_19_20 { get; } = new List<string> 
    {
        "DC", "DP", "DS", "WP", "WS"
    };
    


}

/// <summary>
/// AddActionCatalog_DC Table 200 - document close
/// </summary>
internal partial class APM_AddActionCatalog_DC : APM_AddActionCatalog_DC__Base
{
}


internal partial class APM_AddActionCatalog_DC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AddActionCatalog_DC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AddActionCatalog_DC>(obj, "DC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AddActionCatalog_WS Table 200 - will save
/// </summary>
internal partial class APM_AddActionCatalog_WS : APM_AddActionCatalog_WS__Base
{
}


internal partial class APM_AddActionCatalog_WS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AddActionCatalog_WS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AddActionCatalog_WS>(obj, "WS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AddActionCatalog_DS Table 200 - did save
/// </summary>
internal partial class APM_AddActionCatalog_DS : APM_AddActionCatalog_DS__Base
{
}


internal partial class APM_AddActionCatalog_DS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AddActionCatalog_DS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AddActionCatalog_DS>(obj, "DS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AddActionCatalog_WP Table 200 - will print
/// </summary>
internal partial class APM_AddActionCatalog_WP : APM_AddActionCatalog_WP__Base
{
}


internal partial class APM_AddActionCatalog_WP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AddActionCatalog_WP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AddActionCatalog_WP>(obj, "WP", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AddActionCatalog_DP Table 200 - did print
/// </summary>
internal partial class APM_AddActionCatalog_DP : APM_AddActionCatalog_DP__Base
{
}


internal partial class APM_AddActionCatalog_DP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AddActionCatalog_DP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AddActionCatalog_DP>(obj, "DP", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
        
    }


}

