// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_CryptFilterMap : APM_CryptFilterMap_Base
{
}

internal partial class APM_CryptFilterMap_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "CryptFilterMap";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_CryptFilterMap_Identity, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CryptFilterMap_StdCF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CryptFilterMap_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    


}

/// <summary>
/// CryptFilterMap_Identity Table 26 explicitly defines Identity
/// </summary>
internal partial class APM_CryptFilterMap_Identity : APM_CryptFilterMap_Identity_Base
{
}


internal partial class APM_CryptFilterMap_Identity_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CryptFilterMap_Identity";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_CryptFilterMap_Identity>(obj, "Identity", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_CryptFilter, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// CryptFilterMap_StdCF Clause 7.6.4
/// </summary>
internal partial class APM_CryptFilterMap_StdCF : APM_CryptFilterMap_StdCF_Base
{
}


internal partial class APM_CryptFilterMap_StdCF_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CryptFilterMap_StdCF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_CryptFilterMap_StdCF>(obj, "StdCF", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        ctx.Run<APM_CryptFilter, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// CryptFilterMap_* 
/// </summary>
internal partial class APM_CryptFilterMap_CatchAll : APM_CryptFilterMap_CatchAll_Base
{
}


internal partial class APM_CryptFilterMap_CatchAll_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CryptFilterMap_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var val = ctx.GetOptional<PdfDictionary, APM_CryptFilterMap_CatchAll>(obj, key, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            ctx.Run<APM_CryptFilter, PdfDictionary>(stack, val, obj);
            
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> { "Identity", "StdCF" };
}

