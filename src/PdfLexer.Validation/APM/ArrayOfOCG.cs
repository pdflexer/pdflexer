// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfOCG : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfOCG";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfOCG_x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false; // TODO
    }
}

/// <summary>
/// ArrayOfOCG_* Table 97
/// </summary>
internal partial class APM_ArrayOfOCG_x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfOCG_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=1) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var (utval, wasIR) = ctx.GetOptional<APM_ArrayOfOCG_x>(obj, n, IndirectRequirement.Either);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                case PdfObjectType.DictionaryObj:
                    {
                        var val =  (PdfDictionary)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
                        return;
                    }
                case PdfObjectType.NullObj:
                    {
                        var val =  (PdfNull)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        // no linked objects
                        return;
                    }
                
                default:
                    ctx.Fail<APM_ArrayOfOCG_x>("* is required to one of 'dictionary;null', was " + utval.Type);
                    return;
            }
        }
    }
}

