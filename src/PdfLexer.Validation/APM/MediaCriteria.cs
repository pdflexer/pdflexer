// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_MediaCriteria : APM_MediaCriteria__Base
{
}

internal partial class APM_MediaCriteria__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "MediaCriteria";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_MediaCriteria_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_A, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_O, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_R, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_D, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_Z, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_V, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaCriteria_L, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_MediaCriteria>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_MediaCriteria>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_MediaCriteria>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_MediaCriteria>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_MediaCriteria>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_MediaCriteria>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_MediaCriteria_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "A", "C", "O", "S", "R", "D", "Z", "V", "P", "L"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "A", "C", "O", "S", "R", "D", "Z", "V", "P", "L"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "A", "C", "O", "S", "R", "D", "Z", "V", "P", "L"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "A", "C", "O", "S", "R", "D", "Z", "V", "P", "L"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "A", "C", "O", "S", "R", "D", "Z", "V", "P", "L"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "A", "C", "O", "S", "R", "D", "Z", "V", "P", "L"
    };
    


}

/// <summary>
/// MediaCriteria_Type Table 279
/// </summary>
internal partial class APM_MediaCriteria_Type : APM_MediaCriteria_Type__Base
{
}


internal partial class APM_MediaCriteria_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_MediaCriteria_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.MediaCriteria)) 
        {
            ctx.Fail<APM_MediaCriteria_Type>($"Invalid value {val}, allowed are: [MediaCriteria]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// MediaCriteria_A hear audio description, equivalent to SMIL's systemAudioDesc attribute
/// </summary>
internal partial class APM_MediaCriteria_A : APM_MediaCriteria_A__Base
{
}


internal partial class APM_MediaCriteria_A__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_MediaCriteria_A>(obj, "A", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MediaCriteria_C see text captions, equivalent to SMIL's systemCaptions attribute
/// </summary>
internal partial class APM_MediaCriteria_C : APM_MediaCriteria_C__Base
{
}


internal partial class APM_MediaCriteria_C__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_MediaCriteria_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MediaCriteria_O hear audio overdubs
/// </summary>
internal partial class APM_MediaCriteria_O : APM_MediaCriteria_O__Base
{
}


internal partial class APM_MediaCriteria_O__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_O";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_MediaCriteria_O>(obj, "O", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MediaCriteria_S see subtitles
/// </summary>
internal partial class APM_MediaCriteria_S : APM_MediaCriteria_S__Base
{
}


internal partial class APM_MediaCriteria_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_MediaCriteria_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MediaCriteria_R bits per second, equivalent to SMIL's systemBitrate attribute
/// </summary>
internal partial class APM_MediaCriteria_R : APM_MediaCriteria_R__Base
{
}


internal partial class APM_MediaCriteria_R__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_MediaCriteria_R>(obj, "R", IndirectRequirement.Either);
        if (val == null) { return; }
        var R = obj.Get("R");
        if (!(gt(R,0))) 
        {
            ctx.Fail<APM_MediaCriteria_R>($"Value failed special case check: fn:Eval(@R>0)");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MediaCriteria_D Equivalent to SMIL's systemScreenDepth attribute
/// </summary>
internal partial class APM_MediaCriteria_D : APM_MediaCriteria_D__Base
{
}


internal partial class APM_MediaCriteria_D__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_D";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_MediaCriteria_D>(obj, "D", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_MinimumBitDepth, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// MediaCriteria_Z Equivalent to SMIL's systemScreenSize attribute
/// </summary>
internal partial class APM_MediaCriteria_Z : APM_MediaCriteria_Z__Base
{
}


internal partial class APM_MediaCriteria_Z__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_Z";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_MediaCriteria_Z>(obj, "Z", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_MinimumScreenSize, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// MediaCriteria_V 
/// </summary>
internal partial class APM_MediaCriteria_V : APM_MediaCriteria_V__Base
{
}


internal partial class APM_MediaCriteria_V__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_MediaCriteria_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfSoftwareIdentifiers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MediaCriteria_P 
/// </summary>
internal partial class APM_MediaCriteria_P : APM_MediaCriteria_P__Base
{
}


internal partial class APM_MediaCriteria_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_MediaCriteria_P>(obj, "P", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNamesGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MediaCriteria_L Equivalent to SMIL's systemLanguage attribute
/// </summary>
internal partial class APM_MediaCriteria_L : APM_MediaCriteria_L__Base
{
}


internal partial class APM_MediaCriteria_L__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaCriteria_L";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_MediaCriteria_L>(obj, "L", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfStringsText, PdfArray>(stack, val, obj);
        
    }


}

