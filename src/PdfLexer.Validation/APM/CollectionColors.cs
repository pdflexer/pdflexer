// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_CollectionColors : APM_CollectionColors__Base
{
}

internal partial class APM_CollectionColors__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "CollectionColors";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_CollectionColors_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CollectionColors_Background, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CollectionColors_CardBackground, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CollectionColors_CardBorder, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CollectionColors_PrimaryText, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CollectionColors_SecondaryText, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
            case 1.8m:
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17_18_19.Contains(x)))
                {
                    ctx.Fail<APM_CollectionColors>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_CollectionColors>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_CollectionColors_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_17_18_19 { get; } = new List<string> 
    {
        "Background", "CardBackground", "CardBorder", "PrimaryText", "SecondaryText"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Background", "CardBackground", "CardBorder", "PrimaryText", "SecondaryText", "Type"
    };
    


}

/// <summary>
/// CollectionColors_Type Table 157
/// </summary>
internal partial class APM_CollectionColors_Type : APM_CollectionColors_Type__Base
{
}


internal partial class APM_CollectionColors_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionColors_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_CollectionColors_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.CollectionColors)) 
        {
            ctx.Fail<APM_CollectionColors_Type>($"Invalid value {val}, allowed are: [CollectionColors]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// CollectionColors_Background 
/// </summary>
internal partial class APM_CollectionColors_Background : APM_CollectionColors_Background__Base
{
}


internal partial class APM_CollectionColors_Background__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionColors_Background";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_CollectionColors_Background>(obj, "Background", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3RGBNumbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CollectionColors_CardBackground 
/// </summary>
internal partial class APM_CollectionColors_CardBackground : APM_CollectionColors_CardBackground__Base
{
}


internal partial class APM_CollectionColors_CardBackground__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionColors_CardBackground";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_CollectionColors_CardBackground>(obj, "CardBackground", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3RGBNumbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CollectionColors_CardBorder 
/// </summary>
internal partial class APM_CollectionColors_CardBorder : APM_CollectionColors_CardBorder__Base
{
}


internal partial class APM_CollectionColors_CardBorder__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionColors_CardBorder";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_CollectionColors_CardBorder>(obj, "CardBorder", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3RGBNumbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CollectionColors_PrimaryText 
/// </summary>
internal partial class APM_CollectionColors_PrimaryText : APM_CollectionColors_PrimaryText__Base
{
}


internal partial class APM_CollectionColors_PrimaryText__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionColors_PrimaryText";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_CollectionColors_PrimaryText>(obj, "PrimaryText", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3RGBNumbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CollectionColors_SecondaryText 
/// </summary>
internal partial class APM_CollectionColors_SecondaryText : APM_CollectionColors_SecondaryText__Base
{
}


internal partial class APM_CollectionColors_SecondaryText__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionColors_SecondaryText";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_CollectionColors_SecondaryText>(obj, "SecondaryText", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3RGBNumbers, PdfArray>(stack, val, obj);
        
    }


}

