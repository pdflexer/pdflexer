// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_OptContentGroup : APM_OptContentGroup__Base
{
}

internal partial class APM_OptContentGroup__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "OptContentGroup";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_OptContentGroup_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentGroup_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentGroup_Intent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OptContentGroup_Usage, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_OptContentGroup>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_OptContentGroup>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_OptContentGroup>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_OptContentGroup>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_OptContentGroup>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_OptContentGroup>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_OptContentGroup_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "Type", "Name", "Intent", "Usage"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "Type", "Name", "Intent", "Usage"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "Name", "Intent", "Usage"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "Name", "Intent", "Usage"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "Name", "Intent", "Usage"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "Name", "Intent", "Usage"
    };
    


}

/// <summary>
/// OptContentGroup_Type Table 96
/// </summary>
internal partial class APM_OptContentGroup_Type : APM_OptContentGroup_Type__Base
{
}


internal partial class APM_OptContentGroup_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentGroup_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_OptContentGroup_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.OCG)) 
        {
            ctx.Fail<APM_OptContentGroup_Type>($"Invalid value {val}, allowed are: [OCG]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// OptContentGroup_Name 
/// </summary>
internal partial class APM_OptContentGroup_Name : APM_OptContentGroup_Name__Base
{
}


internal partial class APM_OptContentGroup_Name__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentGroup_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfString, APM_OptContentGroup_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OptContentGroup_Intent 
/// </summary>
internal partial class APM_OptContentGroup_Intent : APM_OptContentGroup_Intent__Base
{
}


internal partial class APM_OptContentGroup_Intent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentGroup_Intent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_OptContentGroup_Intent>(obj, "Intent", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfNamesGeneral, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_OptContentGroup_Intent>("Intent is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// OptContentGroup_Usage 
/// </summary>
internal partial class APM_OptContentGroup_Usage : APM_OptContentGroup_Usage__Base
{
}


internal partial class APM_OptContentGroup_Usage__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OptContentGroup_Usage";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OptContentGroup_Usage>(obj, "Usage", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OptContentUsage, PdfDictionary>(stack, val, obj);
        
    }


}

