// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_FunctionType0 : APM_FunctionType0__Base
{
}

internal partial class APM_FunctionType0__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "FunctionType0";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_FunctionType0_FunctionType, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_Domain, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_Range, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_Size, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_BitsPerSample, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_Order, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_Encode, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_Decode, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_DecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_FFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_FDecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType0_DL, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType0>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType0>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType0>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType0>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType0>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType0>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType0>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType0>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType0>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Size", "BitsPerSample", "Order", "Encode", "Decode"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Size", "BitsPerSample", "Order", "Encode", "Decode", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Size", "BitsPerSample", "Order", "Encode", "Decode", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Size", "BitsPerSample", "Order", "Encode", "Decode", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Size", "BitsPerSample", "Order", "Encode", "Decode", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Size", "BitsPerSample", "Order", "Encode", "Decode", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Size", "BitsPerSample", "Order", "Encode", "Decode", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Size", "BitsPerSample", "Order", "Encode", "Decode", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Size", "BitsPerSample", "Order", "Encode", "Decode", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    


}

/// <summary>
/// FunctionType0_FunctionType Table 5, Table 38 and Table 39
/// </summary>
internal partial class APM_FunctionType0_FunctionType : APM_FunctionType0_FunctionType__Base
{
}


internal partial class APM_FunctionType0_FunctionType__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_FunctionType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfIntNumber, APM_FunctionType0_FunctionType>(obj, "FunctionType", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 0m)) 
        {
            ctx.Fail<APM_FunctionType0_FunctionType>($"Invalid value {val}, allowed are: [0]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FunctionType0_Domain 
/// </summary>
internal partial class APM_FunctionType0_Domain : APM_FunctionType0_Domain__Base
{
}


internal partial class APM_FunctionType0_Domain__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_Domain";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_FunctionType0_Domain>(obj, "Domain", IndirectRequirement.Either);
        if (val == null) { return; }
        var Domain = obj.Get("Domain");
        if (!(eq(mod(((Domain as PdfArray)?.Count),2),0))) 
        {
            ctx.Fail<APM_FunctionType0_Domain>($"Value failed special case check: fn:Eval((fn:ArrayLength(Domain) mod 2)==0)");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType0_Range 
/// </summary>
internal partial class APM_FunctionType0_Range : APM_FunctionType0_Range__Base
{
}


internal partial class APM_FunctionType0_Range__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_Range";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_FunctionType0_Range>(obj, "Range", IndirectRequirement.Either);
        if (val == null) { return; }
        var Range = obj.Get("Range");
        if (!(eq(mod(((Range as PdfArray)?.Count),2),0))) 
        {
            ctx.Fail<APM_FunctionType0_Range>($"Value failed special case check: fn:Eval((fn:ArrayLength(Range) mod 2)==0)");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType0_Size array of m positive integers
/// </summary>
internal partial class APM_FunctionType0_Size : APM_FunctionType0_Size__Base
{
}


internal partial class APM_FunctionType0_Size__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_Size";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_FunctionType0_Size>(obj, "Size", IndirectRequirement.Either);
        if (val == null) { return; }
        var Domain = obj.Get("Domain");
        var Size = obj.Get("Size");
        if (!(eq(((Domain as PdfArray)?.Count),mult(2,((Size as PdfArray)?.Count))))) 
        {
            ctx.Fail<APM_FunctionType0_Size>($"Value failed special case check: fn:Eval(fn:ArrayLength(Domain)==(2 * fn:ArrayLength(Size)))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfIntegersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType0_BitsPerSample 
/// </summary>
internal partial class APM_FunctionType0_BitsPerSample : APM_FunctionType0_BitsPerSample__Base
{
}


internal partial class APM_FunctionType0_BitsPerSample__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_BitsPerSample";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfIntNumber, APM_FunctionType0_BitsPerSample>(obj, "BitsPerSample", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 1m || val == 2m || val == 4m || val == 8m || val == 12m || val == 16m || val == 24m || val == 32m)) 
        {
            ctx.Fail<APM_FunctionType0_BitsPerSample>($"Invalid value {val}, allowed are: [1,2,4,8,12,16,24,32]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FunctionType0_Order 
/// </summary>
internal partial class APM_FunctionType0_Order : APM_FunctionType0_Order__Base
{
}


internal partial class APM_FunctionType0_Order__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_Order";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_FunctionType0_Order>(obj, "Order", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 1m || val == 3m)) 
        {
            ctx.Fail<APM_FunctionType0_Order>($"Invalid value {val}, allowed are: [1,3]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FunctionType0_Encode 
/// </summary>
internal partial class APM_FunctionType0_Encode : APM_FunctionType0_Encode__Base
{
}


internal partial class APM_FunctionType0_Encode__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_Encode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_FunctionType0_Encode>(obj, "Encode", IndirectRequirement.Either);
        if (val == null) { return; }
        var Encode = obj.Get("Encode");
        var Size = obj.Get("Size");
        if (!(eq(((Encode as PdfArray)?.Count),mult(2,((Size as PdfArray)?.Count))))) 
        {
            ctx.Fail<APM_FunctionType0_Encode>($"Value failed special case check: fn:Eval(fn:ArrayLength(Encode)==(2 * fn:ArrayLength(Size)))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType0_Decode 
/// </summary>
internal partial class APM_FunctionType0_Decode : APM_FunctionType0_Decode__Base
{
}


internal partial class APM_FunctionType0_Decode__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_Decode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_FunctionType0_Decode>(obj, "Decode", IndirectRequirement.Either);
        if (val == null) { return; }
        var Decode = obj.Get("Decode");
        var Range = obj.Get("Range");
        if (!(eq(((Decode as PdfArray)?.Count),((Range as PdfArray)?.Count)))) 
        {
            ctx.Fail<APM_FunctionType0_Decode>($"Value failed special case check: fn:Eval(fn:ArrayLength(Decode)==fn:ArrayLength(Range))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType0_Length 
/// </summary>
internal partial class APM_FunctionType0_Length : APM_FunctionType0_Length__Base
{
}


internal partial class APM_FunctionType0_Length__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfIntNumber, APM_FunctionType0_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// FunctionType0_Filter 
/// </summary>
internal partial class APM_FunctionType0_Filter : APM_FunctionType0_Filter__Base
{
}


internal partial class APM_FunctionType0_Filter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_FunctionType0_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var DecodeParms = obj.Get("DecodeParms");
                    var Filter = obj.Get("Filter");
                    if (!(eq(((DecodeParms as PdfArray)?.Count),((Filter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_FunctionType0_Filter>($"Value failed special case check: fn:Eval(fn:ArrayLength(DecodeParms)==fn:ArrayLength(Filter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == PdfName.ASCIIHexDecode || val == PdfName.ASCII85Decode || val == PdfName.LZWDecode || val == PdfName.FlateDecode || val == PdfName.RunLengthDecode || (ctx.Version >= 1.5m && val == PdfName.Crypt))) 
                    {
                        ctx.Fail<APM_FunctionType0_Filter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_FunctionType0_Filter>("Filter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// FunctionType0_DecodeParms 
/// </summary>
internal partial class APM_FunctionType0_DecodeParms : APM_FunctionType0_DecodeParms__Base
{
}


internal partial class APM_FunctionType0_DecodeParms__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_DecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_FunctionType0_DecodeParms>(obj, "DecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var DecodeParms = obj.Get("DecodeParms");
                    var Filter = obj.Get("Filter");
                    if (!(eq(((DecodeParms as PdfArray)?.Count),((Filter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_FunctionType0_DecodeParms>($"Value failed special case check: fn:Eval(fn:ArrayLength(DecodeParms)==fn:ArrayLength(Filter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_FilterCrypt.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterCrypt, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_FunctionType0_DecodeParms>("DecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_FunctionType0_DecodeParms>("DecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// FunctionType0_F 
/// </summary>
internal partial class APM_FunctionType0_F : APM_FunctionType0_F__Base
{
}


internal partial class APM_FunctionType0_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_FunctionType0_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_FunctionType0_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// FunctionType0_FFilter 
/// </summary>
internal partial class APM_FunctionType0_FFilter : APM_FunctionType0_FFilter__Base
{
}


internal partial class APM_FunctionType0_FFilter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_FFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_FunctionType0_FFilter>(obj, "FFilter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var FDecodeParms = obj.Get("FDecodeParms");
                    var FFilter = obj.Get("FFilter");
                    if (!(eq(((FDecodeParms as PdfArray)?.Count),((FFilter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_FunctionType0_FFilter>($"Value failed special case check: fn:Eval(fn:ArrayLength(FDecodeParms)==fn:ArrayLength(FFilter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == PdfName.ASCIIHexDecode || val == PdfName.ASCII85Decode || val == PdfName.LZWDecode || val == PdfName.FlateDecode || val == PdfName.RunLengthDecode || (ctx.Version >= 1.5m && val == PdfName.Crypt))) 
                    {
                        ctx.Fail<APM_FunctionType0_FFilter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_FunctionType0_FFilter>("FFilter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// FunctionType0_FDecodeParms 
/// </summary>
internal partial class APM_FunctionType0_FDecodeParms : APM_FunctionType0_FDecodeParms__Base
{
}


internal partial class APM_FunctionType0_FDecodeParms__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_FDecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_FunctionType0_FDecodeParms>(obj, "FDecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var FDecodeParms = obj.Get("FDecodeParms");
                    var FFilter = obj.Get("FFilter");
                    if (!(eq(((FDecodeParms as PdfArray)?.Count),((FFilter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_FunctionType0_FDecodeParms>($"Value failed special case check: fn:Eval(fn:ArrayLength(FDecodeParms)==fn:ArrayLength(FFilter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_FilterCrypt.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterCrypt, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_FunctionType0_FDecodeParms>("FDecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_FunctionType0_FDecodeParms>("FDecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// FunctionType0_DL 
/// </summary>
internal partial class APM_FunctionType0_DL : APM_FunctionType0_DL__Base
{
}


internal partial class APM_FunctionType0_DL__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType0_DL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_FunctionType0_DL>(obj, "DL", IndirectRequirement.Either);
        if (val == null) { return; }
        var DL = obj.Get("DL");
        if (!(gte(DL,0))) 
        {
            ctx.Fail<APM_FunctionType0_DL>($"Value failed special case check: fn:Eval(@DL>=0)");
        }
        // no value restrictions
        // no linked objects
        
    }


}

