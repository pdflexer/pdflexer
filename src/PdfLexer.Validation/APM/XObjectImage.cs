// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_XObjectImage : APM_XObjectImage__Base
{
}

internal partial class APM_XObjectImage__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "XObjectImage";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_XObjectImage_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Width, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Height, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_ColorSpace, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_BitsPerComponent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Intent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_ImageMask, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Mask, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Decode, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Interpolate, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Alternates, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_SMask, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_SMaskInData, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_ID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_OPI, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Metadata, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Measure, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_PtData, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_DecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_FFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_FDecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_DL, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_GTS_XID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_GTS_Scope, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_GTS_Env, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImage_GTS_Encapsulated, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.0");
                }
                break;
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImage>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_XObjectImage_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_10 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "ImageMask", "Decode", "Interpolate", "Name", "Length", "Filter", "DecodeParms", "F"
    };
    public static HashSet<string> AllowedFields_11 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Name", "Length", "Filter", "DecodeParms", "F"
    };
    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Name", "OPI", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Mask", "Decode", "Interpolate", "Alternates", "Name", "StructParent", "ID", "OPI", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Mask", "Decode", "Interpolate", "Alternates", "SMask", "Name", "StructParent", "ID", "OPI", "Metadata", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Mask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Mask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Mask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Mask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Mask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "ColorSpace", "BitsPerComponent", "Intent", "ImageMask", "Mask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "StructParent", "ID", "Metadata", "OC", "AF", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    


}

/// <summary>
/// XObjectImage_Type Table 5 and Table 87
/// </summary>
internal partial class APM_XObjectImage_Type : APM_XObjectImage_Type__Base
{
}


internal partial class APM_XObjectImage_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectImage_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "XObject")) 
        {
            ctx.Fail<APM_XObjectImage_Type>($"Invalid value {val}, allowed are: [XObject]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_Subtype 
/// </summary>
internal partial class APM_XObjectImage_Subtype : APM_XObjectImage_Subtype__Base
{
}


internal partial class APM_XObjectImage_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_XObjectImage_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Image")) 
        {
            ctx.Fail<APM_XObjectImage_Subtype>($"Invalid value {val}, allowed are: [Image]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_Width 
/// </summary>
internal partial class APM_XObjectImage_Width : APM_XObjectImage_Width__Base
{
}


internal partial class APM_XObjectImage_Width__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Width";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectImage_Width>(obj, "Width", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_Height 
/// </summary>
internal partial class APM_XObjectImage_Height : APM_XObjectImage_Height__Base
{
}


internal partial class APM_XObjectImage_Height__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Height";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectImage_Height>(obj, "Height", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_ColorSpace 
/// </summary>
internal partial class APM_XObjectImage_ColorSpace : APM_XObjectImage_ColorSpace__Base
{
}


internal partial class APM_XObjectImage_ColorSpace__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_ColorSpace";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImage_ColorSpace>(obj, "ColorSpace", IndirectRequirement.Either);
        
        var Filter = obj.Get("Filter");
        var ImageMask = obj.Get("ImageMask");
        if ((!(Contains(Filter, "JPXDecode")||eq(ImageMask,PdfBoolean.True))) && utval == null) {
            ctx.Fail<APM_XObjectImage_ColorSpace>("ColorSpace is required"); return;
        } else if (utval == null) {
            return;
        }
        
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    
                    if (eq(ImageMask,PdfBoolean.True)) 
                    {
                        ctx.Fail<APM_XObjectImage_ColorSpace>($"Value failed special case check: fn:Not(fn:IsPresent(@ImageMask==true))");
                    }
                    // no value restrictions
                    if (APM_IndexedColorSpace.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_IndexedColorSpace, PdfArray>(stack, val, obj);
                    } else if ((ctx.Version >= 1.1m && APM_CalGrayColorSpace.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_CalGrayColorSpace, PdfArray>(stack, val, obj);
                    } else if ((ctx.Version >= 1.1m && APM_CalRGBColorSpace.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_CalRGBColorSpace, PdfArray>(stack, val, obj);
                    } else if ((ctx.Version >= 1.1m && APM_LabColorSpace.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_LabColorSpace, PdfArray>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_ICCBasedColorSpace.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ICCBasedColorSpace, PdfArray>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_SeparationColorSpace.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_SeparationColorSpace, PdfArray>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_DeviceNColorSpace.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_DeviceNColorSpace, PdfArray>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_PatternColorSpace.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_PatternColorSpace, PdfArray>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectImage_ColorSpace>("ColorSpace did not match any allowable types: '[fn:SinceVersion(1.1,CalGrayColorSpace),fn:SinceVersion(1.1,CalRGBColorSpace),fn:SinceVersion(1.1,LabColorSpace),fn:SinceVersion(1.3,ICCBasedColorSpace),IndexedColorSpace,fn:SinceVersion(1.2,SeparationColorSpace),fn:SinceVersion(1.3,DeviceNColorSpace),fn:SinceVersion(1.2,PatternColorSpace)]'");
                    }
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    
                    if (eq(ImageMask,PdfBoolean.True)) 
                    {
                        ctx.Fail<APM_XObjectImage_ColorSpace>($"Value failed special case check: fn:Not(fn:IsPresent(@ImageMask==true))");
                    }
                    
                    
                    if (!(val == "DeviceCMYK" || val == "DeviceRGB" || val == "DeviceGray")) 
                    {
                        ctx.Fail<APM_XObjectImage_ColorSpace>($"Invalid value {val}, allowed are: [DeviceCMYK,DeviceRGB,DeviceGray]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImage_ColorSpace>("ColorSpace is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImage_BitsPerComponent 
/// </summary>
internal partial class APM_XObjectImage_BitsPerComponent : APM_XObjectImage_BitsPerComponent__Base
{
}


internal partial class APM_XObjectImage_BitsPerComponent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_BitsPerComponent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var Filter = obj.Get("Filter");
        var ImageMask = obj.Get("ImageMask");
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectImage_BitsPerComponent>(obj, "BitsPerComponent", IndirectRequirement.Either);
        if ((!(Contains(Filter, "JPXDecode")||eq(ImageMask,PdfBoolean.True))) && val == null) {
            ctx.Fail<APM_XObjectImage_BitsPerComponent>("BitsPerComponent is required when 'fn:IsRequired(fn:Not(fn:Contains(@Filter,JPXDecode) || (@ImageMask==true)))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        
        
        // TODO required value checks
        if (!(val == 2 || val == 4 || (ctx.Version >= 1.5m && val == 16))) 
        {
            ctx.Fail<APM_XObjectImage_BitsPerComponent>($"Invalid value {val}, allowed are: [fn:RequiredValue((@Filter==CCITTFaxDecode) || (@Filter==JBIG2Decode) || (@ImageMask==true),1),2,4,fn:RequiredValue((@Filter==RunLengthDecode) || (@Filter==DCTDecode),8),fn:SinceVersion(1.5,16)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_Intent 
/// </summary>
internal partial class APM_XObjectImage_Intent : APM_XObjectImage_Intent__Base
{
}


internal partial class APM_XObjectImage_Intent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Intent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectImage_Intent>(obj, "Intent", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_ImageMask 
/// </summary>
internal partial class APM_XObjectImage_ImageMask : APM_XObjectImage_ImageMask__Base
{
}


internal partial class APM_XObjectImage_ImageMask__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_ImageMask";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_XObjectImage_ImageMask>(obj, "ImageMask", IndirectRequirement.Either);
        if (val == null) { return; }
        var ImageMask = obj.Get("ImageMask");
        var BitsPerComponent = obj.Get("BitsPerComponent");
        if (!((eq(ImageMask,PdfBoolean.True)&&eq(BitsPerComponent,1)&&!obj.ContainsKey("ColorSpace")&&!obj.ContainsKey("Mask")||eq(ImageMask,PdfBoolean.False)))) 
        {
            ctx.Fail<APM_XObjectImage_ImageMask>($"Value failed special case check: fn:Eval(((@ImageMask==true) && (@BitsPerComponent==1) && fn:Not(fn:IsPresent(ColorSpace)) && fn:Not(fn:IsPresent(Mask))) || (@ImageMask==false))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_Mask 
/// </summary>
internal partial class APM_XObjectImage_Mask : APM_XObjectImage_Mask__Base
{
}


internal partial class APM_XObjectImage_Mask__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Mask";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImage_Mask>(obj, "Mask", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var ImageMask = obj.Get("ImageMask");
                    if (eq(ImageMask,PdfBoolean.True)) 
                    {
                        ctx.Fail<APM_XObjectImage_Mask>($"Value failed special case check: fn:Not(fn:IsPresent(@ImageMask==true))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfIntegersGeneral, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_XObjectImage_Mask>("Mask is required to be indirect when a stream"); return; }
                    var ImageMask = obj.Get("ImageMask");
                    if (eq(ImageMask,PdfBoolean.True)) 
                    {
                        ctx.Fail<APM_XObjectImage_Mask>($"Value failed special case check: fn:Not(fn:IsPresent(@ImageMask==true))");
                    }
                    // no value restrictions
                    ctx.Run<APM_XObjectImageMask, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImage_Mask>("Mask is required to one of 'array;stream', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImage_Decode 
/// </summary>
internal partial class APM_XObjectImage_Decode : APM_XObjectImage_Decode__Base
{
}


internal partial class APM_XObjectImage_Decode__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Decode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectImage_Decode>(obj, "Decode", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectImage_Interpolate 
/// </summary>
internal partial class APM_XObjectImage_Interpolate : APM_XObjectImage_Interpolate__Base
{
}


internal partial class APM_XObjectImage_Interpolate__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Interpolate";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_XObjectImage_Interpolate>(obj, "Interpolate", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_Alternates 
/// </summary>
internal partial class APM_XObjectImage_Alternates : APM_XObjectImage_Alternates__Base
{
}


internal partial class APM_XObjectImage_Alternates__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Alternates";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectImage_Alternates>(obj, "Alternates", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfImageAlternates, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectImage_SMask 
/// </summary>
internal partial class APM_XObjectImage_SMask : APM_XObjectImage_SMask__Base
{
}


internal partial class APM_XObjectImage_SMask__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_SMask";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_XObjectImage_SMask>(obj, "SMask", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // TODO special case: fn:SinceVersion(1.5,fn:Not(fn:IsPresent(@SMaskInData>0)))
        // no value restrictions
        ctx.Run<APM_XObjectImageSoftMask, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// XObjectImage_SMaskInData 
/// </summary>
internal partial class APM_XObjectImage_SMaskInData : APM_XObjectImage_SMaskInData__Base
{
}


internal partial class APM_XObjectImage_SMaskInData__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_SMaskInData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectImage_SMaskInData>(obj, "SMaskInData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 0 || val == 1 || val == 2)) 
        {
            ctx.Fail<APM_XObjectImage_SMaskInData>($"Invalid value {val}, allowed are: [0,1,2]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_Name 
/// </summary>
internal partial class APM_XObjectImage_Name : APM_XObjectImage_Name__Base
{
}


internal partial class APM_XObjectImage_Name__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var val = ctx.GetOptional<PdfName, APM_XObjectImage_Name>(obj, "Name", IndirectRequirement.Either);
        if (((ctx.Version == 1.0m)) && val == null) {
            ctx.Fail<APM_XObjectImage_Name>("Name is required when 'fn:IsRequired(fn:IsPDFVersion(1.0))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_StructParent Table 359
/// </summary>
internal partial class APM_XObjectImage_StructParent : APM_XObjectImage_StructParent__Base
{
}


internal partial class APM_XObjectImage_StructParent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectImage_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if ((ImageIsStructContentItem(obj)) && val == null) {
            ctx.Fail<APM_XObjectImage_StructParent>("StructParent is required when 'fn:IsRequired(fn:ImageIsStructContentItem())"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_ID 
/// </summary>
internal partial class APM_XObjectImage_ID : APM_XObjectImage_ID__Base
{
}


internal partial class APM_XObjectImage_ID__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_ID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_XObjectImage_ID>(obj, "ID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_OPI 
/// </summary>
internal partial class APM_XObjectImage_OPI : APM_XObjectImage_OPI__Base
{
}


internal partial class APM_XObjectImage_OPI__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_OPI";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectImage_OPI>(obj, "OPI", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        if (APM_OPIVersion13.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion13, PdfDictionary>(stack, val, obj);
        } else if (APM_OPIVersion20.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion20, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectImage_OPI>("OPI did not match any allowable types: '[OPIVersion13,OPIVersion20]'");
        }
        
    }


}

/// <summary>
/// XObjectImage_Metadata 
/// </summary>
internal partial class APM_XObjectImage_Metadata : APM_XObjectImage_Metadata__Base
{
}


internal partial class APM_XObjectImage_Metadata__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Metadata";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_XObjectImage_Metadata>(obj, "Metadata", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Metadata, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// XObjectImage_OC 
/// </summary>
internal partial class APM_XObjectImage_OC : APM_XObjectImage_OC__Base
{
}


internal partial class APM_XObjectImage_OC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectImage_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectImage_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// XObjectImage_AF 
/// </summary>
internal partial class APM_XObjectImage_AF : APM_XObjectImage_AF__Base
{
}


internal partial class APM_XObjectImage_AF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImage_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImage_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImage_Measure 
/// </summary>
internal partial class APM_XObjectImage_Measure : APM_XObjectImage_Measure__Base
{
}


internal partial class APM_XObjectImage_Measure__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Measure";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectImage_Measure>(obj, "Measure", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_MeasureRL.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_MeasureRL, PdfDictionary>(stack, val, obj);
        } else if (APM_MeasureGEO.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_MeasureGEO, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectImage_Measure>("Measure did not match any allowable types: '[MeasureRL,MeasureGEO]'");
        }
        
    }


}

/// <summary>
/// XObjectImage_PtData 
/// </summary>
internal partial class APM_XObjectImage_PtData : APM_XObjectImage_PtData__Base
{
}


internal partial class APM_XObjectImage_PtData__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_PtData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectImage_PtData>(obj, "PtData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PointData, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectImage_Length 
/// </summary>
internal partial class APM_XObjectImage_Length : APM_XObjectImage_Length__Base
{
}


internal partial class APM_XObjectImage_Length__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectImage_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_Filter 
/// </summary>
internal partial class APM_XObjectImage_Filter : APM_XObjectImage_Filter__Base
{
}


internal partial class APM_XObjectImage_Filter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImage_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var DecodeParms = obj.Get("DecodeParms");
                    var Filter = obj.Get("Filter");
                    if (!(eq(((DecodeParms as PdfArray)?.Count),((Filter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_XObjectImage_Filter>($"Value failed special case check: fn:Eval(fn:ArrayLength(DecodeParms)==fn:ArrayLength(Filter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || (ctx.Version >= 1.2m && val == "FlateDecode") || val == "RunLengthDecode" || val == "CCITTFaxDecode" || (ctx.Version >= 1.4m && val == "JBIG2Decode") || val == "DCTDecode" || (ctx.Version >= 1.5m && val == "JPXDecode") || (ctx.Version >= 1.5m && val == "Crypt"))) 
                    {
                        ctx.Fail<APM_XObjectImage_Filter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,fn:SinceVersion(1.2,FlateDecode),RunLengthDecode,CCITTFaxDecode,fn:SinceVersion(1.4,JBIG2Decode),DCTDecode,fn:SinceVersion(1.5,JPXDecode),fn:SinceVersion(1.5,Crypt)]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImage_Filter>("Filter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImage_DecodeParms 
/// </summary>
internal partial class APM_XObjectImage_DecodeParms : APM_XObjectImage_DecodeParms__Base
{
}


internal partial class APM_XObjectImage_DecodeParms__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_DecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImage_DecodeParms>(obj, "DecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var DecodeParms = obj.Get("DecodeParms");
                    var Filter = obj.Get("Filter");
                    if (!(eq(((DecodeParms as PdfArray)?.Count),((Filter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_XObjectImage_DecodeParms>($"Value failed special case check: fn:Eval(fn:ArrayLength(DecodeParms)==fn:ArrayLength(Filter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterCCITTFaxDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterCCITTFaxDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterDCTDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterDCTDecode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.2m && APM_FilterFlateDecode.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.4m && APM_FilterJBIG2Decode.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterJBIG2Decode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_FilterCrypt.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterCrypt, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectImage_DecodeParms>("DecodeParms did not match any allowable types: '[FilterLZWDecode,fn:SinceVersion(1.2,FilterFlateDecode),FilterCCITTFaxDecode,fn:SinceVersion(1.4,FilterJBIG2Decode),FilterDCTDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImage_DecodeParms>("DecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImage_F 
/// </summary>
internal partial class APM_XObjectImage_F : APM_XObjectImage_F__Base
{
}


internal partial class APM_XObjectImage_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImage_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    if (!(ctx.Version >= 1.1m)) 
                    {
                        ctx.Fail<APM_XObjectImage_F>("F was type dictionary but not allowed for current conditions: 'fn:SinceVersion(1.1,dictionary)'");
                    }
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if ((ctx.Version >= 1.1m && APM_FileSpecification.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectImage_F>("F did not match any allowable types: '[fn:SinceVersion(1.1,FileSpecification)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImage_F>("F is required to one of 'fn:SinceVersion(1.1,dictionary);string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImage_FFilter 
/// </summary>
internal partial class APM_XObjectImage_FFilter : APM_XObjectImage_FFilter__Base
{
}


internal partial class APM_XObjectImage_FFilter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_FFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImage_FFilter>(obj, "FFilter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var FDecodeParms = obj.Get("FDecodeParms");
                    var FFilter = obj.Get("FFilter");
                    if (!(eq(((FDecodeParms as PdfArray)?.Count),((FFilter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_XObjectImage_FFilter>($"Value failed special case check: fn:Eval(fn:ArrayLength(FDecodeParms)==fn:ArrayLength(FFilter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || val == "CCITTFaxDecode" || (ctx.Version >= 1.4m && val == "JBIG2Decode") || val == "DCTDecode" || (ctx.Version >= 1.5m && val == "JPXDecode") || (ctx.Version >= 1.5m && val == "Crypt"))) 
                    {
                        ctx.Fail<APM_XObjectImage_FFilter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,CCITTFaxDecode,fn:SinceVersion(1.4,JBIG2Decode),DCTDecode,fn:SinceVersion(1.5,JPXDecode),fn:SinceVersion(1.5,Crypt)]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImage_FFilter>("FFilter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImage_FDecodeParms 
/// </summary>
internal partial class APM_XObjectImage_FDecodeParms : APM_XObjectImage_FDecodeParms__Base
{
}


internal partial class APM_XObjectImage_FDecodeParms__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_FDecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImage_FDecodeParms>(obj, "FDecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var FDecodeParms = obj.Get("FDecodeParms");
                    var FFilter = obj.Get("FFilter");
                    if (!(eq(((FDecodeParms as PdfArray)?.Count),((FFilter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_XObjectImage_FDecodeParms>($"Value failed special case check: fn:Eval(fn:ArrayLength(FDecodeParms)==fn:ArrayLength(FFilter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterCCITTFaxDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterCCITTFaxDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterDCTDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterDCTDecode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.4m && APM_FilterJBIG2Decode.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterJBIG2Decode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_FilterCrypt.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterCrypt, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectImage_FDecodeParms>("FDecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,FilterCCITTFaxDecode,fn:SinceVersion(1.4,FilterJBIG2Decode),FilterDCTDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImage_FDecodeParms>("FDecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImage_DL 
/// </summary>
internal partial class APM_XObjectImage_DL : APM_XObjectImage_DL__Base
{
}


internal partial class APM_XObjectImage_DL__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_DL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectImage_DL>(obj, "DL", IndirectRequirement.Either);
        if (val == null) { return; }
        var DL = obj.Get("DL");
        if (!(gte(DL,0))) 
        {
            ctx.Fail<APM_XObjectImage_DL>($"Value failed special case check: fn:Eval(@DL>=0)");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_GTS_XID PDF/VT-2
/// </summary>
internal partial class APM_XObjectImage_GTS_XID : APM_XObjectImage_GTS_XID__Base
{
}


internal partial class APM_XObjectImage_GTS_XID__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_GTS_XID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_XObjectImage_GTS_XID>(obj, "GTS_XID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_GTS_Scope PDF/VT-2
/// </summary>
internal partial class APM_XObjectImage_GTS_Scope : APM_XObjectImage_GTS_Scope__Base
{
}


internal partial class APM_XObjectImage_GTS_Scope__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_GTS_Scope";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectImage_GTS_Scope>(obj, "GTS_Scope", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "SingleUse" || val == "Record" || val == "File" || val == "Stream" || val == "Global" || val == "Unknown")) 
        {
            ctx.Fail<APM_XObjectImage_GTS_Scope>($"Invalid value {val}, allowed are: [SingleUse,Record,File,Stream,Global,Unknown]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_GTS_Env PDF/VT-2
/// </summary>
internal partial class APM_XObjectImage_GTS_Env : APM_XObjectImage_GTS_Env__Base
{
}


internal partial class APM_XObjectImage_GTS_Env__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_GTS_Env";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var GTSScope = obj.Get("GTS_Scope");
        var val = ctx.GetOptional<PdfString, APM_XObjectImage_GTS_Env>(obj, "GTS_Env", IndirectRequirement.Either);
        if (((eq(GTSScope,"Stream")||eq(GTSScope,"Global"))) && val == null) {
            ctx.Fail<APM_XObjectImage_GTS_Env>("GTS_Env is required when 'fn:IsRequired((@GTS_Scope==Stream) || (@GTS_Scope==Global))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImage_GTS_Encapsulated PDF/VT-2
/// </summary>
internal partial class APM_XObjectImage_GTS_Encapsulated : APM_XObjectImage_GTS_Encapsulated__Base
{
}


internal partial class APM_XObjectImage_GTS_Encapsulated__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImage_GTS_Encapsulated";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_XObjectImage_GTS_Encapsulated>(obj, "GTS_Encapsulated", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

