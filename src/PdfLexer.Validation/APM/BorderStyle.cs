// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_BorderStyle : APM_BorderStyle__Base
{
}

internal partial class APM_BorderStyle__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "BorderStyle";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_BorderStyle_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_BorderStyle_W, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_BorderStyle_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_BorderStyle_D, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_BorderStyle>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_BorderStyle>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_BorderStyle>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_BorderStyle>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_BorderStyle>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_BorderStyle>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_BorderStyle>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_BorderStyle>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_BorderStyle>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_BorderStyle_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_12 { get; } = new List<string> 
    {
        "Type", "W", "S", "D"
    };
    public static List<string> AllowedFields_13 { get; } = new List<string> 
    {
        "Type", "W", "S", "D"
    };
    public static List<string> AllowedFields_14 { get; } = new List<string> 
    {
        "Type", "W", "S", "D"
    };
    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "Type", "W", "S", "D"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "Type", "W", "S", "D"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "W", "S", "D"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "W", "S", "D"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "W", "S", "D"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "W", "S", "D"
    };
    


}

/// <summary>
/// BorderStyle_Type Table 168
/// </summary>
internal partial class APM_BorderStyle_Type : APM_BorderStyle_Type__Base
{
}


internal partial class APM_BorderStyle_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "BorderStyle_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_BorderStyle_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Border)) 
        {
            ctx.Fail<APM_BorderStyle_Type>($"Invalid value {val}, allowed are: [Border]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// BorderStyle_W 
/// </summary>
internal partial class APM_BorderStyle_W : APM_BorderStyle_W__Base
{
}


internal partial class APM_BorderStyle_W__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "BorderStyle_W";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_BorderStyle_W>(obj, "W", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var W = obj.Get("W");
        if (!(gte(W,0.0m))) 
        {
            ctx.Fail<APM_BorderStyle_W>($"Invalid value {val}, allowed are: [fn:Eval(@W>=0.0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// BorderStyle_S 
/// </summary>
internal partial class APM_BorderStyle_S : APM_BorderStyle_S__Base
{
}


internal partial class APM_BorderStyle_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "BorderStyle_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_BorderStyle_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.S || val == PdfName.B || val == PdfName.D || val == PdfName.I || val == PdfName.U)) 
        {
            ctx.Fail<APM_BorderStyle_S>($"Invalid value {val}, allowed are: [S,B,D,I,U]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// BorderStyle_D 
/// </summary>
internal partial class APM_BorderStyle_D : APM_BorderStyle_D__Base
{
}


internal partial class APM_BorderStyle_D__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "BorderStyle_D";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_BorderStyle_D>(obj, "D", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        ctx.Run<APM_ArrayOfDashPatterns, PdfArray>(stack, val, obj);
        
    }


}

