// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_URTransformParamAnnotsArray : ISpecification<PdfArray>
{
    public static string Name { get; } = "URTransformParamAnnotsArray";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_URTransformParamAnnotsArray_x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_URTransformParamAnnotsArray_x, PdfArray>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }
}

/// <summary>
/// URTransformParamAnnotsArray_* Table 258, Annots cell
/// </summary>
internal partial class APM_URTransformParamAnnotsArray_x : ISpecification<PdfArray>
{
    public static string Name { get; } = "URTransformParamAnnotsArray_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=1) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var (val, wasIR) = ctx.GetOptional<PdfName, APM_URTransformParamAnnotsArray_x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            
            
            if (!(val == PdfName.Create || val == PdfName.Delete || val == PdfName.Modify || val == PdfName.Copy || val == PdfName.Import || val == PdfName.Export || val == PdfName.Online || val == PdfName.SummaryView)) 
            {
                ctx.Fail<APM_URTransformParamAnnotsArray_x>($"Invalid value {val}, allowed are: [Create,Delete,Modify,Copy,Import,Export,Online,SummaryView]");
            }
            // no linked objects
            
        }
    }
}

