// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AnnotLine : APM_AnnotLine__Base
{
}

internal partial class APM_AnnotLine__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AnnotLine";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AnnotLine_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_Rect, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_Contents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_NM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_M, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_AP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_AS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_Border, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_ca, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_CA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_BM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_Lang, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_T, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_Popup, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_RC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_CreationDate, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_IRT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_Subj, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_RT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_L, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_BS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_LE, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_IC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_LL, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_LLE, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_Cap, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_IT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_LLO, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_CP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_Measure, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_CO, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLine_ExData, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLine>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLine>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLine>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLine>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLine>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLine>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLine>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLine>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_AnnotLine_Type, PdfDictionary>(new CallStack(), obj, null);
        c.Run<APM_AnnotLine_Subtype, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "M", "F", "AP", "AS", "Border", "C", "StructParent", "T", "Popup", "L", "BS"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "CA", "T", "Popup", "L", "BS", "LE", "IC"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "L", "BS", "LE", "IC"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "L", "BS", "LE", "IC", "LL", "LLE", "Cap", "IT"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "L", "BS", "LE", "IC", "LL", "LLE", "Cap", "IT", "LLO", "CP", "Measure", "CO", "ExData"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "L", "BS", "LE", "IC", "LL", "LLE", "Cap", "IT", "LLO", "CP", "Measure", "CO", "ExData"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "L", "BS", "LE", "IC", "LL", "LLE", "Cap", "IT", "LLO", "CP", "Measure", "CO", "ExData"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "AF", "ca", "CA", "BM", "Lang", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "L", "BS", "LE", "IC", "LL", "LLE", "Cap", "IT", "LLO", "CP", "Measure", "CO", "ExData"
    };
    


}

/// <summary>
/// AnnotLine_Type Table 166 and Table 172 and Table 178 (markup annot)
/// </summary>
internal partial class APM_AnnotLine_Type : APM_AnnotLine_Type__Base
{
}


internal partial class APM_AnnotLine_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotLine_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Annot)) 
        {
            ctx.Fail<APM_AnnotLine_Type>($"Invalid value {val}, allowed are: [Annot]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_Subtype 
/// </summary>
internal partial class APM_AnnotLine_Subtype : APM_AnnotLine_Subtype__Base
{
}


internal partial class APM_AnnotLine_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_AnnotLine_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Line)) 
        {
            ctx.Fail<APM_AnnotLine_Subtype>($"Invalid value {val}, allowed are: [Line]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_Rect 
/// </summary>
internal partial class APM_AnnotLine_Rect : APM_AnnotLine_Rect__Base
{
}


internal partial class APM_AnnotLine_Rect__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Rect";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_AnnotLine_Rect>(obj, "Rect", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_Contents 
/// </summary>
internal partial class APM_AnnotLine_Contents : APM_AnnotLine_Contents__Base
{
}


internal partial class APM_AnnotLine_Contents__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Contents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotLine_Contents>(obj, "Contents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_P 
/// </summary>
internal partial class APM_AnnotLine_P : APM_AnnotLine_P__Base
{
}


internal partial class APM_AnnotLine_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLine_P>(obj, "P", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PageObject, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_NM 
/// </summary>
internal partial class APM_AnnotLine_NM : APM_AnnotLine_NM__Base
{
}


internal partial class APM_AnnotLine_NM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_NM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotLine_NM>(obj, "NM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_M 
/// </summary>
internal partial class APM_AnnotLine_M : APM_AnnotLine_M__Base
{
}


internal partial class APM_AnnotLine_M__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotLine_M>(obj, "M", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            
            // TODO MC date;string-text
            
            default:
                ctx.Fail<APM_AnnotLine_M>("M is required to one of 'date;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotLine_F Table 167
/// </summary>
internal partial class APM_AnnotLine_F : APM_AnnotLine_F__Base
{
}


internal partial class APM_AnnotLine_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotLine_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!((ctx.Version >= 1.4m || BitsClear(val,0b11111111111111111111111110000000))&&(ctx.Version >= 1.5m || BitsClear(val,0b11111111111111111111111100000000))&&(ctx.Version >= 1.6m || BitsClear(val,0b11111111111111111111111000000000))&&(ctx.Version < 1.7m || BitsClear(val,0b11111111111111111111110000000000)))) 
        {
            ctx.Fail<APM_AnnotLine_F>($"Value failed special case check: fn:Eval(fn:BeforeVersion(1.4,fn:BitsClear(8,32)) && fn:BeforeVersion(1.5,fn:BitsClear(9,32)) && fn:BeforeVersion(1.6,fn:BitsClear(10,32)) && fn:SinceVersion(1.7,fn:BitsClear(11,32)))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_AP 
/// </summary>
internal partial class APM_AnnotLine_AP : APM_AnnotLine_AP__Base
{
}


internal partial class APM_AnnotLine_AP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_AP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var Rect = obj.Get("Rect");
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLine_AP>(obj, "AP", IndirectRequirement.Either);
        if (((ctx.Version < 2.0m || (gt(RectWidth(Rect),0)||gt(RectHeight(Rect),0)))) && val == null) {
            ctx.Fail<APM_AnnotLine_AP>("AP is required when 'fn:IsRequired(fn:SinceVersion(2.0,(fn:RectWidth(Rect)>0) || (fn:RectHeight(Rect)>0)))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Appearance, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_AS 
/// </summary>
internal partial class APM_AnnotLine_AS : APM_AnnotLine_AS__Base
{
}


internal partial class APM_AnnotLine_AS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_AS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var APN = obj.Get("AP")?.Get("N");
        var APR = obj.Get("AP")?.Get("R");
        var APD = obj.Get("AP")?.Get("D");
        var val = ctx.GetOptional<PdfName, APM_AnnotLine_AS>(obj, "AS", IndirectRequirement.Either);
        if (((APN != null)||(APR != null)||(APD != null)) && val == null) {
            ctx.Fail<APM_AnnotLine_AS>("AS is required when 'fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_Border 
/// </summary>
internal partial class APM_AnnotLine_Border : APM_AnnotLine_Border__Base
{
}


internal partial class APM_AnnotLine_Border__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Border";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotLine_Border>(obj, "Border", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        ctx.Run<APM_ArrayOf_4AnnotBorderCharacteristics, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_C 
/// </summary>
internal partial class APM_AnnotLine_C : APM_AnnotLine_C__Base
{
}


internal partial class APM_AnnotLine_C__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotLine_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4NumbersColorAnnotation, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_StructParent Table 359
/// </summary>
internal partial class APM_AnnotLine_StructParent : APM_AnnotLine_StructParent__Base
{
}


internal partial class APM_AnnotLine_StructParent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotLine_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_OC 
/// </summary>
internal partial class APM_AnnotLine_OC : APM_AnnotLine_OC__Base
{
}


internal partial class APM_AnnotLine_OC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLine_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotLine_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// AnnotLine_AF 
/// </summary>
internal partial class APM_AnnotLine_AF : APM_AnnotLine_AF__Base
{
}


internal partial class APM_AnnotLine_AF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotLine_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotLine_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotLine_ca 
/// </summary>
internal partial class APM_AnnotLine_ca : APM_AnnotLine_ca__Base
{
}


internal partial class APM_AnnotLine_ca__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_ca";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotLine_ca>(obj, "ca", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var ca = obj.Get("ca");
        if (!((gte(ca,0.0m)&&lte(ca,1.0m)))) 
        {
            ctx.Fail<APM_AnnotLine_ca>($"Invalid value {val}, allowed are: [fn:Eval((@ca>=0.0) && (@ca<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_CA 
/// </summary>
internal partial class APM_AnnotLine_CA : APM_AnnotLine_CA__Base
{
}


internal partial class APM_AnnotLine_CA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_CA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotLine_CA>(obj, "CA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var CA = obj.Get("CA");
        if (!((gte(CA,0.0m)&&lte(CA,1.0m)))) 
        {
            ctx.Fail<APM_AnnotLine_CA>($"Invalid value {val}, allowed are: [fn:Eval((@CA>=0.0) && (@CA<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_BM Table 134 and Table 135
/// </summary>
internal partial class APM_AnnotLine_BM : APM_AnnotLine_BM__Base
{
}


internal partial class APM_AnnotLine_BM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_BM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotLine_BM>(obj, "BM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!((ctx.Version < 1.4m && val == PdfName.Compatible) || val == PdfName.Normal || val == PdfName.Multiply || val == PdfName.Screen || val == PdfName.Difference || val == PdfName.Darken || val == PdfName.Lighten || val == PdfName.ColorDodge || val == PdfName.ColorBurn || val == PdfName.Exclusion || val == PdfName.HardLight || val == PdfName.Overlay || val == PdfName.SoftLight || val == PdfName.Luminosity || val == PdfName.Hue || val == PdfName.Saturation || val == PdfName.Color)) 
        {
            ctx.Fail<APM_AnnotLine_BM>($"Invalid value {val}, allowed are: [fn:Deprecated(1.4,Compatible),Normal,Multiply,Screen,Difference,Darken,Lighten,ColorDodge,ColorBurn,Exclusion,HardLight,Overlay,SoftLight,Luminosity,Hue,Saturation,Color]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_Lang 
/// </summary>
internal partial class APM_AnnotLine_Lang : APM_AnnotLine_Lang__Base
{
}


internal partial class APM_AnnotLine_Lang__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Lang";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotLine_Lang>(obj, "Lang", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_T 
/// </summary>
internal partial class APM_AnnotLine_T : APM_AnnotLine_T__Base
{
}


internal partial class APM_AnnotLine_T__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotLine_T>(obj, "T", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_Popup 
/// </summary>
internal partial class APM_AnnotLine_Popup : APM_AnnotLine_Popup__Base
{
}


internal partial class APM_AnnotLine_Popup__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Popup";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLine_Popup>(obj, "Popup", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_AnnotPopup, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_RC 
/// </summary>
internal partial class APM_AnnotLine_RC : APM_AnnotLine_RC__Base
{
}


internal partial class APM_AnnotLine_RC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_RC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotLine_RC>(obj, "RC", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_AnnotLine_RC>("RC is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotLine_RC>("RC is required to one of 'stream;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotLine_CreationDate 
/// </summary>
internal partial class APM_AnnotLine_CreationDate : APM_AnnotLine_CreationDate__Base
{
}


internal partial class APM_AnnotLine_CreationDate__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_CreationDate";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotLine_CreationDate>(obj, "CreationDate", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_IRT 
/// </summary>
internal partial class APM_AnnotLine_IRT : APM_AnnotLine_IRT__Base
{
}


internal partial class APM_AnnotLine_IRT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_IRT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLine_IRT>(obj, "IRT", IndirectRequirement.Either);
        if ((obj.ContainsKey(PdfName.RT)) && val == null) {
            ctx.Fail<APM_AnnotLine_IRT>("IRT is required when 'fn:IsRequired(fn:IsPresent(RT))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        if (APM_AnnotText.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotText, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotLink.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotLink, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotFreeText.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotFreeText, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotLine.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotLine, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSquare.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSquare, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotCircle.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotCircle, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPolygon.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPolygon, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotHighlight.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotHighlight, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotUnderline.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotUnderline, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSquiggly.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSquiggly, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotStrikeOut.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotStrikeOut, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotCaret.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotCaret, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotStamp.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotStamp, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotInk.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotInk, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPopup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPopup, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotFileAttachment.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotFileAttachment, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSound.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSound, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotMovie.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotMovie, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotScreen.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotScreen, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotWidget.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotWidget, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPrinterMark.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPrinterMark, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.6m && APM_AnnotWatermark.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_AnnotWatermark, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.6m && APM_Annot3D.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_Annot3D, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.7m && APM_AnnotRedact.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_AnnotRedact, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_AnnotProjection.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_AnnotProjection, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_AnnotRichMedia.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_AnnotRichMedia, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotLine_IRT>("IRT did not match any allowable types: '[AnnotText,AnnotLink,AnnotFreeText,AnnotLine,AnnotSquare,AnnotCircle,AnnotPolygon,AnnotHighlight,AnnotUnderline,AnnotSquiggly,AnnotStrikeOut,AnnotCaret,AnnotStamp,AnnotInk,AnnotPopup,AnnotFileAttachment,AnnotSound,AnnotMovie,AnnotScreen,AnnotWidget,AnnotPrinterMark,fn:SinceVersion(1.6,AnnotWatermark),fn:SinceVersion(1.6,Annot3D),fn:SinceVersion(1.7,AnnotRedact),fn:SinceVersion(2.0,AnnotProjection),fn:SinceVersion(2.0,AnnotRichMedia)]'");
        }
        
    }


}

/// <summary>
/// AnnotLine_Subj 
/// </summary>
internal partial class APM_AnnotLine_Subj : APM_AnnotLine_Subj__Base
{
}


internal partial class APM_AnnotLine_Subj__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Subj";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotLine_Subj>(obj, "Subj", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_RT 
/// </summary>
internal partial class APM_AnnotLine_RT : APM_AnnotLine_RT__Base
{
}


internal partial class APM_AnnotLine_RT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_RT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotLine_RT>(obj, "RT", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        
        
        if (!(val == PdfName.R || val == PdfName.Group)) 
        {
            ctx.Fail<APM_AnnotLine_RT>($"Invalid value {val}, allowed are: [R,Group]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_L 
/// </summary>
internal partial class APM_AnnotLine_L : APM_AnnotLine_L__Base
{
}


internal partial class APM_AnnotLine_L__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_L";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_AnnotLine_L>(obj, "L", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_BS 
/// </summary>
internal partial class APM_AnnotLine_BS : APM_AnnotLine_BS__Base
{
}


internal partial class APM_AnnotLine_BS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_BS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLine_BS>(obj, "BS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_BorderStyle, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_LE 
/// </summary>
internal partial class APM_AnnotLine_LE : APM_AnnotLine_LE__Base
{
}


internal partial class APM_AnnotLine_LE__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_LE";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotLine_LE>(obj, "LE", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_2LineEndingsNames, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_IC 
/// </summary>
internal partial class APM_AnnotLine_IC : APM_AnnotLine_IC__Base
{
}


internal partial class APM_AnnotLine_IC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_IC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotLine_IC>(obj, "IC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4NumbersColorAnnotation, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_LL 
/// </summary>
internal partial class APM_AnnotLine_LL : APM_AnnotLine_LL__Base
{
}


internal partial class APM_AnnotLine_LL__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_LL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var val = ctx.GetOptional<PdfNumber, APM_AnnotLine_LL>(obj, "LL", IndirectRequirement.Either);
        if ((obj.ContainsKey(PdfName.LLE)) && val == null) {
            ctx.Fail<APM_AnnotLine_LL>("LL is required when 'fn:IsRequired(fn:IsPresent(LLE))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_LLE 
/// </summary>
internal partial class APM_AnnotLine_LLE : APM_AnnotLine_LLE__Base
{
}


internal partial class APM_AnnotLine_LLE__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_LLE";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotLine_LLE>(obj, "LLE", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var LLE = obj.Get("LLE");
        if (!(gte(LLE,0))) 
        {
            ctx.Fail<APM_AnnotLine_LLE>($"Invalid value {val}, allowed are: [fn:Eval(@LLE>=0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_Cap 
/// </summary>
internal partial class APM_AnnotLine_Cap : APM_AnnotLine_Cap__Base
{
}


internal partial class APM_AnnotLine_Cap__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Cap";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_AnnotLine_Cap>(obj, "Cap", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_IT 
/// </summary>
internal partial class APM_AnnotLine_IT : APM_AnnotLine_IT__Base
{
}


internal partial class APM_AnnotLine_IT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_IT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotLine_IT>(obj, "IT", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.LineArrow || val == PdfName.LineDimension)) 
        {
            ctx.Fail<APM_AnnotLine_IT>($"Invalid value {val}, allowed are: [LineArrow,LineDimension]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_LLO 
/// </summary>
internal partial class APM_AnnotLine_LLO : APM_AnnotLine_LLO__Base
{
}


internal partial class APM_AnnotLine_LLO__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_LLO";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotLine_LLO>(obj, "LLO", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var LLO = obj.Get("LLO");
        if (!(gt(LLO,0))) 
        {
            ctx.Fail<APM_AnnotLine_LLO>($"Invalid value {val}, allowed are: [fn:Eval(@LLO>0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_CP 
/// </summary>
internal partial class APM_AnnotLine_CP : APM_AnnotLine_CP__Base
{
}


internal partial class APM_AnnotLine_CP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_CP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotLine_CP>(obj, "CP", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        
        
        if (!(val == PdfName.Inline || val == PdfName.Top)) 
        {
            ctx.Fail<APM_AnnotLine_CP>($"Invalid value {val}, allowed are: [Inline,Top]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLine_Measure 
/// </summary>
internal partial class APM_AnnotLine_Measure : APM_AnnotLine_Measure__Base
{
}


internal partial class APM_AnnotLine_Measure__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_Measure";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLine_Measure>(obj, "Measure", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_MeasureRL.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_MeasureRL, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_MeasureGEO.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_MeasureGEO, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotLine_Measure>("Measure did not match any allowable types: '[MeasureRL,fn:SinceVersion(2.0,MeasureGEO)]'");
        }
        
    }


}

/// <summary>
/// AnnotLine_CO 
/// </summary>
internal partial class APM_AnnotLine_CO : APM_AnnotLine_CO__Base
{
}


internal partial class APM_AnnotLine_CO__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_CO";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotLine_CO>(obj, "CO", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:IsMeaningful, not pertinent to validation
        // no value restrictions
        ctx.Run<APM_ArrayOf_2Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLine_ExData 2D markup annots only 
/// </summary>
internal partial class APM_AnnotLine_ExData : APM_AnnotLine_ExData__Base
{
}


internal partial class APM_AnnotLine_ExData__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLine_ExData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLine_ExData>(obj, "ExData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_ExData3DMarkup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ExData3DMarkup, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version == 1.7m && (ctx.Extensions.Contains(PdfName.ADBE_Extn3) && APM_ExDataMarkupGeo.MatchesType(ctx, val)))) 
        {
            ctx.Run<APM_ExDataMarkupGeo, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_ExDataMarkupGeo.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ExDataMarkupGeo, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_ExDataProjection.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ExDataProjection, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotLine_ExData>("ExData did not match any allowable types: '[ExData3DMarkup,fn:IsPDFVersion(1.7,fn:Extension(ADBE_Extn3,ExDataMarkupGeo)),fn:SinceVersion(2.0,ExDataMarkupGeo),fn:SinceVersion(2.0,ExDataProjection)]'");
        }
        
    }


}

