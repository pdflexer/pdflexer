// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_3DRenderMode : APM_3DRenderMode__Base
{
}

internal partial class APM_3DRenderMode__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "3DRenderMode";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_3DRenderMode_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DRenderMode_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DRenderMode_AC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DRenderMode_FC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DRenderMode_O, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DRenderMode_CV, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_3DRenderMode>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_3DRenderMode>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_3DRenderMode>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_3DRenderMode>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_3DRenderMode_Type, PdfDictionary>(new CallStack(), obj, null);
        c.Run<APM_3DRenderMode_Subtype, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "AC", "FC", "O", "CV"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "AC", "FC", "O", "CV"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "AC", "FC", "O", "CV"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "AC", "FC", "O", "CV"
    };
    


}

/// <summary>
/// 3DRenderMode_Type Table 318
/// </summary>
internal partial class APM_3DRenderMode_Type : APM_3DRenderMode_Type__Base
{
}


internal partial class APM_3DRenderMode_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DRenderMode_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_3DRenderMode_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.N3DRenderMode)) 
        {
            ctx.Fail<APM_3DRenderMode_Type>($"Invalid value {val}, allowed are: [3DRenderMode]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DRenderMode_Subtype 
/// </summary>
internal partial class APM_3DRenderMode_Subtype : APM_3DRenderMode_Subtype__Base
{
}


internal partial class APM_3DRenderMode_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DRenderMode_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_3DRenderMode_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Solid || val == PdfName.SolidWireframe || val == PdfName.Transparent || val == PdfName.TransparentWireframe || val == PdfName.BoundingBox || val == PdfName.TransparentBoundingBox || val == PdfName.TransparentBoundingBoxOutline || val == PdfName.Wireframe || val == PdfName.ShadedWireframe || val == PdfName.HiddenWireframe || val == PdfName.Vertices || val == PdfName.ShadedVertices || val == PdfName.Illustration || val == PdfName.SolidOutline || val == PdfName.ShadedIllustration)) 
        {
            ctx.Fail<APM_3DRenderMode_Subtype>($"Invalid value {val}, allowed are: [Solid,SolidWireframe,Transparent,TransparentWireframe,BoundingBox,TransparentBoundingBox,TransparentBoundingBoxOutline,Wireframe,ShadedWireframe,HiddenWireframe,Vertices,ShadedVertices,Illustration,SolidOutline,ShadedIllustration]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DRenderMode_AC Table 319
/// </summary>
internal partial class APM_3DRenderMode_AC : APM_3DRenderMode_AC__Base
{
}


internal partial class APM_3DRenderMode_AC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DRenderMode_AC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_3DRenderMode_AC>(obj, "AC", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        ctx.Run<APM_ArrayOf_4ColourSpaceEntries, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DRenderMode_FC 
/// </summary>
internal partial class APM_3DRenderMode_FC : APM_3DRenderMode_FC__Base
{
}


internal partial class APM_3DRenderMode_FC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DRenderMode_FC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_3DRenderMode_FC>(obj, "FC", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOf_4ColourSpaceEntries, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == PdfName.BG)) 
                    {
                        ctx.Fail<APM_3DRenderMode_FC>($"Invalid value {val}, allowed are: [BG]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_3DRenderMode_FC>("FC is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// 3DRenderMode_O Opacity
/// </summary>
internal partial class APM_3DRenderMode_O : APM_3DRenderMode_O__Base
{
}


internal partial class APM_3DRenderMode_O__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DRenderMode_O";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_3DRenderMode_O>(obj, "O", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var O = obj.Get("O");
        if (!((gte(O,0)&&lte(O,1)))) 
        {
            ctx.Fail<APM_3DRenderMode_O>($"Invalid value {val}, allowed are: [fn:Eval((@O>=0) && (@O<=1))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DRenderMode_CV 
/// </summary>
internal partial class APM_3DRenderMode_CV : APM_3DRenderMode_CV__Base
{
}


internal partial class APM_3DRenderMode_CV__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DRenderMode_CV";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_3DRenderMode_CV>(obj, "CV", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

