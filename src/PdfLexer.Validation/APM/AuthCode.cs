// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AuthCode : APM_AuthCode_Base
{
}

internal partial class APM_AuthCode_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AuthCode";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AuthCode_MACLocation, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AuthCode_ByteRange, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AuthCode_MAC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AuthCode_SigObjRef, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
        
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    


}

/// <summary>
/// AuthCode_MACLocation ISO/TS 32004 Integrity protection, clause 5.2.3, Table 2
/// </summary>
internal partial class APM_AuthCode_MACLocation : APM_AuthCode_MACLocation_Base
{
}


internal partial class APM_AuthCode_MACLocation_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AuthCode_MACLocation";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_AuthCode_MACLocation>(obj, "MACLocation", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Standalone" || val == "AttachedToSig")) 
        {
            ctx.Fail<APM_AuthCode_MACLocation>($"Invalid value {val}, allowed are: [Standalone,AttachedToSig]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AuthCode_ByteRange 
/// </summary>
internal partial class APM_AuthCode_ByteRange : APM_AuthCode_ByteRange_Base
{
}


internal partial class APM_AuthCode_ByteRange_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AuthCode_ByteRange";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfArray? val;
        {
            var MACLocation = obj.Get("MACLocation");
            if (eq(MACLocation,"Standalone")) {
                val = ctx.GetRequired<PdfArray, APM_AuthCode_ByteRange>(obj, "ByteRange", IndirectRequirement.MustBeDirect);
            } else {
                val = ctx.GetOptional<PdfArray, APM_AuthCode_ByteRange>(obj, "ByteRange", IndirectRequirement.MustBeDirect);
            }
            if (val == null) { return; }
        }
        // TODO special case
        // no value restrictions
        ctx.Run<APM_ArrayOf_4Integers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AuthCode_MAC 
/// </summary>
internal partial class APM_AuthCode_MAC : APM_AuthCode_MAC_Base
{
}


internal partial class APM_AuthCode_MAC_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AuthCode_MAC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfString? val;
        {
            var MACLocation = obj.Get("MACLocation");
            if (eq(MACLocation,"Standalone")) {
                val = ctx.GetRequired<PdfString, APM_AuthCode_MAC>(obj, "MAC", IndirectRequirement.MustBeDirect);
            } else {
                val = ctx.GetOptional<PdfString, APM_AuthCode_MAC>(obj, "MAC", IndirectRequirement.MustBeDirect);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AuthCode_SigObjRef 
/// </summary>
internal partial class APM_AuthCode_SigObjRef : APM_AuthCode_SigObjRef_Base
{
}


internal partial class APM_AuthCode_SigObjRef_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AuthCode_SigObjRef";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfDictionary? val;
        {
            var MACLocation = obj.Get("MACLocation");
            if (eq(MACLocation,"AttachedToSig")) {
                val = ctx.GetRequired<PdfDictionary, APM_AuthCode_SigObjRef>(obj, "SigObjRef", IndirectRequirement.MustBeIndirect);
            } else {
                val = ctx.GetOptional<PdfDictionary, APM_AuthCode_SigObjRef>(obj, "SigObjRef", IndirectRequirement.MustBeIndirect);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        if (APM_Signature.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_Signature, PdfDictionary>(stack, val, obj);
        } else if (APM_DocTimeStamp.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_DocTimeStamp, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AuthCode_SigObjRef>("SigObjRef did not match any allowable types: '[Signature,DocTimeStamp]'");
        }
        
    }


}

