// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_InteractiveForm : APM_InteractiveForm__Base
{
}

internal partial class APM_InteractiveForm__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "InteractiveForm";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_InteractiveForm_Fields, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_InteractiveForm_NeedAppearances, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_InteractiveForm_SigFlags, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_InteractiveForm_CO, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_InteractiveForm_DR, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_InteractiveForm_DA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_InteractiveForm_Q, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_InteractiveForm_XFA, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_InteractiveForm>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_InteractiveForm>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_InteractiveForm>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_InteractiveForm>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_InteractiveForm>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_InteractiveForm>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_InteractiveForm>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_InteractiveForm>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_InteractiveForm>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_12 { get; } = new List<string> 
    {
        "Fields", "NeedAppearances", "DR", "DA", "Q"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Fields", "NeedAppearances", "SigFlags", "CO", "DR", "DA", "Q"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Fields", "NeedAppearances", "SigFlags", "CO", "DR", "DA", "Q"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Fields", "NeedAppearances", "SigFlags", "CO", "DR", "DA", "Q", "XFA"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Fields", "NeedAppearances", "SigFlags", "CO", "DR", "DA", "Q", "XFA"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Fields", "NeedAppearances", "SigFlags", "CO", "DR", "DA", "Q", "XFA"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Fields", "NeedAppearances", "SigFlags", "CO", "DR", "DA", "Q", "XFA"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Fields", "NeedAppearances", "SigFlags", "CO", "DR", "DA", "Q", "XFA"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Fields", "SigFlags", "CO", "DR", "DA", "Q"
    };
    


}

/// <summary>
/// InteractiveForm_Fields Table 224
/// </summary>
internal partial class APM_InteractiveForm_Fields : APM_InteractiveForm_Fields__Base
{
}


internal partial class APM_InteractiveForm_Fields__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "InteractiveForm_Fields";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_InteractiveForm_Fields>(obj, "Fields", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfFields, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// InteractiveForm_NeedAppearances 
/// </summary>
internal partial class APM_InteractiveForm_NeedAppearances : APM_InteractiveForm_NeedAppearances__Base
{
}


internal partial class APM_InteractiveForm_NeedAppearances__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "InteractiveForm_NeedAppearances";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_InteractiveForm_NeedAppearances>(obj, "NeedAppearances", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// InteractiveForm_SigFlags Table 225
/// </summary>
internal partial class APM_InteractiveForm_SigFlags : APM_InteractiveForm_SigFlags__Base
{
}


internal partial class APM_InteractiveForm_SigFlags__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "InteractiveForm_SigFlags";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_InteractiveForm_SigFlags>(obj, "SigFlags", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(BitsClear(obj))) 
        {
            ctx.Fail<APM_InteractiveForm_SigFlags>($"Value failed special case check: fn:Eval(fn:BitsClear(3,32))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// InteractiveForm_CO 
/// </summary>
internal partial class APM_InteractiveForm_CO : APM_InteractiveForm_CO__Base
{
}


internal partial class APM_InteractiveForm_CO__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "InteractiveForm_CO";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_InteractiveForm_CO>(obj, "CO", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfFields, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// InteractiveForm_DR 
/// </summary>
internal partial class APM_InteractiveForm_DR : APM_InteractiveForm_DR__Base
{
}


internal partial class APM_InteractiveForm_DR__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "InteractiveForm_DR";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_InteractiveForm_DR>(obj, "DR", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Resource, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// InteractiveForm_DA 
/// </summary>
internal partial class APM_InteractiveForm_DA : APM_InteractiveForm_DA__Base
{
}


internal partial class APM_InteractiveForm_DA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "InteractiveForm_DA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_InteractiveForm_DA>(obj, "DA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// InteractiveForm_Q 
/// </summary>
internal partial class APM_InteractiveForm_Q : APM_InteractiveForm_Q__Base
{
}


internal partial class APM_InteractiveForm_Q__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "InteractiveForm_Q";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_InteractiveForm_Q>(obj, "Q", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 0 || val == 1 || val == 2)) 
        {
            ctx.Fail<APM_InteractiveForm_Q>($"Invalid value {val}, allowed are: [0,1,2]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// InteractiveForm_XFA 
/// </summary>
internal partial class APM_InteractiveForm_XFA : APM_InteractiveForm_XFA__Base
{
}


internal partial class APM_InteractiveForm_XFA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "InteractiveForm_XFA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_InteractiveForm_XFA>(obj, "XFA", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            // TODO funcs: fn:SinceVersion(1.6,array)
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_InteractiveForm_XFA>("XFA is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_InteractiveForm_XFA>("XFA is required to one of 'fn:SinceVersion(1.6,array);stream', was " + utval.Type);
                return;
        }
    }


}

