// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Reference : APM_Reference__Base
{
}

internal partial class APM_Reference__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Reference";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Reference_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Reference_Page, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Reference_ID, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_Reference>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_Reference>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_Reference>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_Reference>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_Reference>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_Reference>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_Reference>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_14 { get; } = new List<string> 
    {
        "F", "Page", "ID"
    };
    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "F", "Page", "ID"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "F", "Page", "ID"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "F", "Page", "ID"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "F", "Page", "ID"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "F", "Page", "ID"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "F", "Page", "ID"
    };
    


}

/// <summary>
/// Reference_F Table 95
/// </summary>
internal partial class APM_Reference_F : APM_Reference_F__Base
{
}


internal partial class APM_Reference_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Reference_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Reference_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_Reference_F>("F is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_Reference_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Reference_Page 
/// </summary>
internal partial class APM_Reference_Page : APM_Reference_Page__Base
{
}


internal partial class APM_Reference_Page__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Reference_Page";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Reference_Page>(obj, "Page", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_Reference_Page>("Page is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfIntNumber)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    var Page = obj.Get("Page");
                    if (!(gte(Page,0))) 
                    {
                        ctx.Fail<APM_Reference_Page>($"Invalid value {val}, allowed are: [fn:Eval(@Page>=0)]");
                    }
                    // no linked objects
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_Reference_Page>("Page is required to one of 'integer;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Reference_ID 
/// </summary>
internal partial class APM_Reference_ID : APM_Reference_ID__Base
{
}


internal partial class APM_Reference_ID__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Reference_ID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_Reference_ID>(obj, "ID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_2StringsByte, PdfArray>(stack, val, obj);
        
    }


}

