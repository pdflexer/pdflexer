// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_CollectionItem : APM_CollectionItem__Base
{
}

internal partial class APM_CollectionItem__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "CollectionItem";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_CollectionItem_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CollectionItem_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_CollectionItem_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    


}

/// <summary>
/// CollectionItem_Type Table 46
/// </summary>
internal partial class APM_CollectionItem_Type : APM_CollectionItem_Type__Base
{
}


internal partial class APM_CollectionItem_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionItem_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_CollectionItem_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.CollectionItem)) 
        {
            ctx.Fail<APM_CollectionItem_Type>($"Invalid value {val}, allowed are: [CollectionItem]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// CollectionItem_* 
/// </summary>
internal partial class APM_CollectionItem_CatchAll : APM_CollectionItem_CatchAll__Base
{
}


internal partial class APM_CollectionItem_CatchAll__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionItem_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var (utval, wasIR) = ctx.GetOptional<APM_CollectionItem_CatchAll>(obj, key, IndirectRequirement.Either);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                case PdfObjectType.StringObj:
                    {
                        var val =  (PdfString)utval;
                        if (IsDate(val)) 
                        {
                            // date
                            // no indirect obj reqs
                            // no special cases
                            // no value restrictions
                            // no linked objects
                        } else if (true) 
                        {
                            // string-text
                            // no indirect obj reqs
                            // no special cases
                            // no value restrictions
                            // no linked objects
                        }
                        return;
                    }
                case PdfObjectType.DictionaryObj:
                    {
                        var val =  (PdfDictionary)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        ctx.Run<APM_CollectionSubitem, PdfDictionary>(stack, val, obj);
                        return;
                    }
                case PdfObjectType.NumericObj:
                    {
                        var val =  (PdfNumber)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        // no linked objects
                        return;
                    }
                
                default:
                    ctx.Fail<APM_CollectionItem_CatchAll>("* is required to one of 'date;dictionary;number;string-text', was " + utval.Type);
                    return;
            }
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> { "Type" };
}

