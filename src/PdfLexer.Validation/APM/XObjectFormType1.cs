// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_XObjectFormType1 : APM_XObjectFormType1_Base
{
}

internal partial class APM_XObjectFormType1_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "XObjectFormType1";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_XObjectFormType1_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_FormType, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_BBox, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Matrix, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Resources, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Group, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Ref, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Metadata, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_PieceInfo, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_LastModified, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_StructParents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_OPI, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Measure, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_PtData, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_DecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_FFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_FDecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_DL, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_XUID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_GTS_XID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_GTS_Scope, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_GTS_Env, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectFormType1_GTS_Encapsulated, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.0");
                }
                break;
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_XObjectFormType1>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_XObjectFormType1_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_10 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Name", "Length", "Filter", "DecodeParms", "XUID"
    };
    public static HashSet<string> AllowedFields_11 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Name", "Length", "Filter", "DecodeParms", "XUID"
    };
    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "OPI", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "XUID"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OPI", "OC", "Name", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "FormType", "BBox", "Matrix", "Resources", "Group", "Ref", "Metadata", "PieceInfo", "LastModified", "StructParent", "StructParents", "OC", "AF", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    


}

/// <summary>
/// XObjectFormType1_Type Table 5 and Table 93
/// </summary>
internal partial class APM_XObjectFormType1_Type : APM_XObjectFormType1_Type_Base
{
}


internal partial class APM_XObjectFormType1_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectFormType1_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "XObject")) 
        {
            ctx.Fail<APM_XObjectFormType1_Type>($"Invalid value {val}, allowed are: [XObject]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_Subtype 
/// </summary>
internal partial class APM_XObjectFormType1_Subtype : APM_XObjectFormType1_Subtype_Base
{
}


internal partial class APM_XObjectFormType1_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_XObjectFormType1_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Form")) 
        {
            ctx.Fail<APM_XObjectFormType1_Subtype>($"Invalid value {val}, allowed are: [Form]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_FormType 
/// </summary>
internal partial class APM_XObjectFormType1_FormType : APM_XObjectFormType1_FormType_Base
{
}


internal partial class APM_XObjectFormType1_FormType_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_FormType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfIntNumber? val;
        {
            
            if (ctx.Version < 1.3m) {
                val = ctx.GetRequired<PdfIntNumber, APM_XObjectFormType1_FormType>(obj, "FormType", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormType1_FormType>(obj, "FormType", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        {
        
        
        if (!(val == 1)) 
        {
            ctx.Fail<APM_XObjectFormType1_FormType>($"Invalid value {val}, allowed are: [1]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_BBox 
/// </summary>
internal partial class APM_XObjectFormType1_BBox : APM_XObjectFormType1_BBox_Base
{
}


internal partial class APM_XObjectFormType1_BBox_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_BBox";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_XObjectFormType1_BBox>(obj, "BBox", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_Matrix 
/// </summary>
internal partial class APM_XObjectFormType1_Matrix : APM_XObjectFormType1_Matrix_Base
{
}


internal partial class APM_XObjectFormType1_Matrix_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Matrix";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfArray? val;
        {
            
            if (ctx.Version < 1.3m) {
                val = ctx.GetRequired<PdfArray, APM_XObjectFormType1_Matrix>(obj, "Matrix", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfArray, APM_XObjectFormType1_Matrix>(obj, "Matrix", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_Resources 
/// </summary>
internal partial class APM_XObjectFormType1_Resources : APM_XObjectFormType1_Resources_Base
{
}


internal partial class APM_XObjectFormType1_Resources_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Resources";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfDictionary, APM_XObjectFormType1_Resources>(obj, "Resources", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Resource, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormType1_Group 
/// </summary>
internal partial class APM_XObjectFormType1_Group : APM_XObjectFormType1_Group_Base
{
}


internal partial class APM_XObjectFormType1_Group_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Group";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormType1_Group>(obj, "Group", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_GroupAttributes, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormType1_Ref 
/// </summary>
internal partial class APM_XObjectFormType1_Ref : APM_XObjectFormType1_Ref_Base
{
}


internal partial class APM_XObjectFormType1_Ref_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Ref";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormType1_Ref>(obj, "Ref", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Reference, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormType1_Metadata 
/// </summary>
internal partial class APM_XObjectFormType1_Metadata : APM_XObjectFormType1_Metadata_Base
{
}


internal partial class APM_XObjectFormType1_Metadata_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Metadata";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_XObjectFormType1_Metadata>(obj, "Metadata", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Metadata, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// XObjectFormType1_PieceInfo 
/// </summary>
internal partial class APM_XObjectFormType1_PieceInfo : APM_XObjectFormType1_PieceInfo_Base
{
}


internal partial class APM_XObjectFormType1_PieceInfo_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_PieceInfo";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormType1_PieceInfo>(obj, "PieceInfo", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PagePiece, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormType1_LastModified 
/// </summary>
internal partial class APM_XObjectFormType1_LastModified : APM_XObjectFormType1_LastModified_Base
{
}


internal partial class APM_XObjectFormType1_LastModified_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_LastModified";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfString? val;
        {
            
            if (obj.ContainsKey("PieceInfo")) {
                val = ctx.GetRequired<PdfString, APM_XObjectFormType1_LastModified>(obj, "LastModified", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfString, APM_XObjectFormType1_LastModified>(obj, "LastModified", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_StructParent Table 359
/// </summary>
internal partial class APM_XObjectFormType1_StructParent : APM_XObjectFormType1_StructParent_Base
{
}


internal partial class APM_XObjectFormType1_StructParent_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormType1_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_StructParents Table 359
/// </summary>
internal partial class APM_XObjectFormType1_StructParents : APM_XObjectFormType1_StructParents_Base
{
}


internal partial class APM_XObjectFormType1_StructParents_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_StructParents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormType1_StructParents>(obj, "StructParents", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_OPI 
/// </summary>
internal partial class APM_XObjectFormType1_OPI : APM_XObjectFormType1_OPI_Base
{
}


internal partial class APM_XObjectFormType1_OPI_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_OPI";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormType1_OPI>(obj, "OPI", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OPIVersion13.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion13, PdfDictionary>(stack, val, obj);
        } else if (APM_OPIVersion20.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion20, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectFormType1_OPI>("OPI did not match any allowable types: '[OPIVersion13,OPIVersion20]'");
        }
        
    }


}

/// <summary>
/// XObjectFormType1_OC 
/// </summary>
internal partial class APM_XObjectFormType1_OC : APM_XObjectFormType1_OC_Base
{
}


internal partial class APM_XObjectFormType1_OC_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormType1_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectFormType1_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// XObjectFormType1_Name 
/// </summary>
internal partial class APM_XObjectFormType1_Name : APM_XObjectFormType1_Name_Base
{
}


internal partial class APM_XObjectFormType1_Name_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfName? val;
        {
            
            if (ctx.Version < 1.3m) {
                val = ctx.GetRequired<PdfName, APM_XObjectFormType1_Name>(obj, "Name", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfName, APM_XObjectFormType1_Name>(obj, "Name", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_AF 
/// </summary>
internal partial class APM_XObjectFormType1_AF : APM_XObjectFormType1_AF_Base
{
}


internal partial class APM_XObjectFormType1_AF_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormType1_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormType1_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormType1_Measure 
/// </summary>
internal partial class APM_XObjectFormType1_Measure : APM_XObjectFormType1_Measure_Base
{
}


internal partial class APM_XObjectFormType1_Measure_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Measure";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormType1_Measure>(obj, "Measure", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_MeasureRL.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_MeasureRL, PdfDictionary>(stack, val, obj);
        } else if (APM_MeasureGEO.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_MeasureGEO, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectFormType1_Measure>("Measure did not match any allowable types: '[MeasureRL,MeasureGEO]'");
        }
        
    }


}

/// <summary>
/// XObjectFormType1_PtData 
/// </summary>
internal partial class APM_XObjectFormType1_PtData : APM_XObjectFormType1_PtData_Base
{
}


internal partial class APM_XObjectFormType1_PtData_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_PtData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectFormType1_PtData>(obj, "PtData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PointData, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormType1_Length from stream
/// </summary>
internal partial class APM_XObjectFormType1_Length : APM_XObjectFormType1_Length_Base
{
}


internal partial class APM_XObjectFormType1_Length_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectFormType1_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_Filter Table 6
/// </summary>
internal partial class APM_XObjectFormType1_Filter : APM_XObjectFormType1_Filter_Base
{
}


internal partial class APM_XObjectFormType1_Filter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormType1_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || ctx.Version >= 1.2m && val == "FlateDecode" || val == "RunLengthDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_XObjectFormType1_Filter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,fn:SinceVersion(1.2,FlateDecode),RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormType1_Filter>("Filter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormType1_DecodeParms 
/// </summary>
internal partial class APM_XObjectFormType1_DecodeParms : APM_XObjectFormType1_DecodeParms_Base
{
}


internal partial class APM_XObjectFormType1_DecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_DecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormType1_DecodeParms>(obj, "DecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectFormType1_DecodeParms>("DecodeParms did not match any allowable types: '[FilterLZWDecode,fn:SinceVersion(1.2,FilterFlateDecode),fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormType1_DecodeParms>("DecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormType1_F 
/// </summary>
internal partial class APM_XObjectFormType1_F : APM_XObjectFormType1_F_Base
{
}


internal partial class APM_XObjectFormType1_F_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormType1_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormType1_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormType1_FFilter Table 6
/// </summary>
internal partial class APM_XObjectFormType1_FFilter : APM_XObjectFormType1_FFilter_Base
{
}


internal partial class APM_XObjectFormType1_FFilter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_FFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormType1_FFilter>(obj, "FFilter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_XObjectFormType1_FFilter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormType1_FFilter>("FFilter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormType1_FDecodeParms 
/// </summary>
internal partial class APM_XObjectFormType1_FDecodeParms : APM_XObjectFormType1_FDecodeParms_Base
{
}


internal partial class APM_XObjectFormType1_FDecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_FDecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectFormType1_FDecodeParms>(obj, "FDecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectFormType1_FDecodeParms>("FDecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectFormType1_FDecodeParms>("FDecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectFormType1_DL 
/// </summary>
internal partial class APM_XObjectFormType1_DL : APM_XObjectFormType1_DL_Base
{
}


internal partial class APM_XObjectFormType1_DL_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_DL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectFormType1_DL>(obj, "DL", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_XUID 
/// </summary>
internal partial class APM_XObjectFormType1_XUID : APM_XObjectFormType1_XUID_Base
{
}


internal partial class APM_XObjectFormType1_XUID_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_XUID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m && version < 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectFormType1_XUID>(obj, "XUID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfIntegersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectFormType1_GTS_XID PDF/VT-2
/// </summary>
internal partial class APM_XObjectFormType1_GTS_XID : APM_XObjectFormType1_GTS_XID_Base
{
}


internal partial class APM_XObjectFormType1_GTS_XID_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_GTS_XID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_XObjectFormType1_GTS_XID>(obj, "GTS_XID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_GTS_Scope PDF/VT-2
/// </summary>
internal partial class APM_XObjectFormType1_GTS_Scope : APM_XObjectFormType1_GTS_Scope_Base
{
}


internal partial class APM_XObjectFormType1_GTS_Scope_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_GTS_Scope";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectFormType1_GTS_Scope>(obj, "GTS_Scope", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "SingleUse" || val == "Record" || val == "File" || val == "Stream" || val == "Global" || val == "Unknown")) 
        {
            ctx.Fail<APM_XObjectFormType1_GTS_Scope>($"Invalid value {val}, allowed are: [SingleUse,Record,File,Stream,Global,Unknown]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_GTS_Env PDF/VT-2
/// </summary>
internal partial class APM_XObjectFormType1_GTS_Env : APM_XObjectFormType1_GTS_Env_Base
{
}


internal partial class APM_XObjectFormType1_GTS_Env_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_GTS_Env";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfString? val;
        {
            var GTSScope = obj.Get("GTS_Scope");
            if ((eq(GTSScope,"Stream")||eq(GTSScope,"Global"))) {
                val = ctx.GetRequired<PdfString, APM_XObjectFormType1_GTS_Env>(obj, "GTS_Env", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfString, APM_XObjectFormType1_GTS_Env>(obj, "GTS_Env", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectFormType1_GTS_Encapsulated PDF/VT-2
/// </summary>
internal partial class APM_XObjectFormType1_GTS_Encapsulated : APM_XObjectFormType1_GTS_Encapsulated_Base
{
}


internal partial class APM_XObjectFormType1_GTS_Encapsulated_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectFormType1_GTS_Encapsulated";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_XObjectFormType1_GTS_Encapsulated>(obj, "GTS_Encapsulated", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

