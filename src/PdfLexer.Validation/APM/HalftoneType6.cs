// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_HalftoneType6 : APM_HalftoneType6_Base
{
}

internal partial class APM_HalftoneType6_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "HalftoneType6";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_HalftoneType6_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_HalftoneType, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_HalftoneName, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_Width, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_Height, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_TransferFunction, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_DecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_FFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_FDecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType6_DL, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType6>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType6>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType6>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType6>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType6>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType6>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType6>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType6>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType6>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_HalftoneType6_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "HalftoneType", "HalftoneName", "Width", "Height", "TransferFunction"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "HalftoneType", "HalftoneName", "Width", "Height", "TransferFunction", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "HalftoneType", "HalftoneName", "Width", "Height", "TransferFunction", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "HalftoneType", "HalftoneName", "Width", "Height", "TransferFunction", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "HalftoneType", "HalftoneName", "Width", "Height", "TransferFunction", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "HalftoneType", "HalftoneName", "Width", "Height", "TransferFunction", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "HalftoneType", "HalftoneName", "Width", "Height", "TransferFunction", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "HalftoneType", "HalftoneName", "Width", "Height", "TransferFunction", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "HalftoneType", "HalftoneName", "Width", "Height", "TransferFunction", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    


}

/// <summary>
/// HalftoneType6_Type Table 129
/// </summary>
internal partial class APM_HalftoneType6_Type : APM_HalftoneType6_Type_Base
{
}


internal partial class APM_HalftoneType6_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_HalftoneType6_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Halftone")) 
        {
            ctx.Fail<APM_HalftoneType6_Type>($"Invalid value {val}, allowed are: [Halftone]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType6_HalftoneType 
/// </summary>
internal partial class APM_HalftoneType6_HalftoneType : APM_HalftoneType6_HalftoneType_Base
{
}


internal partial class APM_HalftoneType6_HalftoneType_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_HalftoneType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_HalftoneType6_HalftoneType>(obj, "HalftoneType", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == 6)) 
        {
            ctx.Fail<APM_HalftoneType6_HalftoneType>($"Invalid value {val}, allowed are: [6]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType6_HalftoneName 
/// </summary>
internal partial class APM_HalftoneType6_HalftoneName : APM_HalftoneType6_HalftoneName_Base
{
}


internal partial class APM_HalftoneType6_HalftoneName_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_HalftoneName";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_HalftoneType6_HalftoneName>(obj, "HalftoneName", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType6_Width 
/// </summary>
internal partial class APM_HalftoneType6_Width : APM_HalftoneType6_Width_Base
{
}


internal partial class APM_HalftoneType6_Width_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_Width";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_HalftoneType6_Width>(obj, "Width", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @Width = val;
        if (!(gt(@Width,0))) 
        {
            ctx.Fail<APM_HalftoneType6_Width>($"Invalid value {val}, allowed are: [fn:Eval(@Width>0)]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType6_Height 
/// </summary>
internal partial class APM_HalftoneType6_Height : APM_HalftoneType6_Height_Base
{
}


internal partial class APM_HalftoneType6_Height_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_Height";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_HalftoneType6_Height>(obj, "Height", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @Height = val;
        if (!(gte(@Height,0))) 
        {
            ctx.Fail<APM_HalftoneType6_Height>($"Invalid value {val}, allowed are: [fn:Eval(@Height>=0)]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType6_TransferFunction 
/// </summary>
internal partial class APM_HalftoneType6_TransferFunction : APM_HalftoneType6_TransferFunction_Base
{
}


internal partial class APM_HalftoneType6_TransferFunction_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_TransferFunction";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType6_TransferFunction>(obj, "TransferFunction", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            // funcs: fn:SinceVersion(1.3,dictionary)
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "Identity")) 
                    {
                        ctx.Fail<APM_HalftoneType6_TransferFunction>($"Invalid value {val}, allowed are: [Identity]");
                    }
                    }
                    // no linked objects
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_HalftoneType6_TransferFunction>("TransferFunction is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    if (APM_FunctionType0.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_FunctionType0, PdfDictionary>(stack, val.Dictionary, obj);
                    }else 
                    {
                        ctx.Fail<APM_HalftoneType6_TransferFunction>("TransferFunction did not match any allowable types: '[FunctionType0,fn:SinceVersion(1.3,FunctionType4)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType6_TransferFunction>("TransferFunction is required to one of 'fn:SinceVersion(1.3,dictionary);name;stream', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType6_Length 
/// </summary>
internal partial class APM_HalftoneType6_Length : APM_HalftoneType6_Length_Base
{
}


internal partial class APM_HalftoneType6_Length_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_HalftoneType6_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType6_Filter 
/// </summary>
internal partial class APM_HalftoneType6_Filter : APM_HalftoneType6_Filter_Base
{
}


internal partial class APM_HalftoneType6_Filter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType6_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_HalftoneType6_Filter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType6_Filter>("Filter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType6_DecodeParms 
/// </summary>
internal partial class APM_HalftoneType6_DecodeParms : APM_HalftoneType6_DecodeParms_Base
{
}


internal partial class APM_HalftoneType6_DecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_DecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType6_DecodeParms>(obj, "DecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_HalftoneType6_DecodeParms>("DecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType6_DecodeParms>("DecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType6_F 
/// </summary>
internal partial class APM_HalftoneType6_F : APM_HalftoneType6_F_Base
{
}


internal partial class APM_HalftoneType6_F_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType6_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType6_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType6_FFilter 
/// </summary>
internal partial class APM_HalftoneType6_FFilter : APM_HalftoneType6_FFilter_Base
{
}


internal partial class APM_HalftoneType6_FFilter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_FFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType6_FFilter>(obj, "FFilter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_HalftoneType6_FFilter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType6_FFilter>("FFilter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType6_FDecodeParms 
/// </summary>
internal partial class APM_HalftoneType6_FDecodeParms : APM_HalftoneType6_FDecodeParms_Base
{
}


internal partial class APM_HalftoneType6_FDecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_FDecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType6_FDecodeParms>(obj, "FDecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_HalftoneType6_FDecodeParms>("FDecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType6_FDecodeParms>("FDecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType6_DL 
/// </summary>
internal partial class APM_HalftoneType6_DL : APM_HalftoneType6_DL_Base
{
}


internal partial class APM_HalftoneType6_DL_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType6_DL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_HalftoneType6_DL>(obj, "DL", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

