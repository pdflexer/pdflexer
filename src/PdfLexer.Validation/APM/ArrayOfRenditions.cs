// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfRenditions : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfRenditions";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfRenditions_x, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// ArrayOfRenditions_* Table 283
/// </summary>
internal partial class APM_ArrayOfRenditions_x : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfRenditions_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        for (var i = 0; i<obj.Count; i+=1) 
        {
            CheckSingle(i);
        }
        void CheckSingle(int n) 
        {
            var val = ctx.GetOptional<PdfDictionary, APM_ArrayOfRenditions_x>(obj, n, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            if (APM_RenditionMedia.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_RenditionMedia, PdfDictionary>(stack, val, obj);
            } else if (APM_RenditionSelector.MatchesType(ctx, val)) 
            {
                ctx.Run<APM_RenditionSelector, PdfDictionary>(stack, val, obj);
            }else 
            {
                ctx.Fail<APM_ArrayOfRenditions_x>("n did not match any allowable types: '[RenditionMedia,RenditionSelector]'");
            }
            
        }
    }
}

