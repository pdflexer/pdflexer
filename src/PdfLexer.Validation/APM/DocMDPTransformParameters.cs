// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_DocMDPTransformParameters : APM_DocMDPTransformParameters__Base
{
}

internal partial class APM_DocMDPTransformParameters__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "DocMDPTransformParameters";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_DocMDPTransformParameters_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DocMDPTransformParameters_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DocMDPTransformParameters_V, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_DocMDPTransformParameters>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_DocMDPTransformParameters_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_15_16_17_18_19_20 { get; } = new List<string> 
    {
        "P", "Type", "V"
    };
    


}

/// <summary>
/// DocMDPTransformParameters_Type Table 257
/// </summary>
internal partial class APM_DocMDPTransformParameters_Type : APM_DocMDPTransformParameters_Type__Base
{
}


internal partial class APM_DocMDPTransformParameters_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DocMDPTransformParameters_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_DocMDPTransformParameters_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.TransformParams)) 
        {
            ctx.Fail<APM_DocMDPTransformParameters_Type>($"Invalid value {val}, allowed are: [TransformParams]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// DocMDPTransformParameters_P https://github.com/pdf-association/pdf-issues/issues/152
/// </summary>
internal partial class APM_DocMDPTransformParameters_P : APM_DocMDPTransformParameters_P__Base
{
}


internal partial class APM_DocMDPTransformParameters_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DocMDPTransformParameters_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_DocMDPTransformParameters_P>(obj, "P", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 1 || val == 2 || val == 3)) 
        {
            ctx.Fail<APM_DocMDPTransformParameters_P>($"Invalid value {val}, allowed are: [1,2,3]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// DocMDPTransformParameters_V 
/// </summary>
internal partial class APM_DocMDPTransformParameters_V : APM_DocMDPTransformParameters_V__Base
{
}


internal partial class APM_DocMDPTransformParameters_V__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DocMDPTransformParameters_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_DocMDPTransformParameters_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.N12)) 
        {
            ctx.Fail<APM_DocMDPTransformParameters_V>($"Invalid value {val}, allowed are: [1.2]");
        }
        // no linked objects
        
    }


}

