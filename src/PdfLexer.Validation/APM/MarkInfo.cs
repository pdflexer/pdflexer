// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_MarkInfo : APM_MarkInfo__Base
{
}

internal partial class APM_MarkInfo__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "MarkInfo";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_MarkInfo_Marked, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MarkInfo_UserProperties, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MarkInfo_Suspects, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.4m:
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14_15.Contains(x)))
                {
                    ctx.Fail<APM_MarkInfo>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16_17_18_19.Contains(x)))
                {
                    ctx.Fail<APM_MarkInfo>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_MarkInfo>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_14_15 { get; } = new List<string> 
    {
        "Marked"
    };
    public static List<string> AllowedFields_16_17_18_19 { get; } = new List<string> 
    {
        "Marked", "Suspects", "UserProperties"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Marked", "UserProperties"
    };
    


}

/// <summary>
/// MarkInfo_Marked Table 353
/// </summary>
internal partial class APM_MarkInfo_Marked : APM_MarkInfo_Marked__Base
{
}


internal partial class APM_MarkInfo_Marked__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MarkInfo_Marked";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfBoolean, APM_MarkInfo_Marked>(obj, "Marked", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MarkInfo_UserProperties 
/// </summary>
internal partial class APM_MarkInfo_UserProperties : APM_MarkInfo_UserProperties__Base
{
}


internal partial class APM_MarkInfo_UserProperties__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MarkInfo_UserProperties";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfBoolean, APM_MarkInfo_UserProperties>(obj, "UserProperties", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// MarkInfo_Suspects 
/// </summary>
internal partial class APM_MarkInfo_Suspects : APM_MarkInfo_Suspects__Base
{
}


internal partial class APM_MarkInfo_Suspects__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MarkInfo_Suspects";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfBoolean, APM_MarkInfo_Suspects>(obj, "Suspects", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

