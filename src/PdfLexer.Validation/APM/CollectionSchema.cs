// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_CollectionSchema : APM_CollectionSchema__Base
{
}

internal partial class APM_CollectionSchema__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "CollectionSchema";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_CollectionSchema_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CollectionSchema_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_CollectionSchema_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    


}

/// <summary>
/// CollectionSchema_Type Table 154
/// </summary>
internal partial class APM_CollectionSchema_Type : APM_CollectionSchema_Type__Base
{
}


internal partial class APM_CollectionSchema_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionSchema_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_CollectionSchema_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.CollectionSchema)) 
        {
            ctx.Fail<APM_CollectionSchema_Type>($"Invalid value {val}, allowed are: [CollectionSchema]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// CollectionSchema_* 
/// </summary>
internal partial class APM_CollectionSchema_CatchAll : APM_CollectionSchema_CatchAll__Base
{
}


internal partial class APM_CollectionSchema_CatchAll__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CollectionSchema_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var val = ctx.GetOptional<PdfDictionary, APM_CollectionSchema_CatchAll>(obj, key, IndirectRequirement.Either);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            ctx.Run<APM_CollectionField, PdfDictionary>(stack, val, obj);
            
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> { "Type" };
}

