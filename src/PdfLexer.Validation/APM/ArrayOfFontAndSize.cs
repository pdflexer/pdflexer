// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfFontAndSize : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfFontAndSize";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfFontAndSize_0, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOfFontAndSize_1, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// ArrayOfFontAndSize_0 Table 57
/// </summary>
internal partial class APM_ArrayOfFontAndSize_0 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfFontAndSize_0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfDictionary, APM_ArrayOfFontAndSize_0>(obj, 0, IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_FontType1.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_FontType1, PdfDictionary>(stack, val, obj);
        } else if (APM_FontTrueType.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_FontTrueType, PdfDictionary>(stack, val, obj);
        } else if (APM_FontMultipleMaster.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_FontMultipleMaster, PdfDictionary>(stack, val, obj);
        } else if (APM_FontType3.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_FontType3, PdfDictionary>(stack, val, obj);
        } else if (APM_FontType0.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_FontType0, PdfDictionary>(stack, val, obj);
        } else if (APM_FontCIDType0.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_FontCIDType0, PdfDictionary>(stack, val, obj);
        } else if (APM_FontCIDType2.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_FontCIDType2, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_ArrayOfFontAndSize_0>("0 did not match any allowable types: '[FontType1,FontTrueType,FontMultipleMaster,FontType3,FontType0,FontCIDType0,FontCIDType2]'");
        }
        
    }
}

/// <summary>
/// ArrayOfFontAndSize_1 
/// </summary>
internal partial class APM_ArrayOfFontAndSize_1 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfFontAndSize_1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_ArrayOfFontAndSize_1>(obj, 1, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }
}

