// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_ColorSpaceMap : APM_ColorSpaceMap__Base
{
}

internal partial class APM_ColorSpaceMap__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "ColorSpaceMap";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_ColorSpaceMap_DefaultRGB, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ColorSpaceMap_DefaultCMYK, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ColorSpaceMap_DefaultGray, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ColorSpaceMap_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    


}

/// <summary>
/// ColorSpaceMap_DefaultRGB Table 34
/// </summary>
internal partial class APM_ColorSpaceMap_DefaultRGB : APM_ColorSpaceMap_DefaultRGB__Base
{
}


internal partial class APM_ColorSpaceMap_DefaultRGB__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ColorSpaceMap_DefaultRGB";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_ColorSpaceMap_DefaultRGB>(obj, "DefaultRGB", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_CalRGBColorSpace.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_CalRGBColorSpace, PdfArray>(stack, val, obj);
        } else if ((ctx.Version >= 1.3m && APM_ICCBasedColorSpace.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ICCBasedColorSpace, PdfArray>(stack, val, obj);
        } else if ((ctx.Version >= 1.3m && APM_DeviceNColorSpace.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_DeviceNColorSpace, PdfArray>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_ColorSpaceMap_DefaultRGB>("DefaultRGB did not match any allowable types: '[CalRGBColorSpace,fn:SinceVersion(1.3,ICCBasedColorSpace),fn:SinceVersion(1.3,DeviceNColorSpace)]'");
        }
        
    }


}

/// <summary>
/// ColorSpaceMap_DefaultCMYK 
/// </summary>
internal partial class APM_ColorSpaceMap_DefaultCMYK : APM_ColorSpaceMap_DefaultCMYK__Base
{
}


internal partial class APM_ColorSpaceMap_DefaultCMYK__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ColorSpaceMap_DefaultCMYK";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_ColorSpaceMap_DefaultCMYK>(obj, "DefaultCMYK", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_ICCBasedColorSpace.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ICCBasedColorSpace, PdfArray>(stack, val, obj);
        } else if (APM_DeviceNColorSpace.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_DeviceNColorSpace, PdfArray>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_ColorSpaceMap_DefaultCMYK>("DefaultCMYK did not match any allowable types: '[ICCBasedColorSpace,DeviceNColorSpace]'");
        }
        
    }


}

/// <summary>
/// ColorSpaceMap_DefaultGray 
/// </summary>
internal partial class APM_ColorSpaceMap_DefaultGray : APM_ColorSpaceMap_DefaultGray__Base
{
}


internal partial class APM_ColorSpaceMap_DefaultGray__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ColorSpaceMap_DefaultGray";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_ColorSpaceMap_DefaultGray>(obj, "DefaultGray", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_CalGrayColorSpace.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_CalGrayColorSpace, PdfArray>(stack, val, obj);
        } else if ((ctx.Version >= 1.3m && APM_ICCBasedColorSpace.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ICCBasedColorSpace, PdfArray>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_SeparationColorSpace.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_SeparationColorSpace, PdfArray>(stack, val, obj);
        } else if ((ctx.Version >= 1.3m && APM_DeviceNColorSpace.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_DeviceNColorSpace, PdfArray>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_ColorSpaceMap_DefaultGray>("DefaultGray did not match any allowable types: '[CalGrayColorSpace,fn:SinceVersion(1.3,ICCBasedColorSpace),fn:SinceVersion(1.2,SeparationColorSpace),fn:SinceVersion(1.3,DeviceNColorSpace)]'");
        }
        
    }


}

/// <summary>
/// ColorSpaceMap_* 
/// </summary>
internal partial class APM_ColorSpaceMap_CatchAll : APM_ColorSpaceMap_CatchAll__Base
{
}


internal partial class APM_ColorSpaceMap_CatchAll__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ColorSpaceMap_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var (utval, wasIR) = ctx.GetOptional<APM_ColorSpaceMap_CatchAll>(obj, key, IndirectRequirement.Either);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                case PdfObjectType.ArrayObj:
                    {
                        var val =  (PdfArray)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        if (APM_IndexedColorSpace.MatchesType(ctx, val)) 
                        {
                            ctx.Run<APM_IndexedColorSpace, PdfArray>(stack, val, obj);
                        } else if ((ctx.Version >= 1.1m && APM_CalGrayColorSpace.MatchesType(ctx, val))) 
                        {
                            ctx.Run<APM_CalGrayColorSpace, PdfArray>(stack, val, obj);
                        } else if ((ctx.Version >= 1.1m && APM_CalRGBColorSpace.MatchesType(ctx, val))) 
                        {
                            ctx.Run<APM_CalRGBColorSpace, PdfArray>(stack, val, obj);
                        } else if ((ctx.Version >= 1.1m && APM_LabColorSpace.MatchesType(ctx, val))) 
                        {
                            ctx.Run<APM_LabColorSpace, PdfArray>(stack, val, obj);
                        } else if ((ctx.Version >= 1.3m && APM_ICCBasedColorSpace.MatchesType(ctx, val))) 
                        {
                            ctx.Run<APM_ICCBasedColorSpace, PdfArray>(stack, val, obj);
                        } else if ((ctx.Version >= 1.2m && APM_SeparationColorSpace.MatchesType(ctx, val))) 
                        {
                            ctx.Run<APM_SeparationColorSpace, PdfArray>(stack, val, obj);
                        } else if ((ctx.Version >= 1.3m && APM_DeviceNColorSpace.MatchesType(ctx, val))) 
                        {
                            ctx.Run<APM_DeviceNColorSpace, PdfArray>(stack, val, obj);
                        } else if ((ctx.Version >= 1.2m && APM_PatternColorSpace.MatchesType(ctx, val))) 
                        {
                            ctx.Run<APM_PatternColorSpace, PdfArray>(stack, val, obj);
                        }else 
                        {
                            ctx.Fail<APM_ColorSpaceMap_CatchAll>("CatchAll did not match any allowable types: '[fn:SinceVersion(1.1,CalGrayColorSpace),fn:SinceVersion(1.1,CalRGBColorSpace),fn:SinceVersion(1.1,LabColorSpace),fn:SinceVersion(1.3,ICCBasedColorSpace),IndexedColorSpace,fn:SinceVersion(1.2,SeparationColorSpace),fn:SinceVersion(1.3,DeviceNColorSpace),fn:SinceVersion(1.2,PatternColorSpace)]'");
                        }
                        return;
                    }
                case PdfObjectType.NameObj:
                    {
                        var val =  (PdfName)utval;
                        // no indirect obj reqs
                        // no special cases
                        
                        
                        if (!(val == "DeviceCMYK" || val == "DeviceRGB" || val == "DeviceGray")) 
                        {
                            ctx.Fail<APM_ColorSpaceMap_CatchAll>($"Invalid value {val}, allowed are: [DeviceCMYK,DeviceRGB,DeviceGray]");
                        }
                        // no linked objects
                        return;
                    }
                
                default:
                    ctx.Fail<APM_ColorSpaceMap_CatchAll>("* is required to one of 'array;name', was " + utval.Type);
                    return;
            }
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> { "DefaultRGB", "DefaultCMYK", "DefaultGray" };
}

