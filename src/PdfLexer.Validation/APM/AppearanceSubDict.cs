// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AppearanceSubDict : APM_AppearanceSubDict_Base
{
}

internal partial class APM_AppearanceSubDict_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AppearanceSubDict";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AppearanceSubDict_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    


}

/// <summary>
/// AppearanceSubDict_* Table 170 and Clause 12.5.5
/// </summary>
internal partial class APM_AppearanceSubDict_CatchAll : APM_AppearanceSubDict_CatchAll_Base
{
}


internal partial class APM_AppearanceSubDict_CatchAll_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceSubDict_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var val = ctx.GetOptional<PdfStream, APM_AppearanceSubDict_CatchAll>(obj, key, IndirectRequirement.MustBeIndirect);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            ctx.Run<APM_XObjectFormType1, PdfDictionary>(stack, val.Dictionary, obj);
            
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> {  };
}

