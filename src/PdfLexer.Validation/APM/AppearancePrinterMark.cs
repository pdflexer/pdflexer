// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AppearancePrinterMark : APM_AppearancePrinterMark__Base
{
}

internal partial class APM_AppearancePrinterMark__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AppearancePrinterMark";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AppearancePrinterMark_N, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearancePrinterMark_R, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearancePrinterMark_D, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.4m:
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_AppearancePrinterMark>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_14_15_16_17_18_19_20 { get; } = new List<string> 
    {
        "D", "N", "R"
    };
    


}

/// <summary>
/// AppearancePrinterMark_N Table 170
/// </summary>
internal partial class APM_AppearancePrinterMark_N : APM_AppearancePrinterMark_N__Base
{
}


internal partial class APM_AppearancePrinterMark_N__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearancePrinterMark_N";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AppearancePrinterMark_N>(obj, "N", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_AppearancePrinterMark_N>("N is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_AppearancePrinterMarkSubDict, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_AppearancePrinterMark_N>("N is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_XObjectFormPrinterMark, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AppearancePrinterMark_N>("N is required to one of 'dictionary;stream', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AppearancePrinterMark_R 
/// </summary>
internal partial class APM_AppearancePrinterMark_R : APM_AppearancePrinterMark_R__Base
{
}


internal partial class APM_AppearancePrinterMark_R__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearancePrinterMark_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AppearancePrinterMark_R>(obj, "R", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_AppearancePrinterMarkSubDict, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_AppearancePrinterMark_R>("R is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_XObjectFormPrinterMark, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AppearancePrinterMark_R>("R is required to one of 'dictionary;stream', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AppearancePrinterMark_D 
/// </summary>
internal partial class APM_AppearancePrinterMark_D : APM_AppearancePrinterMark_D__Base
{
}


internal partial class APM_AppearancePrinterMark_D__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearancePrinterMark_D";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AppearancePrinterMark_D>(obj, "D", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_AppearancePrinterMarkSubDict, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_AppearancePrinterMark_D>("D is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_XObjectFormPrinterMark, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AppearancePrinterMark_D>("D is required to one of 'dictionary;stream', was " + utval.Type);
                return;
        }
    }


}

