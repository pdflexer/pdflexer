// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_DestXYZArray : ISpecification<PdfArray>
{
    public static string Name { get; } = "DestXYZArray";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_DestXYZArray_0, PdfArray>(stack, obj, parent);
        ctx.Run<APM_DestXYZArray_1, PdfArray>(stack, obj, parent);
        ctx.Run<APM_DestXYZArray_2, PdfArray>(stack, obj, parent);
        ctx.Run<APM_DestXYZArray_3, PdfArray>(stack, obj, parent);
        ctx.Run<APM_DestXYZArray_4, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// DestXYZArray_0 Table 149 - page
/// </summary>
internal partial class APM_DestXYZArray_0 : ISpecification<PdfArray>
{
    public static string Name { get; } = "DestXYZArray_0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_DestXYZArray_0>(obj, 0, IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_DestXYZArray_0>("0 is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_PageObject, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfNumber)utval;
                    // no indirect obj reqs
                    // no special cases
                    IPdfObject v = val;
                    
                    if (!(gte(v,0))) 
                    {
                        ctx.Fail<APM_DestXYZArray_0>($"Invalid value {val}, allowed are: [fn:Eval(@0>=0)]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_DestXYZArray_0>("0 is required to one of 'dictionary;number', was " + utval.Type);
                return;
        }
    }
}

/// <summary>
/// DestXYZArray_1 
/// </summary>
internal partial class APM_DestXYZArray_1 : ISpecification<PdfArray>
{
    public static string Name { get; } = "DestXYZArray_1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_DestXYZArray_1>(obj, 1, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.XYZ)) 
        {
            ctx.Fail<APM_DestXYZArray_1>($"Invalid value {val}, allowed are: [XYZ]");
        }
        // no linked objects
        
    }
}

/// <summary>
/// DestXYZArray_2 left
/// </summary>
internal partial class APM_DestXYZArray_2 : ISpecification<PdfArray>
{
    public static string Name { get; } = "DestXYZArray_2";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_DestXYZArray_2>(obj, 2, IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_DestXYZArray_2>("2 is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NullObj:
                {
                    var val =  (PdfNull)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfNumber)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_DestXYZArray_2>("2 is required to one of 'null;number', was " + utval.Type);
                return;
        }
    }
}

/// <summary>
/// DestXYZArray_3 top
/// </summary>
internal partial class APM_DestXYZArray_3 : ISpecification<PdfArray>
{
    public static string Name { get; } = "DestXYZArray_3";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_DestXYZArray_3>(obj, 3, IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_DestXYZArray_3>("3 is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NullObj:
                {
                    var val =  (PdfNull)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfNumber)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_DestXYZArray_3>("3 is required to one of 'null;number', was " + utval.Type);
                return;
        }
    }
}

/// <summary>
/// DestXYZArray_4 zoom
/// </summary>
internal partial class APM_DestXYZArray_4 : ISpecification<PdfArray>
{
    public static string Name { get; } = "DestXYZArray_4";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_DestXYZArray_4>(obj, 4, IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_DestXYZArray_4>("4 is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NullObj:
                {
                    var val =  (PdfNull)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfNumber)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_DestXYZArray_4>("4 is required to one of 'null;number', was " + utval.Type);
                return;
        }
    }
}

