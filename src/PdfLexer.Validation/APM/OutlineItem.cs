// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_OutlineItem : APM_OutlineItem__Base
{
}

internal partial class APM_OutlineItem__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "OutlineItem";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_OutlineItem_Title, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_Parent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_Prev, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_Next, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_First, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_Last, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_Count, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_Dest, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_A, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_SE, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutlineItem_F, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.0");
                }
                break;
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_OutlineItem>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static HashSet<string> AllowedFields_10 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest"
    };
    public static HashSet<string> AllowedFields_11 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A"
    };
    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A", "SE"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A", "SE", "C", "F"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A", "SE", "C", "F"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A", "SE", "C", "F"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A", "SE", "C", "F"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A", "SE", "C", "F"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A", "SE", "C", "F"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Title", "Parent", "Prev", "Next", "First", "Last", "Count", "Dest", "A", "SE", "C", "F"
    };
    


}

/// <summary>
/// OutlineItem_Title Table 151
/// </summary>
internal partial class APM_OutlineItem_Title : APM_OutlineItem_Title__Base
{
}


internal partial class APM_OutlineItem_Title__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_Title";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfString, APM_OutlineItem_Title>(obj, "Title", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OutlineItem_Parent 
/// </summary>
internal partial class APM_OutlineItem_Parent : APM_OutlineItem_Parent__Base
{
}


internal partial class APM_OutlineItem_Parent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_Parent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfDictionary, APM_OutlineItem_Parent>(obj, "Parent", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OutlineItem.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OutlineItem, PdfDictionary>(stack, val, obj);
        } else if (APM_Outline.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_Outline, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_OutlineItem_Parent>("Parent did not match any allowable types: '[OutlineItem,Outline]'");
        }
        
    }


}

/// <summary>
/// OutlineItem_Prev 
/// </summary>
internal partial class APM_OutlineItem_Prev : APM_OutlineItem_Prev__Base
{
}


internal partial class APM_OutlineItem_Prev__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_Prev";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_OutlineItem_Prev>(obj, "Prev", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OutlineItem, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OutlineItem_Next 
/// </summary>
internal partial class APM_OutlineItem_Next : APM_OutlineItem_Next__Base
{
}


internal partial class APM_OutlineItem_Next__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_Next";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_OutlineItem_Next>(obj, "Next", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OutlineItem, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OutlineItem_First 
/// </summary>
internal partial class APM_OutlineItem_First : APM_OutlineItem_First__Base
{
}


internal partial class APM_OutlineItem_First__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_First";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_OutlineItem_First>(obj, "First", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OutlineItem, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OutlineItem_Last 
/// </summary>
internal partial class APM_OutlineItem_Last : APM_OutlineItem_Last__Base
{
}


internal partial class APM_OutlineItem_Last__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_Last";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_OutlineItem_Last>(obj, "Last", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_OutlineItem, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OutlineItem_Count 
/// </summary>
internal partial class APM_OutlineItem_Count : APM_OutlineItem_Count__Base
{
}


internal partial class APM_OutlineItem_Count__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_Count";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_OutlineItem_Count>(obj, "Count", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OutlineItem_Dest 
/// </summary>
internal partial class APM_OutlineItem_Dest : APM_OutlineItem_Dest__Base
{
}


internal partial class APM_OutlineItem_Dest__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_Dest";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_OutlineItem_Dest>(obj, "Dest", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    
                    if (obj.ContainsKey(PdfName.A)) 
                    {
                        ctx.Fail<APM_OutlineItem_Dest>($"Value failed special case check: fn:Not(fn:IsPresent(A))");
                    }
                    // no value restrictions
                    if (APM_DestXYZArray.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_DestXYZArray, PdfArray>(stack, val, obj);
                    } else if (APM_Dest0Array.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_Dest0Array, PdfArray>(stack, val, obj);
                    } else if (APM_Dest1Array.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_Dest1Array, PdfArray>(stack, val, obj);
                    } else if (APM_Dest4Array.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_Dest4Array, PdfArray>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_OutlineItem_Dest>("Dest did not match any allowable types: '[DestXYZArray,Dest0Array,Dest1Array,Dest4Array]'");
                    }
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    
                    if (obj.ContainsKey(PdfName.A)) 
                    {
                        ctx.Fail<APM_OutlineItem_Dest>($"Value failed special case check: fn:Not(fn:IsPresent(A))");
                    }
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    
                    if (obj.ContainsKey(PdfName.A)) 
                    {
                        ctx.Fail<APM_OutlineItem_Dest>($"Value failed special case check: fn:Not(fn:IsPresent(A))");
                    }
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_OutlineItem_Dest>("Dest is required to one of 'array;name;string-byte', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// OutlineItem_A 
/// </summary>
internal partial class APM_OutlineItem_A : APM_OutlineItem_A__Base
{
}


internal partial class APM_OutlineItem_A__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_OutlineItem_A>(obj, "A", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (obj.ContainsKey(PdfName.Dest)) 
        {
            ctx.Fail<APM_OutlineItem_A>($"Value failed special case check: fn:Not(fn:IsPresent(Dest))");
        }
        // no value restrictions
        if (APM_ActionGoTo.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoTo, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionGoToR.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoToR, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionLaunch.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionLaunch, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionThread.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionThread, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionURI.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionURI, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.6m && APM_ActionGoToE.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionGoToE, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_ActionGoToDp.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionGoToDp, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version == 1.2m && APM_ActionNOP.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionNOP, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version == 1.2m && APM_ActionSetState.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionSetState, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionSound.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionSound, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionMovie.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionMovie, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionHide.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionHide, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionNamed.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionNamed, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionSubmitForm.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionSubmitForm, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionResetForm.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionResetForm, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionImportData.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionImportData, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.5m && APM_ActionSetOCGState.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionSetOCGState, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.5m && APM_ActionRendition.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionRendition, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.5m && APM_ActionTransition.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionTransition, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.6m && APM_ActionGoTo3DView.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionGoTo3DView, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.3m && APM_ActionECMAScript.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_ActionRichMediaExecute.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionRichMediaExecute, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_OutlineItem_A>("A did not match any allowable types: '[ActionGoTo,ActionGoToR,fn:SinceVersion(1.6,ActionGoToE),fn:SinceVersion(2.0,ActionGoToDp),ActionLaunch,fn:IsPDFVersion(1.2,ActionNOP),fn:IsPDFVersion(1.2,ActionSetState),ActionThread,ActionURI,fn:SinceVersion(1.2,ActionSound),fn:SinceVersion(1.2,ActionMovie),fn:SinceVersion(1.2,ActionHide),fn:SinceVersion(1.2,ActionNamed),fn:SinceVersion(1.2,ActionSubmitForm),fn:SinceVersion(1.2,ActionResetForm),fn:SinceVersion(1.2,ActionImportData),fn:SinceVersion(1.5,ActionSetOCGState),fn:SinceVersion(1.5,ActionRendition),fn:SinceVersion(1.5,ActionTransition),fn:SinceVersion(1.6,ActionGoTo3DView),fn:SinceVersion(1.3,ActionECMAScript),fn:SinceVersion(2.0,ActionRichMediaExecute)]'");
        }
        
    }


}

/// <summary>
/// OutlineItem_SE 
/// </summary>
internal partial class APM_OutlineItem_SE : APM_OutlineItem_SE__Base
{
}


internal partial class APM_OutlineItem_SE__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_SE";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_OutlineItem_SE>(obj, "SE", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_StructElem, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OutlineItem_C 
/// </summary>
internal partial class APM_OutlineItem_C : APM_OutlineItem_C__Base
{
}


internal partial class APM_OutlineItem_C__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_OutlineItem_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3RGBNumbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// OutlineItem_F Table 152
/// </summary>
internal partial class APM_OutlineItem_F : APM_OutlineItem_F__Base
{
}


internal partial class APM_OutlineItem_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutlineItem_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_OutlineItem_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(BitsClear(val,0b11111111111111111111111111111100))) 
        {
            ctx.Fail<APM_OutlineItem_F>($"Value failed special case check: fn:Eval(fn:BitsClear(3,32))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

