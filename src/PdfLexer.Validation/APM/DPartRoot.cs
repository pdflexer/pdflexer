// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_DPartRoot : APM_DPartRoot__Base
{
}

internal partial class APM_DPartRoot__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "DPartRoot";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_DPartRoot_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DPartRoot_DPartRootNode, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DPartRoot_RecordLevel, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DPartRoot_NodeNameList, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_DPartRoot>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_DPartRoot_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_16_17_18_19_20 { get; } = new List<string> 
    {
        "DPartRootNode", "NodeNameList", "RecordLevel", "Type"
    };
    


}

/// <summary>
/// DPartRoot_Type Table 408
/// </summary>
internal partial class APM_DPartRoot_Type : APM_DPartRoot_Type__Base
{
}


internal partial class APM_DPartRoot_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DPartRoot_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_DPartRoot_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.DPartRoot)) 
        {
            ctx.Fail<APM_DPartRoot_Type>($"Invalid value {val}, allowed are: [DPartRoot]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// DPartRoot_DPartRootNode 
/// </summary>
internal partial class APM_DPartRoot_DPartRootNode : APM_DPartRoot_DPartRootNode__Base
{
}


internal partial class APM_DPartRoot_DPartRootNode__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DPartRoot_DPartRootNode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfDictionary, APM_DPartRoot_DPartRootNode>(obj, "DPartRootNode", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DPart, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// DPartRoot_RecordLevel 
/// </summary>
internal partial class APM_DPartRoot_RecordLevel : APM_DPartRoot_RecordLevel__Base
{
}


internal partial class APM_DPartRoot_RecordLevel__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DPartRoot_RecordLevel";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_DPartRoot_RecordLevel>(obj, "RecordLevel", IndirectRequirement.Either);
        if (val == null) { return; }
        var RecordLevel = obj.Get("RecordLevel");
        if (!(gte(RecordLevel,0))) 
        {
            ctx.Fail<APM_DPartRoot_RecordLevel>($"Value failed special case check: fn:Eval(@RecordLevel>=0)");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// DPartRoot_NodeNameList since PDF/X-4 with PDF 1.6
/// </summary>
internal partial class APM_DPartRoot_NodeNameList : APM_DPartRoot_NodeNameList__Base
{
}


internal partial class APM_DPartRoot_NodeNameList__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DPartRoot_NodeNameList";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_DPartRoot_NodeNameList>(obj, "NodeNameList", IndirectRequirement.Either);
        if (((ctx.Extensions.Contains(PdfName.PDF_VT2))) && val == null) {
            ctx.Fail<APM_DPartRoot_NodeNameList>("NodeNameList is required when 'fn:IsRequired(fn:Extension(PDF_VT2))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNamesGeneral, PdfArray>(stack, val, obj);
        
    }


}

