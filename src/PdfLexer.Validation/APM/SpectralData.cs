// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_SpectralData : APM_SpectralData__Base
{
}

internal partial class APM_SpectralData__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "SpectralData";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_SpectralData_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    


}

/// <summary>
/// SpectralData_* Table 401, SpectralData cell
/// </summary>
internal partial class APM_SpectralData_CatchAll : APM_SpectralData_CatchAll__Base
{
}


internal partial class APM_SpectralData_CatchAll__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SpectralData_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var val = ctx.GetOptional<PdfStream, APM_SpectralData_CatchAll>(obj, key, IndirectRequirement.MustBeIndirect);
            if (val == null) { return; }
            // no special cases
            // no value restrictions
            ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
            
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> {  };
}

