// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_FunctionType3 : APM_FunctionType3__Base
{
}

internal partial class APM_FunctionType3__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "FunctionType3";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_FunctionType3_FunctionType, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType3_Domain, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType3_Range, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType3_Functions, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType3_Bounds, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType3_Encode, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType3>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType3>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType3>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType3>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType3>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType3>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType3>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType3>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Functions", "Bounds", "Encode"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Functions", "Bounds", "Encode"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Functions", "Bounds", "Encode"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Functions", "Bounds", "Encode"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Functions", "Bounds", "Encode"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Functions", "Bounds", "Encode"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Functions", "Bounds", "Encode"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "Functions", "Bounds", "Encode"
    };
    


}

/// <summary>
/// FunctionType3_FunctionType Table 38 and Table 41
/// </summary>
internal partial class APM_FunctionType3_FunctionType : APM_FunctionType3_FunctionType__Base
{
}


internal partial class APM_FunctionType3_FunctionType__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType3_FunctionType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_FunctionType3_FunctionType>(obj, "FunctionType", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 3)) 
        {
            ctx.Fail<APM_FunctionType3_FunctionType>($"Invalid value {val}, allowed are: [3]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FunctionType3_Domain 
/// </summary>
internal partial class APM_FunctionType3_Domain : APM_FunctionType3_Domain__Base
{
}


internal partial class APM_FunctionType3_Domain__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType3_Domain";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_FunctionType3_Domain>(obj, "Domain", IndirectRequirement.Either);
        if (val == null) { return; }
        var Domain = obj.Get("Domain");
        if (!(eq(mod(((Domain as PdfArray)?.Count),2),0))) 
        {
            ctx.Fail<APM_FunctionType3_Domain>($"Value failed special case check: fn:Eval((fn:ArrayLength(Domain) mod 2)==0)");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType3_Range 
/// </summary>
internal partial class APM_FunctionType3_Range : APM_FunctionType3_Range__Base
{
}


internal partial class APM_FunctionType3_Range__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType3_Range";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_FunctionType3_Range>(obj, "Range", IndirectRequirement.Either);
        if (val == null) { return; }
        var Range = obj.Get("Range");
        if (!(eq(mod(((Range as PdfArray)?.Count),2),0))) 
        {
            ctx.Fail<APM_FunctionType3_Range>($"Value failed special case check: fn:Eval((fn:ArrayLength(Range) mod 2)==0)");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType3_Functions 
/// </summary>
internal partial class APM_FunctionType3_Functions : APM_FunctionType3_Functions__Base
{
}


internal partial class APM_FunctionType3_Functions__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType3_Functions";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_FunctionType3_Functions>(obj, "Functions", IndirectRequirement.Either);
        if (val == null) { return; }
        var Functions = obj.Get("Functions");
        var Bounds = obj.Get("Bounds");
        if (!(eq(((Functions as PdfArray)?.Count),plus(((Bounds as PdfArray)?.Count),1)))) 
        {
            ctx.Fail<APM_FunctionType3_Functions>($"Value failed special case check: fn:Eval(fn:ArrayLength(Functions)==(fn:ArrayLength(Bounds)+1))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfFunctions, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType3_Bounds 
/// </summary>
internal partial class APM_FunctionType3_Bounds : APM_FunctionType3_Bounds__Base
{
}


internal partial class APM_FunctionType3_Bounds__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType3_Bounds";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_FunctionType3_Bounds>(obj, "Bounds", IndirectRequirement.Either);
        if (val == null) { return; }
        var Bounds = obj.Get("Bounds");
        var Functions = obj.Get("Functions");
        if (!(eq(((Bounds as PdfArray)?.Count),(((Functions as PdfArray)?.Count)-1)))) 
        {
            ctx.Fail<APM_FunctionType3_Bounds>($"Value failed special case check: fn:Eval(fn:ArrayLength(Bounds)==(fn:ArrayLength(Functions) - 1))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType3_Encode 
/// </summary>
internal partial class APM_FunctionType3_Encode : APM_FunctionType3_Encode__Base
{
}


internal partial class APM_FunctionType3_Encode__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType3_Encode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_FunctionType3_Encode>(obj, "Encode", IndirectRequirement.Either);
        if (val == null) { return; }
        var Encode = obj.Get("Encode");
        if (!(eq(mod(((Encode as PdfArray)?.Count),2),0))) 
        {
            ctx.Fail<APM_FunctionType3_Encode>($"Value failed special case check: fn:Eval((fn:ArrayLength(Encode) mod 2)==0)");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

