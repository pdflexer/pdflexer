// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_CalGrayColorSpace : ISpecification<PdfArray>
{
    public static string Name { get; } = "CalGrayColorSpace";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_CalGrayColorSpace_0, PdfArray>(stack, obj, parent);
        ctx.Run<APM_CalGrayColorSpace_1, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_CalGrayColorSpace_0, PdfArray>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }
}

/// <summary>
/// CalGrayColorSpace_0 Clause 8.6.5.2
/// </summary>
internal partial class APM_CalGrayColorSpace_0 : ISpecification<PdfArray>
{
    public static string Name { get; } = "CalGrayColorSpace_0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_CalGrayColorSpace_0>(obj, 0, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.CalGray)) 
        {
            ctx.Fail<APM_CalGrayColorSpace_0>($"Invalid value {val}, allowed are: [CalGray]");
        }
        // no linked objects
        
    }
}

/// <summary>
/// CalGrayColorSpace_1 
/// </summary>
internal partial class APM_CalGrayColorSpace_1 : ISpecification<PdfArray>
{
    public static string Name { get; } = "CalGrayColorSpace_1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfDictionary, APM_CalGrayColorSpace_1>(obj, 1, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_CalGrayDict, PdfDictionary>(stack, val, obj);
        
    }
}

