// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_CalGrayDict : APM_CalGrayDict_Base
{
}

internal partial class APM_CalGrayDict_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "CalGrayDict";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_CalGrayDict_WhitePoint, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CalGrayDict_BlackPoint, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CalGrayDict_Gamma, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_11 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    public static List<string> AllowedFields_12 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    public static List<string> AllowedFields_13 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    public static List<string> AllowedFields_14 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "WhitePoint", "BlackPoint", "Gamma"
    };
    


}

/// <summary>
/// CalGrayDict_WhitePoint Table 62
/// </summary>
internal partial class APM_CalGrayDict_WhitePoint : APM_CalGrayDict_WhitePoint_Base
{
}


internal partial class APM_CalGrayDict_WhitePoint_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CalGrayDict_WhitePoint";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_CalGrayDict_WhitePoint>(obj, "WhitePoint", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_WhitepointArray, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CalGrayDict_BlackPoint 
/// </summary>
internal partial class APM_CalGrayDict_BlackPoint : APM_CalGrayDict_BlackPoint_Base
{
}


internal partial class APM_CalGrayDict_BlackPoint_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CalGrayDict_BlackPoint";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_CalGrayDict_BlackPoint>(obj, "BlackPoint", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_BlackpointArray, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CalGrayDict_Gamma 
/// </summary>
internal partial class APM_CalGrayDict_Gamma : APM_CalGrayDict_Gamma_Base
{
}


internal partial class APM_CalGrayDict_Gamma_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CalGrayDict_Gamma";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_CalGrayDict_Gamma>(obj, "Gamma", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @Gamma = val;
        if (!(gt(@Gamma,0))) 
        {
            ctx.Fail<APM_CalGrayDict_Gamma>($"Invalid value {val}, allowed are: [fn:Eval(@Gamma>0)]");
        }
        }
        // no linked objects
        
    }


}

