// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_CalGrayDict : APM_CalGrayDict__Base
{
}

internal partial class APM_CalGrayDict__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "CalGrayDict";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_CalGrayDict_WhitePoint, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CalGrayDict_BlackPoint, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CalGrayDict_Gamma, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.1m:
            case 1.2m:
            case 1.3m:
            case 1.4m:
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11_12_13_14_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_CalGrayDict>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_11_12_13_14_15_16_17_18_19_20 { get; } = new List<string> 
    {
        "BlackPoint", "Gamma", "WhitePoint"
    };
    


}

/// <summary>
/// CalGrayDict_WhitePoint Table 62
/// </summary>
internal partial class APM_CalGrayDict_WhitePoint : APM_CalGrayDict_WhitePoint__Base
{
}


internal partial class APM_CalGrayDict_WhitePoint__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CalGrayDict_WhitePoint";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_CalGrayDict_WhitePoint>(obj, "WhitePoint", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_WhitepointArray, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CalGrayDict_BlackPoint 
/// </summary>
internal partial class APM_CalGrayDict_BlackPoint : APM_CalGrayDict_BlackPoint__Base
{
}


internal partial class APM_CalGrayDict_BlackPoint__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CalGrayDict_BlackPoint";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_CalGrayDict_BlackPoint>(obj, "BlackPoint", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_BlackpointArray, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// CalGrayDict_Gamma 
/// </summary>
internal partial class APM_CalGrayDict_Gamma : APM_CalGrayDict_Gamma__Base
{
}


internal partial class APM_CalGrayDict_Gamma__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CalGrayDict_Gamma";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_CalGrayDict_Gamma>(obj, "Gamma", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var Gamma = obj.Get("Gamma");
        if (!(gt(Gamma,0))) 
        {
            ctx.Fail<APM_CalGrayDict_Gamma>($"Invalid value {val}, allowed are: [fn:Eval(@Gamma>0)]");
        }
        // no linked objects
        
    }


}

