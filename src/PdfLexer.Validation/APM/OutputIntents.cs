// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_OutputIntents : APM_OutputIntents__Base
{
}

internal partial class APM_OutputIntents__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "OutputIntents";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_OutputIntents_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutputIntents_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutputIntents_OutputCondition, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutputIntents_OutputConditionIdentifier, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutputIntents_RegistryName, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutputIntents_Info, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutputIntents_DestOutputProfile, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutputIntents_DestOutputProfileRef, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutputIntents_MixingHints, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_OutputIntents_SpectralData, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_OutputIntents>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_OutputIntents>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_OutputIntents>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_OutputIntents>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_OutputIntents>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_OutputIntents>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_OutputIntents>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_OutputIntents_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "S", "OutputCondition", "OutputConditionIdentifier", "RegistryName", "Info", "DestOutputProfile"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "S", "OutputCondition", "OutputConditionIdentifier", "RegistryName", "Info", "DestOutputProfile"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "S", "OutputCondition", "OutputConditionIdentifier", "RegistryName", "Info", "DestOutputProfile"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "S", "OutputCondition", "OutputConditionIdentifier", "RegistryName", "Info", "DestOutputProfile"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "S", "OutputCondition", "OutputConditionIdentifier", "RegistryName", "Info", "DestOutputProfile"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "S", "OutputCondition", "OutputConditionIdentifier", "RegistryName", "Info", "DestOutputProfile"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "S", "OutputCondition", "OutputConditionIdentifier", "RegistryName", "Info", "DestOutputProfile", "DestOutputProfileRef", "MixingHints", "SpectralData"
    };
    


}

/// <summary>
/// OutputIntents_Type Table 401
/// </summary>
internal partial class APM_OutputIntents_Type : APM_OutputIntents_Type__Base
{
}


internal partial class APM_OutputIntents_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_OutputIntents_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.OutputIntent)) 
        {
            ctx.Fail<APM_OutputIntents_Type>($"Invalid value {val}, allowed are: [OutputIntent]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// OutputIntents_S 
/// </summary>
internal partial class APM_OutputIntents_S : APM_OutputIntents_S__Base
{
}


internal partial class APM_OutputIntents_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_OutputIntents_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.GTS_PDFX || val == PdfName.GTS_PDFA1 || val == PdfName.ISO_PDFE1)) 
        {
            ctx.Fail<APM_OutputIntents_S>($"Invalid value {val}, allowed are: [GTS_PDFX,GTS_PDFA1,ISO_PDFE1]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// OutputIntents_OutputCondition 
/// </summary>
internal partial class APM_OutputIntents_OutputCondition : APM_OutputIntents_OutputCondition__Base
{
}


internal partial class APM_OutputIntents_OutputCondition__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_OutputCondition";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_OutputIntents_OutputCondition>(obj, "OutputCondition", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OutputIntents_OutputConditionIdentifier 
/// </summary>
internal partial class APM_OutputIntents_OutputConditionIdentifier : APM_OutputIntents_OutputConditionIdentifier__Base
{
}


internal partial class APM_OutputIntents_OutputConditionIdentifier__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_OutputConditionIdentifier";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfString, APM_OutputIntents_OutputConditionIdentifier>(obj, "OutputConditionIdentifier", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OutputIntents_RegistryName 
/// </summary>
internal partial class APM_OutputIntents_RegistryName : APM_OutputIntents_RegistryName__Base
{
}


internal partial class APM_OutputIntents_RegistryName__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_RegistryName";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_OutputIntents_RegistryName>(obj, "RegistryName", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OutputIntents_Info 
/// </summary>
internal partial class APM_OutputIntents_Info : APM_OutputIntents_Info__Base
{
}


internal partial class APM_OutputIntents_Info__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_Info";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_OutputIntents_Info>(obj, "Info", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// OutputIntents_DestOutputProfile 
/// </summary>
internal partial class APM_OutputIntents_DestOutputProfile : APM_OutputIntents_DestOutputProfile__Base
{
}


internal partial class APM_OutputIntents_DestOutputProfile__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_DestOutputProfile";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_OutputIntents_DestOutputProfile>(obj, "DestOutputProfile", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ICCProfileStream, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// OutputIntents_DestOutputProfileRef 
/// </summary>
internal partial class APM_OutputIntents_DestOutputProfileRef : APM_OutputIntents_DestOutputProfileRef__Base
{
}


internal partial class APM_OutputIntents_DestOutputProfileRef__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_DestOutputProfileRef";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OutputIntents_DestOutputProfileRef>(obj, "DestOutputProfileRef", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DestOutputProfileRef, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OutputIntents_MixingHints 
/// </summary>
internal partial class APM_OutputIntents_MixingHints : APM_OutputIntents_MixingHints__Base
{
}


internal partial class APM_OutputIntents_MixingHints__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_MixingHints";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OutputIntents_MixingHints>(obj, "MixingHints", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DeviceNMixingHints, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// OutputIntents_SpectralData 
/// </summary>
internal partial class APM_OutputIntents_SpectralData : APM_OutputIntents_SpectralData__Base
{
}


internal partial class APM_OutputIntents_SpectralData__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "OutputIntents_SpectralData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_OutputIntents_SpectralData>(obj, "SpectralData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_SpectralData, PdfDictionary>(stack, val, obj);
        
    }


}

