// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_ActionRendition : APM_ActionRendition_Base
{
}

internal partial class APM_ActionRendition_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "ActionRendition";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_ActionRendition_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionRendition_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionRendition_Next, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionRendition_R, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionRendition_AN, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionRendition_OP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionRendition_JS, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_ActionRendition>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_ActionRendition>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_ActionRendition>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_ActionRendition>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_ActionRendition>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_ActionRendition>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_ActionRendition_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "S", "Next", "R", "AN", "OP", "JS"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "S", "Next", "R", "AN", "OP", "JS"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "S", "Next", "R", "AN", "OP", "JS"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "S", "Next", "R", "AN", "OP", "JS"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "S", "Next", "R", "AN", "OP", "JS"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "S", "Next", "R", "AN", "OP", "JS"
    };
    


}

/// <summary>
/// ActionRendition_Type Table 196 and Table 218
/// </summary>
internal partial class APM_ActionRendition_Type : APM_ActionRendition_Type_Base
{
}


internal partial class APM_ActionRendition_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionRendition_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_ActionRendition_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Action")) 
        {
            ctx.Fail<APM_ActionRendition_Type>($"Invalid value {val}, allowed are: [Action]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// ActionRendition_S 
/// </summary>
internal partial class APM_ActionRendition_S : APM_ActionRendition_S_Base
{
}


internal partial class APM_ActionRendition_S_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionRendition_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_ActionRendition_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Rendition")) 
        {
            ctx.Fail<APM_ActionRendition_S>($"Invalid value {val}, allowed are: [Rendition]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// ActionRendition_Next 
/// </summary>
internal partial class APM_ActionRendition_Next : APM_ActionRendition_Next_Base
{
}


internal partial class APM_ActionRendition_Next_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionRendition_Next";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_ActionRendition_Next>(obj, "Next", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfActions, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_ActionGoTo.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionGoTo, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionGoToR.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionGoToR, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionLaunch.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionLaunch, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionThread.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionThread, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionURI.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionURI, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionSound.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionSound, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionMovie.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionMovie, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionHide.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionHide, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionNamed.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionNamed, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionSubmitForm.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionSubmitForm, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionResetForm.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionResetForm, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionImportData.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionImportData, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionSetOCGState.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionSetOCGState, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionRendition.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionRendition, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionTransition.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionTransition, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionECMAScript.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_ActionRendition_Next>("Next did not match any allowable types: '[ActionGoTo,ActionGoToR,fn:SinceVersion(1.6,ActionGoToE),fn:SinceVersion(2.0,ActionGoToDp),ActionLaunch,ActionThread,ActionURI,ActionSound,ActionMovie,ActionHide,ActionNamed,ActionSubmitForm,ActionResetForm,ActionImportData,ActionSetOCGState,ActionRendition,ActionTransition,fn:SinceVersion(1.6,ActionGoTo3DView),ActionECMAScript,fn:SinceVersion(2.0,ActionRichMediaExecute)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_ActionRendition_Next>("Next is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// ActionRendition_R 
/// </summary>
internal partial class APM_ActionRendition_R : APM_ActionRendition_R_Base
{
}


internal partial class APM_ActionRendition_R_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionRendition_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfDictionary? val;
        {
            var OP = obj.Get("OP");
            if ((eq(OP,0)||eq(OP,4))) {
                val = ctx.GetRequired<PdfDictionary, APM_ActionRendition_R>(obj, "R", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfDictionary, APM_ActionRendition_R>(obj, "R", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        if (APM_RenditionSelector.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_RenditionSelector, PdfDictionary>(stack, val, obj);
        } else if (APM_RenditionMedia.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_RenditionMedia, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_ActionRendition_R>("R did not match any allowable types: '[RenditionSelector,RenditionMedia]'");
        }
        
    }


}

/// <summary>
/// ActionRendition_AN 
/// </summary>
internal partial class APM_ActionRendition_AN : APM_ActionRendition_AN_Base
{
}


internal partial class APM_ActionRendition_AN_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionRendition_AN";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfDictionary? val;
        {
            var OP = obj.Get("OP");
            if ((gte(OP,0)&&lte(OP,4))) {
                val = ctx.GetRequired<PdfDictionary, APM_ActionRendition_AN>(obj, "AN", IndirectRequirement.MustBeIndirect);
            } else {
                val = ctx.GetOptional<PdfDictionary, APM_ActionRendition_AN>(obj, "AN", IndirectRequirement.MustBeIndirect);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_AnnotScreen, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// ActionRendition_OP 
/// </summary>
internal partial class APM_ActionRendition_OP : APM_ActionRendition_OP_Base
{
}


internal partial class APM_ActionRendition_OP_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionRendition_OP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_ActionRendition_OP>(obj, "OP", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @OP = val;
        if (!((gte(@OP,0)&&lte(@OP,4)))) 
        {
            ctx.Fail<APM_ActionRendition_OP>($"Invalid value {val}, allowed are: [fn:Eval((@OP>=0) && (@OP<=4))]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// ActionRendition_JS 
/// </summary>
internal partial class APM_ActionRendition_JS : APM_ActionRendition_JS_Base
{
}


internal partial class APM_ActionRendition_JS_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionRendition_JS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_ActionRendition_JS>(obj, "JS", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_ActionRendition_JS>("JS is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_ActionRendition_JS>("JS is required to one of 'stream;string-text', was " + utval.Type);
                return;
        }
    }


}

