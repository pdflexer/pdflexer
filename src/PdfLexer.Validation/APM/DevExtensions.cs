// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_DevExtensions : APM_DevExtensions__Base
{
}

internal partial class APM_DevExtensions__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "DevExtensions";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_DevExtensions_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DevExtensions_BaseVersion, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DevExtensions_ExtensionLevel, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DevExtensions_URL, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_DevExtensions_ExtensionRevision, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_DevExtensions>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_DevExtensions>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_DevExtensions>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_DevExtensions>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_DevExtensions_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "BaseVersion", "ExtensionLevel"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "BaseVersion", "ExtensionLevel"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "BaseVersion", "ExtensionLevel"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "BaseVersion", "ExtensionLevel", "URL", "ExtensionRevision"
    };
    


}

/// <summary>
/// DevExtensions_Type Table 49
/// </summary>
internal partial class APM_DevExtensions_Type : APM_DevExtensions_Type__Base
{
}


internal partial class APM_DevExtensions_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DevExtensions_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        // TODO complex IR
        var val = ctx.GetOptional<PdfName, APM_DevExtensions_Type>(obj, "Type", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.DeveloperExtensions)) 
        {
            ctx.Fail<APM_DevExtensions_Type>($"Invalid value {val}, allowed are: [DeveloperExtensions]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// DevExtensions_BaseVersion 
/// </summary>
internal partial class APM_DevExtensions_BaseVersion : APM_DevExtensions_BaseVersion__Base
{
}


internal partial class APM_DevExtensions_BaseVersion__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DevExtensions_BaseVersion";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        // TODO complex IR
        var val = ctx.GetRequired<PdfName, APM_DevExtensions_BaseVersion>(obj, "BaseVersion", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.N17 || val == PdfName.N20)) 
        {
            ctx.Fail<APM_DevExtensions_BaseVersion>($"Invalid value {val}, allowed are: [1.7,2.0]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// DevExtensions_ExtensionLevel 
/// </summary>
internal partial class APM_DevExtensions_ExtensionLevel : APM_DevExtensions_ExtensionLevel__Base
{
}


internal partial class APM_DevExtensions_ExtensionLevel__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DevExtensions_ExtensionLevel";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        // TODO complex IR
        var val = ctx.GetRequired<PdfIntNumber, APM_DevExtensions_ExtensionLevel>(obj, "ExtensionLevel", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// DevExtensions_URL 
/// </summary>
internal partial class APM_DevExtensions_URL : APM_DevExtensions_URL__Base
{
}


internal partial class APM_DevExtensions_URL__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DevExtensions_URL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        // TODO complex IR
        var val = ctx.GetOptional<PdfString, APM_DevExtensions_URL>(obj, "URL", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// DevExtensions_ExtensionRevision 
/// </summary>
internal partial class APM_DevExtensions_ExtensionRevision : APM_DevExtensions_ExtensionRevision__Base
{
}


internal partial class APM_DevExtensions_ExtensionRevision__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "DevExtensions_ExtensionRevision";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        // TODO complex IR
        var val = ctx.GetOptional<PdfString, APM_DevExtensions_ExtensionRevision>(obj, "ExtensionRevision", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

