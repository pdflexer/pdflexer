// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_PageLabel : APM_PageLabel_Base
{
}

internal partial class APM_PageLabel_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "PageLabel";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_PageLabel_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PageLabel_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PageLabel_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PageLabel_St, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_PageLabel>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_PageLabel>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_PageLabel>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_PageLabel>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_PageLabel>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_PageLabel>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_PageLabel>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_PageLabel>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_PageLabel_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_13 { get; } = new List<string> 
    {
        "Type", "S", "P", "St"
    };
    public static List<string> AllowedFields_14 { get; } = new List<string> 
    {
        "Type", "S", "P", "St"
    };
    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "Type", "S", "P", "St"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "Type", "S", "P", "St"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "S", "P", "St"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "S", "P", "St"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "S", "P", "St"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "S", "P", "St"
    };
    


}

/// <summary>
/// PageLabel_Type Table 161
/// </summary>
internal partial class APM_PageLabel_Type : APM_PageLabel_Type_Base
{
}


internal partial class APM_PageLabel_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageLabel_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_PageLabel_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "PageLabel")) 
        {
            ctx.Fail<APM_PageLabel_Type>($"Invalid value {val}, allowed are: [PageLabel]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// PageLabel_S 
/// </summary>
internal partial class APM_PageLabel_S : APM_PageLabel_S_Base
{
}


internal partial class APM_PageLabel_S_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageLabel_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_PageLabel_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "D" || val == "R" || val == "r" || val == "A" || val == "a")) 
        {
            ctx.Fail<APM_PageLabel_S>($"Invalid value {val}, allowed are: [D,R,r,A,a]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// PageLabel_P 
/// </summary>
internal partial class APM_PageLabel_P : APM_PageLabel_P_Base
{
}


internal partial class APM_PageLabel_P_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageLabel_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_PageLabel_P>(obj, "P", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PageLabel_St 
/// </summary>
internal partial class APM_PageLabel_St : APM_PageLabel_St_Base
{
}


internal partial class APM_PageLabel_St_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PageLabel_St";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_PageLabel_St>(obj, "St", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @St = val;
        if (!(gte(@St,1))) 
        {
            ctx.Fail<APM_PageLabel_St>($"Invalid value {val}, allowed are: [fn:Eval(@St>=1)]");
        }
        }
        // no linked objects
        
    }


}

