// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_FilterDCTDecode : APM_FilterDCTDecode__Base
{
}

internal partial class APM_FilterDCTDecode__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "FilterDCTDecode";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_FilterDCTDecode_ColorTransform, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
            case 1.1m:
            case 1.2m:
            case 1.3m:
            case 1.4m:
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10_11_12_13_14_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_FilterDCTDecode>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_10_11_12_13_14_15_16_17_18_19_20 { get; } = new List<string> 
    {
        "ColorTransform"
    };
    


}

/// <summary>
/// FilterDCTDecode_ColorTransform Table 13
/// </summary>
internal partial class APM_FilterDCTDecode_ColorTransform : APM_FilterDCTDecode_ColorTransform__Base
{
}


internal partial class APM_FilterDCTDecode_ColorTransform__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FilterDCTDecode_ColorTransform";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_FilterDCTDecode_ColorTransform>(obj, "ColorTransform", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 0 || val == 1)) 
        {
            ctx.Fail<APM_FilterDCTDecode_ColorTransform>($"Invalid value {val}, allowed are: [0,1]");
        }
        // no linked objects
        
    }


}

