// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_3DMeasureAD3 : APM_3DMeasureAD3__Base
{
}

internal partial class APM_3DMeasureAD3__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "3DMeasureAD3";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_3DMeasureAD3_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_TRL, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_AP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_A1, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_D1, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_N1, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_A2, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_D2, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_N2, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_TP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_TX, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_TY, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_TS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_V, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_UT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_DR, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DMeasureAD3_S, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_3DMeasureAD3>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_3DMeasureAD3>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_3DMeasureAD3>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_3DMeasureAD3>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_3DMeasureAD3_Type, PdfDictionary>(new CallStack(), obj, null);
        c.Run<APM_3DMeasureAD3_Subtype, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "TRL", "AP", "A1", "D1", "N1", "A2", "D2", "N2", "TP", "TX", "TY", "TS", "C", "V", "P", "UT", "DR", "S"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "TRL", "AP", "A1", "D1", "N1", "A2", "D2", "N2", "TP", "TX", "TY", "TS", "C", "V", "P", "UT", "DR", "S"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "TRL", "AP", "A1", "D1", "N1", "A2", "D2", "N2", "TP", "TX", "TY", "TS", "C", "V", "P", "UT", "DR", "S"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "TRL", "AP", "A1", "D1", "N1", "A2", "D2", "N2", "TP", "TX", "TY", "TS", "C", "V", "P", "UT", "DR", "S"
    };
    


}

/// <summary>
/// 3DMeasureAD3_Type Table 326 and Table 329 angular measurement
/// </summary>
internal partial class APM_3DMeasureAD3_Type : APM_3DMeasureAD3_Type__Base
{
}


internal partial class APM_3DMeasureAD3_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_3DMeasureAD3_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.N3DMeasure)) 
        {
            ctx.Fail<APM_3DMeasureAD3_Type>($"Invalid value {val}, allowed are: [3DMeasure]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_Subtype 
/// </summary>
internal partial class APM_3DMeasureAD3_Subtype : APM_3DMeasureAD3_Subtype__Base
{
}


internal partial class APM_3DMeasureAD3_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_3DMeasureAD3_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.AD3)) 
        {
            ctx.Fail<APM_3DMeasureAD3_Subtype>($"Invalid value {val}, allowed are: [AD3]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_TRL 
/// </summary>
internal partial class APM_3DMeasureAD3_TRL : APM_3DMeasureAD3_TRL__Base
{
}


internal partial class APM_3DMeasureAD3_TRL__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_TRL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_3DMeasureAD3_TRL>(obj, "TRL", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_AP 
/// </summary>
internal partial class APM_3DMeasureAD3_AP : APM_3DMeasureAD3_AP__Base
{
}


internal partial class APM_3DMeasureAD3_AP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_AP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_3DMeasureAD3_AP>(obj, "AP", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DMeasureAD3_A1 
/// </summary>
internal partial class APM_3DMeasureAD3_A1 : APM_3DMeasureAD3_A1__Base
{
}


internal partial class APM_3DMeasureAD3_A1__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_A1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_3DMeasureAD3_A1>(obj, "A1", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DMeasureAD3_D1 
/// </summary>
internal partial class APM_3DMeasureAD3_D1 : APM_3DMeasureAD3_D1__Base
{
}


internal partial class APM_3DMeasureAD3_D1__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_D1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_3DMeasureAD3_D1>(obj, "D1", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DMeasureAD3_N1 
/// </summary>
internal partial class APM_3DMeasureAD3_N1 : APM_3DMeasureAD3_N1__Base
{
}


internal partial class APM_3DMeasureAD3_N1__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_N1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_3DMeasureAD3_N1>(obj, "N1", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_A2 
/// </summary>
internal partial class APM_3DMeasureAD3_A2 : APM_3DMeasureAD3_A2__Base
{
}


internal partial class APM_3DMeasureAD3_A2__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_A2";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_3DMeasureAD3_A2>(obj, "A2", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DMeasureAD3_D2 
/// </summary>
internal partial class APM_3DMeasureAD3_D2 : APM_3DMeasureAD3_D2__Base
{
}


internal partial class APM_3DMeasureAD3_D2__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_D2";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_3DMeasureAD3_D2>(obj, "D2", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DMeasureAD3_N2 
/// </summary>
internal partial class APM_3DMeasureAD3_N2 : APM_3DMeasureAD3_N2__Base
{
}


internal partial class APM_3DMeasureAD3_N2__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_N2";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_3DMeasureAD3_N2>(obj, "N2", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_TP 
/// </summary>
internal partial class APM_3DMeasureAD3_TP : APM_3DMeasureAD3_TP__Base
{
}


internal partial class APM_3DMeasureAD3_TP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_TP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_3DMeasureAD3_TP>(obj, "TP", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DMeasureAD3_TX 
/// </summary>
internal partial class APM_3DMeasureAD3_TX : APM_3DMeasureAD3_TX__Base
{
}


internal partial class APM_3DMeasureAD3_TX__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_TX";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_3DMeasureAD3_TX>(obj, "TX", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DMeasureAD3_TY 
/// </summary>
internal partial class APM_3DMeasureAD3_TY : APM_3DMeasureAD3_TY__Base
{
}


internal partial class APM_3DMeasureAD3_TY__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_TY";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_3DMeasureAD3_TY>(obj, "TY", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DMeasureAD3_TS text point size
/// </summary>
internal partial class APM_3DMeasureAD3_TS : APM_3DMeasureAD3_TS__Base
{
}


internal partial class APM_3DMeasureAD3_TS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_TS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_3DMeasureAD3_TS>(obj, "TS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_C 
/// </summary>
internal partial class APM_3DMeasureAD3_C : APM_3DMeasureAD3_C__Base
{
}


internal partial class APM_3DMeasureAD3_C__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_3DMeasureAD3_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_3RGBNumbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DMeasureAD3_V 
/// </summary>
internal partial class APM_3DMeasureAD3_V : APM_3DMeasureAD3_V__Base
{
}


internal partial class APM_3DMeasureAD3_V__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_3DMeasureAD3_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_P precision digits
/// </summary>
internal partial class APM_3DMeasureAD3_P : APM_3DMeasureAD3_P__Base
{
}


internal partial class APM_3DMeasureAD3_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_3DMeasureAD3_P>(obj, "P", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var P = obj.Get("P");
        if (!(gte(P,0))) 
        {
            ctx.Fail<APM_3DMeasureAD3_P>($"Invalid value {val}, allowed are: [fn:Eval(@P>=0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_UT 
/// </summary>
internal partial class APM_3DMeasureAD3_UT : APM_3DMeasureAD3_UT__Base
{
}


internal partial class APM_3DMeasureAD3_UT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_UT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_3DMeasureAD3_UT>(obj, "UT", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_DR 
/// </summary>
internal partial class APM_3DMeasureAD3_DR : APM_3DMeasureAD3_DR__Base
{
}


internal partial class APM_3DMeasureAD3_DR__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_DR";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_3DMeasureAD3_DR>(obj, "DR", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DMeasureAD3_S 
/// </summary>
internal partial class APM_3DMeasureAD3_S : APM_3DMeasureAD3_S__Base
{
}


internal partial class APM_3DMeasureAD3_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DMeasureAD3_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_3DMeasureAD3_S>(obj, "S", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_AnnotProjection, PdfDictionary>(stack, val, obj);
        
    }


}

