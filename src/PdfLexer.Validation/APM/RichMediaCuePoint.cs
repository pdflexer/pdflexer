// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_RichMediaCuePoint : APM_RichMediaCuePoint__Base
{
}

internal partial class APM_RichMediaCuePoint__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "RichMediaCuePoint";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_RichMediaCuePoint_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaCuePoint_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaCuePoint_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaCuePoint_Time, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaCuePoint_A, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
        
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_RichMediaCuePoint_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    


}

/// <summary>
/// RichMediaCuePoint_Type Adobe Extension Level 3, Table 9.51e
/// </summary>
internal partial class APM_RichMediaCuePoint_Type : APM_RichMediaCuePoint_Type__Base
{
}


internal partial class APM_RichMediaCuePoint_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaCuePoint_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaCuePoint_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "CuePoint")) 
        {
            ctx.Fail<APM_RichMediaCuePoint_Type>($"Invalid value {val}, allowed are: [CuePoint]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaCuePoint_Subtype 
/// </summary>
internal partial class APM_RichMediaCuePoint_Subtype : APM_RichMediaCuePoint_Subtype__Base
{
}


internal partial class APM_RichMediaCuePoint_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaCuePoint_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaCuePoint_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Navigation" || val == "Event")) 
        {
            ctx.Fail<APM_RichMediaCuePoint_Subtype>($"Invalid value {val}, allowed are: [Navigation,Event]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaCuePoint_Name 
/// </summary>
internal partial class APM_RichMediaCuePoint_Name : APM_RichMediaCuePoint_Name__Base
{
}


internal partial class APM_RichMediaCuePoint_Name__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaCuePoint_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfString, APM_RichMediaCuePoint_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaCuePoint_Time 
/// </summary>
internal partial class APM_RichMediaCuePoint_Time : APM_RichMediaCuePoint_Time__Base
{
}


internal partial class APM_RichMediaCuePoint_Time__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaCuePoint_Time";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_RichMediaCuePoint_Time>(obj, "Time", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaCuePoint_A 
/// </summary>
internal partial class APM_RichMediaCuePoint_A : APM_RichMediaCuePoint_A__Base
{
}


internal partial class APM_RichMediaCuePoint_A__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaCuePoint_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfDictionary, APM_RichMediaCuePoint_A>(obj, "A", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_ActionGoTo.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoTo, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionGoToR.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoToR, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionGoToE.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoToE, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionLaunch.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionLaunch, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionThread.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionThread, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionURI.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionURI, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionSound.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionSound, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionMovie.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionMovie, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionHide.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionHide, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionNamed.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionNamed, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionSubmitForm.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionSubmitForm, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionResetForm.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionResetForm, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionImportData.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionImportData, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionSetOCGState.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionSetOCGState, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionRendition.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionRendition, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionTransition.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionTransition, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionGoTo3DView.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoTo3DView, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionECMAScript.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionRichMediaExecute.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionRichMediaExecute, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_RichMediaCuePoint_A>("A did not match any allowable types: '[ActionGoTo,ActionGoToR,ActionGoToE,ActionLaunch,ActionThread,ActionURI,ActionSound,ActionMovie,ActionHide,ActionNamed,ActionSubmitForm,ActionResetForm,ActionImportData,ActionSetOCGState,ActionRendition,ActionTransition,ActionGoTo3DView,ActionECMAScript,ActionRichMediaExecute]'");
        }
        
    }


}

