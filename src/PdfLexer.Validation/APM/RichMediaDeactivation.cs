// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_RichMediaDeactivation : APM_RichMediaDeactivation__Base
{
}

internal partial class APM_RichMediaDeactivation__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "RichMediaDeactivation";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_RichMediaDeactivation_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaDeactivation_Condition, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
        
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_RichMediaDeactivation_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    


}

/// <summary>
/// RichMediaDeactivation_Type Table 336
/// </summary>
internal partial class APM_RichMediaDeactivation_Type : APM_RichMediaDeactivation_Type__Base
{
}


internal partial class APM_RichMediaDeactivation_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaDeactivation_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaDeactivation_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "RichMediaDeactivation")) 
        {
            ctx.Fail<APM_RichMediaDeactivation_Type>($"Invalid value {val}, allowed are: [RichMediaDeactivation]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaDeactivation_Condition 
/// </summary>
internal partial class APM_RichMediaDeactivation_Condition : APM_RichMediaDeactivation_Condition__Base
{
}


internal partial class APM_RichMediaDeactivation_Condition__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaDeactivation_Condition";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaDeactivation_Condition>(obj, "Condition", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "XD" || val == "PC" || val == "PI")) 
        {
            ctx.Fail<APM_RichMediaDeactivation_Condition>($"Invalid value {val}, allowed are: [XD,PC,PI]");
        }
        // no linked objects
        
    }


}

