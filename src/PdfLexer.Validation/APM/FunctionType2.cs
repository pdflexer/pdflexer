// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_FunctionType2 : APM_FunctionType2__Base
{
}

internal partial class APM_FunctionType2__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "FunctionType2";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_FunctionType2_FunctionType, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType2_Domain, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType2_Range, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType2_C0, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType2_C1, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FunctionType2_N, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType2>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType2>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType2>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType2>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType2>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType2>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType2>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_FunctionType2>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "C0", "C1", "N"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "C0", "C1", "N"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "C0", "C1", "N"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "C0", "C1", "N"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "C0", "C1", "N"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "C0", "C1", "N"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "C0", "C1", "N"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "FunctionType", "Domain", "Range", "C0", "C1", "N"
    };
    


}

/// <summary>
/// FunctionType2_FunctionType Table 38 and Table 40
/// </summary>
internal partial class APM_FunctionType2_FunctionType : APM_FunctionType2_FunctionType__Base
{
}


internal partial class APM_FunctionType2_FunctionType__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType2_FunctionType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfIntNumber, APM_FunctionType2_FunctionType>(obj, "FunctionType", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 2)) 
        {
            ctx.Fail<APM_FunctionType2_FunctionType>($"Invalid value {val}, allowed are: [2]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FunctionType2_Domain 
/// </summary>
internal partial class APM_FunctionType2_Domain : APM_FunctionType2_Domain__Base
{
}


internal partial class APM_FunctionType2_Domain__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType2_Domain";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_FunctionType2_Domain>(obj, "Domain", IndirectRequirement.Either);
        if (val == null) { return; }
        var Domain = obj.Get("Domain");
        if (!(eq(mod(((Domain as PdfArray)?.Count),2),0))) 
        {
            ctx.Fail<APM_FunctionType2_Domain>($"Value failed special case check: fn:Eval((fn:ArrayLength(Domain) mod 2)==0)");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType2_Range 
/// </summary>
internal partial class APM_FunctionType2_Range : APM_FunctionType2_Range__Base
{
}


internal partial class APM_FunctionType2_Range__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType2_Range";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_FunctionType2_Range>(obj, "Range", IndirectRequirement.Either);
        if (val == null) { return; }
        var Range = obj.Get("Range");
        if (!(eq(mod(((Range as PdfArray)?.Count),2),0))) 
        {
            ctx.Fail<APM_FunctionType2_Range>($"Value failed special case check: fn:Eval((fn:ArrayLength(Range) mod 2)==0)");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType2_C0 
/// </summary>
internal partial class APM_FunctionType2_C0 : APM_FunctionType2_C0__Base
{
}


internal partial class APM_FunctionType2_C0__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType2_C0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_FunctionType2_C0>(obj, "C0", IndirectRequirement.Either);
        if (val == null) { return; }
        var C0 = obj.Get("C0");
        var C1 = obj.Get("C1");
        if (!(eq(((C0 as PdfArray)?.Count),((C1 as PdfArray)?.Count)))) 
        {
            ctx.Fail<APM_FunctionType2_C0>($"Value failed special case check: fn:Eval(fn:ArrayLength(C0)==fn:ArrayLength(C1))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType2_C1 
/// </summary>
internal partial class APM_FunctionType2_C1 : APM_FunctionType2_C1__Base
{
}


internal partial class APM_FunctionType2_C1__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType2_C1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_FunctionType2_C1>(obj, "C1", IndirectRequirement.Either);
        if (val == null) { return; }
        var C1 = obj.Get("C1");
        var C0 = obj.Get("C0");
        if (!(eq(((C1 as PdfArray)?.Count),((C0 as PdfArray)?.Count)))) 
        {
            ctx.Fail<APM_FunctionType2_C1>($"Value failed special case check: fn:Eval(fn:ArrayLength(C1)==fn:ArrayLength(C0))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FunctionType2_N 
/// </summary>
internal partial class APM_FunctionType2_N : APM_FunctionType2_N__Base
{
}


internal partial class APM_FunctionType2_N__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FunctionType2_N";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfNumber, APM_FunctionType2_N>(obj, "N", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

