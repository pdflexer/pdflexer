// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_3DAnimationStyle : APM_3DAnimationStyle__Base
{
}

internal partial class APM_3DAnimationStyle__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "3DAnimationStyle";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_3DAnimationStyle_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DAnimationStyle_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DAnimationStyle_PC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DAnimationStyle_TM, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_3DAnimationStyle>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_3DAnimationStyle_Type, PdfDictionary>(new CallStack(), obj, null);
        c.Run<APM_3DAnimationStyle_Subtype, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_17_18_19_20 { get; } = new List<string> 
    {
        "PC", "Subtype", "TM", "Type"
    };
    


}

/// <summary>
/// 3DAnimationStyle_Type Table 312
/// </summary>
internal partial class APM_3DAnimationStyle_Type : APM_3DAnimationStyle_Type__Base
{
}


internal partial class APM_3DAnimationStyle_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DAnimationStyle_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_3DAnimationStyle_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.N3DAnimationStyle)) 
        {
            ctx.Fail<APM_3DAnimationStyle_Type>($"Invalid value {val}, allowed are: [3DAnimationStyle]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DAnimationStyle_Subtype Table 313
/// </summary>
internal partial class APM_3DAnimationStyle_Subtype : APM_3DAnimationStyle_Subtype__Base
{
}


internal partial class APM_3DAnimationStyle_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DAnimationStyle_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_3DAnimationStyle_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.None || val == PdfName.Linear || val == PdfName.Oscillating)) 
        {
            ctx.Fail<APM_3DAnimationStyle_Subtype>($"Invalid value {val}, allowed are: [None,Linear,Oscillating]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DAnimationStyle_PC 
/// </summary>
internal partial class APM_3DAnimationStyle_PC : APM_3DAnimationStyle_PC__Base
{
}


internal partial class APM_3DAnimationStyle_PC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DAnimationStyle_PC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_3DAnimationStyle_PC>(obj, "PC", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DAnimationStyle_TM 
/// </summary>
internal partial class APM_3DAnimationStyle_TM : APM_3DAnimationStyle_TM__Base
{
}


internal partial class APM_3DAnimationStyle_TM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DAnimationStyle_TM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_3DAnimationStyle_TM>(obj, "TM", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        
        var TM = obj.Get("TM");
        if (!(gt(TM,0))) 
        {
            ctx.Fail<APM_3DAnimationStyle_TM>($"Invalid value {val}, allowed are: [fn:Eval(@TM>0)]");
        }
        // no linked objects
        
    }


}

