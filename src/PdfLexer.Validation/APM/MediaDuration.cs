// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_MediaDuration : APM_MediaDuration__Base
{
}

internal partial class APM_MediaDuration__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "MediaDuration";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_MediaDuration_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaDuration_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MediaDuration_T, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_MediaDuration>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_MediaDuration>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_MediaDuration>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_MediaDuration>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_MediaDuration>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_MediaDuration>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_MediaDuration_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "Type", "S", "T"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "Type", "S", "T"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "S", "T"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "S", "T"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "S", "T"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "S", "T"
    };
    


}

/// <summary>
/// MediaDuration_Type Table 292
/// </summary>
internal partial class APM_MediaDuration_Type : APM_MediaDuration_Type__Base
{
}


internal partial class APM_MediaDuration_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaDuration_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_MediaDuration_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.MediaDuration)) 
        {
            ctx.Fail<APM_MediaDuration_Type>($"Invalid value {val}, allowed are: [MediaDuration]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// MediaDuration_S 
/// </summary>
internal partial class APM_MediaDuration_S : APM_MediaDuration_S__Base
{
}


internal partial class APM_MediaDuration_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaDuration_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_MediaDuration_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.I || val == PdfName.F || val == PdfName.T)) 
        {
            ctx.Fail<APM_MediaDuration_S>($"Invalid value {val}, allowed are: [I,F,T]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// MediaDuration_T 
/// </summary>
internal partial class APM_MediaDuration_T : APM_MediaDuration_T__Base
{
}


internal partial class APM_MediaDuration_T__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MediaDuration_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var S = obj.Get("S");
        var val = ctx.GetOptional<PdfDictionary, APM_MediaDuration_T>(obj, "T", IndirectRequirement.Either);
        if ((eq(S,PdfName.T)) && val == null) {
            ctx.Fail<APM_MediaDuration_T>("T is required when 'fn:IsRequired(@S==T)"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Timespan, PdfDictionary>(stack, val, obj);
        
    }


}

