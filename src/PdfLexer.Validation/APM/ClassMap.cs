// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_ClassMap : APM_ClassMap_Base
{
}

internal partial class APM_ClassMap_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "ClassMap";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_ClassMap_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    


}

/// <summary>
/// ClassMap_* Table 354, ClassMap cell and Clause 14.7.6.2
/// </summary>
internal partial class APM_ClassMap_CatchAll : APM_ClassMap_CatchAll_Base
{
}


internal partial class APM_ClassMap_CatchAll_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ClassMap_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var (utval, wasIR) = ctx.GetOptional<APM_ClassMap_CatchAll>(obj, key, IndirectRequirement.Either);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                case PdfObjectType.ArrayObj:
                    {
                        var val =  (PdfArray)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        ctx.Run<APM_ArrayOfAttributeObjects, PdfArray>(stack, val, obj);
                        return;
                    }
                case PdfObjectType.DictionaryObj:
                    {
                        var val =  (PdfDictionary)utval;
                        // no indirect obj reqs
                        // no special cases
                        // no value restrictions
                        ctx.Run<APM_StructureAttributesDict, PdfDictionary>(stack, val, obj);
                        return;
                    }
                
                default:
                    ctx.Fail<APM_ClassMap_CatchAll>("* is required to one of 'array;dictionary', was " + utval.Type);
                    return;
            }
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> {  };
}

