// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOf3PDUNames : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOf3PDUNames";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOf3PDUNames_0, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOf3PDUNames_1, PdfArray>(stack, obj, parent);
        ctx.Run<APM_ArrayOf3PDUNames_2, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false;
    }
}

/// <summary>
/// ArrayOf3PDUNames_0 Table 269, PDU cel
/// </summary>
internal partial class APM_ArrayOf3PDUNames_0 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOf3PDUNames_0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_ArrayOf3PDUNames_0>(obj, 0, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.M || val == PdfName.KM || val == PdfName.FT || val == PdfName.USFT || val == PdfName.MI || val == PdfName.NM || val == PdfName.SQM || val == PdfName.HA || val == PdfName.SQKM || val == PdfName.SQFT || val == PdfName.A || val == PdfName.SQMI || val == PdfName.DEG || val == PdfName.GRD)) 
        {
            ctx.Fail<APM_ArrayOf3PDUNames_0>($"Invalid value {val}, allowed are: [M,KM,FT,USFT,MI,NM,SQM,HA,SQKM,SQFT,A,SQMI,DEG,GRD]");
        }
        // no linked objects
        
    }
}

/// <summary>
/// ArrayOf3PDUNames_1 
/// </summary>
internal partial class APM_ArrayOf3PDUNames_1 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOf3PDUNames_1";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_ArrayOf3PDUNames_1>(obj, 1, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.M || val == PdfName.KM || val == PdfName.FT || val == PdfName.USFT || val == PdfName.MI || val == PdfName.NM || val == PdfName.SQM || val == PdfName.HA || val == PdfName.SQKM || val == PdfName.SQFT || val == PdfName.A || val == PdfName.SQMI || val == PdfName.DEG || val == PdfName.GRD)) 
        {
            ctx.Fail<APM_ArrayOf3PDUNames_1>($"Invalid value {val}, allowed are: [M,KM,FT,USFT,MI,NM,SQM,HA,SQKM,SQFT,A,SQMI,DEG,GRD]");
        }
        // no linked objects
        
    }
}

/// <summary>
/// ArrayOf3PDUNames_2 
/// </summary>
internal partial class APM_ArrayOf3PDUNames_2 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOf3PDUNames_2";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_ArrayOf3PDUNames_2>(obj, 2, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.M || val == PdfName.KM || val == PdfName.FT || val == PdfName.USFT || val == PdfName.MI || val == PdfName.NM || val == PdfName.SQM || val == PdfName.HA || val == PdfName.SQKM || val == PdfName.SQFT || val == PdfName.A || val == PdfName.SQMI || val == PdfName.DEG || val == PdfName.GRD)) 
        {
            ctx.Fail<APM_ArrayOf3PDUNames_2>($"Invalid value {val}, allowed are: [M,KM,FT,USFT,MI,NM,SQM,HA,SQKM,SQFT,A,SQMI,DEG,GRD]");
        }
        // no linked objects
        
    }
}

