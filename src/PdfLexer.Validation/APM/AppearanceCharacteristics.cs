// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AppearanceCharacteristics : APM_AppearanceCharacteristics__Base
{
}

internal partial class APM_AppearanceCharacteristics__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AppearanceCharacteristics";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AppearanceCharacteristics_R, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_BC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_BG, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_CA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_RC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_AC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_I, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_RI, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_IX, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_IF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AppearanceCharacteristics_TP, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_AppearanceCharacteristics>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_AppearanceCharacteristics>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_AppearanceCharacteristics>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_AppearanceCharacteristics>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_AppearanceCharacteristics>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_AppearanceCharacteristics>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_AppearanceCharacteristics>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_AppearanceCharacteristics>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_AppearanceCharacteristics>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "R", "BC", "BG", "CA", "RC", "AC", "I", "RI", "IX", "TP"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "R", "BC", "BG", "CA", "RC", "AC", "I", "RI", "IX", "IF", "TP"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "R", "BC", "BG", "CA", "RC", "AC", "I", "RI", "IX", "IF", "TP"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "R", "BC", "BG", "CA", "RC", "AC", "I", "RI", "IX", "IF", "TP"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "R", "BC", "BG", "CA", "RC", "AC", "I", "RI", "IX", "IF", "TP"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "R", "BC", "BG", "CA", "RC", "AC", "I", "RI", "IX", "IF", "TP"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "R", "BC", "BG", "CA", "RC", "AC", "I", "RI", "IX", "IF", "TP"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "R", "BC", "BG", "CA", "RC", "AC", "I", "RI", "IX", "IF", "TP"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "R", "BC", "BG", "CA", "RC", "AC", "I", "RI", "IX", "IF", "TP"
    };
    


}

/// <summary>
/// AppearanceCharacteristics_R Table 192
/// </summary>
internal partial class APM_AppearanceCharacteristics_R : APM_AppearanceCharacteristics_R__Base
{
}


internal partial class APM_AppearanceCharacteristics_R__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_AppearanceCharacteristics_R>(obj, "R", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AppearanceCharacteristics_BC 
/// </summary>
internal partial class APM_AppearanceCharacteristics_BC : APM_AppearanceCharacteristics_BC__Base
{
}


internal partial class APM_AppearanceCharacteristics_BC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_BC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_AppearanceCharacteristics_BC>(obj, "BC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AppearanceCharacteristics_BG 
/// </summary>
internal partial class APM_AppearanceCharacteristics_BG : APM_AppearanceCharacteristics_BG__Base
{
}


internal partial class APM_AppearanceCharacteristics_BG__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_BG";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_AppearanceCharacteristics_BG>(obj, "BG", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AppearanceCharacteristics_CA 
/// </summary>
internal partial class APM_AppearanceCharacteristics_CA : APM_AppearanceCharacteristics_CA__Base
{
}


internal partial class APM_AppearanceCharacteristics_CA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_CA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AppearanceCharacteristics_CA>(obj, "CA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AppearanceCharacteristics_RC 
/// </summary>
internal partial class APM_AppearanceCharacteristics_RC : APM_AppearanceCharacteristics_RC__Base
{
}


internal partial class APM_AppearanceCharacteristics_RC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_RC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AppearanceCharacteristics_RC>(obj, "RC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AppearanceCharacteristics_AC 
/// </summary>
internal partial class APM_AppearanceCharacteristics_AC : APM_AppearanceCharacteristics_AC__Base
{
}


internal partial class APM_AppearanceCharacteristics_AC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_AC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_AppearanceCharacteristics_AC>(obj, "AC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AppearanceCharacteristics_I 
/// </summary>
internal partial class APM_AppearanceCharacteristics_I : APM_AppearanceCharacteristics_I__Base
{
}


internal partial class APM_AppearanceCharacteristics_I__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_I";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfStream, APM_AppearanceCharacteristics_I>(obj, "I", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_XObjectFormType1.MatchesType(ctx, val.Dictionary)) 
        {
            ctx.Run<APM_XObjectFormType1, PdfDictionary>(stack, val.Dictionary, obj);
        } else if (APM_XObjectImage.MatchesType(ctx, val.Dictionary)) 
        {
            ctx.Run<APM_XObjectImage, PdfDictionary>(stack, val.Dictionary, obj);
        }else 
        {
            ctx.Fail<APM_AppearanceCharacteristics_I>("I did not match any allowable types: '[XObjectFormType1,XObjectImage]'");
        }
        
    }


}

/// <summary>
/// AppearanceCharacteristics_RI 
/// </summary>
internal partial class APM_AppearanceCharacteristics_RI : APM_AppearanceCharacteristics_RI__Base
{
}


internal partial class APM_AppearanceCharacteristics_RI__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_RI";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfStream, APM_AppearanceCharacteristics_RI>(obj, "RI", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_XObjectFormType1.MatchesType(ctx, val.Dictionary)) 
        {
            ctx.Run<APM_XObjectFormType1, PdfDictionary>(stack, val.Dictionary, obj);
        } else if (APM_XObjectImage.MatchesType(ctx, val.Dictionary)) 
        {
            ctx.Run<APM_XObjectImage, PdfDictionary>(stack, val.Dictionary, obj);
        }else 
        {
            ctx.Fail<APM_AppearanceCharacteristics_RI>("RI did not match any allowable types: '[XObjectFormType1,XObjectImage]'");
        }
        
    }


}

/// <summary>
/// AppearanceCharacteristics_IX 
/// </summary>
internal partial class APM_AppearanceCharacteristics_IX : APM_AppearanceCharacteristics_IX__Base
{
}


internal partial class APM_AppearanceCharacteristics_IX__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_IX";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfStream, APM_AppearanceCharacteristics_IX>(obj, "IX", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_XObjectFormType1.MatchesType(ctx, val.Dictionary)) 
        {
            ctx.Run<APM_XObjectFormType1, PdfDictionary>(stack, val.Dictionary, obj);
        } else if (APM_XObjectImage.MatchesType(ctx, val.Dictionary)) 
        {
            ctx.Run<APM_XObjectImage, PdfDictionary>(stack, val.Dictionary, obj);
        }else 
        {
            ctx.Fail<APM_AppearanceCharacteristics_IX>("IX did not match any allowable types: '[XObjectFormType1,XObjectImage]'");
        }
        
    }


}

/// <summary>
/// AppearanceCharacteristics_IF 
/// </summary>
internal partial class APM_AppearanceCharacteristics_IF : APM_AppearanceCharacteristics_IF__Base
{
}


internal partial class APM_AppearanceCharacteristics_IF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_IF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_AppearanceCharacteristics_IF>(obj, "IF", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_IconFit, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AppearanceCharacteristics_TP 
/// </summary>
internal partial class APM_AppearanceCharacteristics_TP : APM_AppearanceCharacteristics_TP__Base
{
}


internal partial class APM_AppearanceCharacteristics_TP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AppearanceCharacteristics_TP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_AppearanceCharacteristics_TP>(obj, "TP", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 0m || val == 1m || val == 2m || val == 3m || val == 4m || val == 5m || val == 6m)) 
        {
            ctx.Fail<APM_AppearanceCharacteristics_TP>($"Invalid value {val}, allowed are: [0,1,2,3,4,5,6]");
        }
        // no linked objects
        
    }


}

