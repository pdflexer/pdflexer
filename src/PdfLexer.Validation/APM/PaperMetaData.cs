// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_PaperMetaData : APM_PaperMetaData_Base
{
}

internal partial class APM_PaperMetaData_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "PaperMetaData";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_PaperMetaData_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_Version, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_Resolution, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_Caption, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_Symbology, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_Width, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_Height, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_XSymWidth, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_YSymHeight, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_ECC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_nCodeWordRow, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_PaperMetaData_nCodeWordCol, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
        
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_PaperMetaData_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    


}

/// <summary>
/// PaperMetaData_Type Adobe Extension Level 3, Table 8.39b
/// </summary>
internal partial class APM_PaperMetaData_Type : APM_PaperMetaData_Type_Base
{
}


internal partial class APM_PaperMetaData_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_PaperMetaData_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "PaperMetaData")) 
        {
            ctx.Fail<APM_PaperMetaData_Type>($"Invalid value {val}, allowed are: [PaperMetaData]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_Version 
/// </summary>
internal partial class APM_PaperMetaData_Version : APM_PaperMetaData_Version_Base
{
}


internal partial class APM_PaperMetaData_Version_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_Version";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_PaperMetaData_Version>(obj, "Version", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == 1)) 
        {
            ctx.Fail<APM_PaperMetaData_Version>($"Invalid value {val}, allowed are: [1]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_Resolution 
/// </summary>
internal partial class APM_PaperMetaData_Resolution : APM_PaperMetaData_Resolution_Base
{
}


internal partial class APM_PaperMetaData_Resolution_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_Resolution";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_PaperMetaData_Resolution>(obj, "Resolution", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_Caption 
/// </summary>
internal partial class APM_PaperMetaData_Caption : APM_PaperMetaData_Caption_Base
{
}


internal partial class APM_PaperMetaData_Caption_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_Caption";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_PaperMetaData_Caption>(obj, "Caption", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_Symbology 
/// </summary>
internal partial class APM_PaperMetaData_Symbology : APM_PaperMetaData_Symbology_Base
{
}


internal partial class APM_PaperMetaData_Symbology_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_Symbology";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_PaperMetaData_Symbology>(obj, "Symbology", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "PDF417" || val == "QRCode" || val == "DataMatrix")) 
        {
            ctx.Fail<APM_PaperMetaData_Symbology>($"Invalid value {val}, allowed are: [PDF417,QRCode,DataMatrix]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_Width 
/// </summary>
internal partial class APM_PaperMetaData_Width : APM_PaperMetaData_Width_Base
{
}


internal partial class APM_PaperMetaData_Width_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_Width";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_PaperMetaData_Width>(obj, "Width", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_Height 
/// </summary>
internal partial class APM_PaperMetaData_Height : APM_PaperMetaData_Height_Base
{
}


internal partial class APM_PaperMetaData_Height_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_Height";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_PaperMetaData_Height>(obj, "Height", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_XSymWidth 
/// </summary>
internal partial class APM_PaperMetaData_XSymWidth : APM_PaperMetaData_XSymWidth_Base
{
}


internal partial class APM_PaperMetaData_XSymWidth_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_XSymWidth";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_PaperMetaData_XSymWidth>(obj, "XSymWidth", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_YSymHeight 
/// </summary>
internal partial class APM_PaperMetaData_YSymHeight : APM_PaperMetaData_YSymHeight_Base
{
}


internal partial class APM_PaperMetaData_YSymHeight_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_YSymHeight";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_PaperMetaData_YSymHeight>(obj, "YSymHeight", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_ECC 
/// </summary>
internal partial class APM_PaperMetaData_ECC : APM_PaperMetaData_ECC_Base
{
}


internal partial class APM_PaperMetaData_ECC_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_ECC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfIntNumber? val;
        {
            var Symbology = obj.Get("Symbology");
            if ((eq(Symbology,"PDF417")||eq(Symbology,"QRCode"))) {
                val = ctx.GetRequired<PdfIntNumber, APM_PaperMetaData_ECC>(obj, "ECC", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfIntNumber, APM_PaperMetaData_ECC>(obj, "ECC", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        {
        
        IPdfObject @ECC = val;
        var Symbology2 = obj.Get("Symbology");
        if (!((gte(@ECC,0)&&((eq(Symbology2,"PDF417")&&lte(@ECC,8))||(eq(Symbology2,"QRCode")&&lte(@ECC,3)))))) 
        {
            ctx.Fail<APM_PaperMetaData_ECC>($"Invalid value {val}, allowed are: [fn:Eval((@ECC>=0) && (((@Symbology==PDF417) && (@ECC<=8)) || ((@Symbology==QRCode) && (@ECC<=3))))]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_nCodeWordRow 
/// </summary>
internal partial class APM_PaperMetaData_nCodeWordRow : APM_PaperMetaData_nCodeWordRow_Base
{
}


internal partial class APM_PaperMetaData_nCodeWordRow_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_nCodeWordRow";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_PaperMetaData_nCodeWordRow>(obj, "nCodeWordRow", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// PaperMetaData_nCodeWordCol 
/// </summary>
internal partial class APM_PaperMetaData_nCodeWordCol : APM_PaperMetaData_nCodeWordCol_Base
{
}


internal partial class APM_PaperMetaData_nCodeWordCol_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PaperMetaData_nCodeWordCol";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_PaperMetaData_nCodeWordCol>(obj, "nCodeWordCol", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

