// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_WebCaptureImageSet : APM_WebCaptureImageSet__Base
{
}

internal partial class APM_WebCaptureImageSet__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "WebCaptureImageSet";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_WebCaptureImageSet_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCaptureImageSet_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCaptureImageSet_ID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCaptureImageSet_O, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCaptureImageSet_SI, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCaptureImageSet_CT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCaptureImageSet_TS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_WebCaptureImageSet_R, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
            case 1.4m:
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13_14_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_WebCaptureImageSet>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_WebCaptureImageSet_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_13_14_15_16_17_18_19_20 { get; } = new HashSet<string> 
    {
        "CT", "ID", "O", "R", "S", "SI", "TS", "Type"
    };
    


}

/// <summary>
/// WebCaptureImageSet_Type Table 388 and Table 390
/// </summary>
internal partial class APM_WebCaptureImageSet_Type : APM_WebCaptureImageSet_Type__Base
{
}


internal partial class APM_WebCaptureImageSet_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCaptureImageSet_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_WebCaptureImageSet_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.SpiderContentSet)) 
        {
            ctx.Fail<APM_WebCaptureImageSet_Type>($"Invalid value {val}, allowed are: [SpiderContentSet]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// WebCaptureImageSet_S 
/// </summary>
internal partial class APM_WebCaptureImageSet_S : APM_WebCaptureImageSet_S__Base
{
}


internal partial class APM_WebCaptureImageSet_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCaptureImageSet_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_WebCaptureImageSet_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.SIS)) 
        {
            ctx.Fail<APM_WebCaptureImageSet_S>($"Invalid value {val}, allowed are: [SIS]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// WebCaptureImageSet_ID 
/// </summary>
internal partial class APM_WebCaptureImageSet_ID : APM_WebCaptureImageSet_ID__Base
{
}


internal partial class APM_WebCaptureImageSet_ID__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCaptureImageSet_ID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfString, APM_WebCaptureImageSet_ID>(obj, "ID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// WebCaptureImageSet_O 
/// </summary>
internal partial class APM_WebCaptureImageSet_O : APM_WebCaptureImageSet_O__Base
{
}


internal partial class APM_WebCaptureImageSet_O__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCaptureImageSet_O";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_WebCaptureImageSet_O>(obj, "O", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfWebCaptureImages, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// WebCaptureImageSet_SI 
/// </summary>
internal partial class APM_WebCaptureImageSet_SI : APM_WebCaptureImageSet_SI__Base
{
}


internal partial class APM_WebCaptureImageSet_SI__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCaptureImageSet_SI";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_WebCaptureImageSet_SI>(obj, "SI", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_WebCaptureImageSet_SI>("SI is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfSourceInformation, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_SourceInformation, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_WebCaptureImageSet_SI>("SI is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// WebCaptureImageSet_CT shall conform to the content type specification described in Internet RFC 2045
/// </summary>
internal partial class APM_WebCaptureImageSet_CT : APM_WebCaptureImageSet_CT__Base
{
}


internal partial class APM_WebCaptureImageSet_CT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCaptureImageSet_CT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_WebCaptureImageSet_CT>(obj, "CT", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// WebCaptureImageSet_TS 
/// </summary>
internal partial class APM_WebCaptureImageSet_TS : APM_WebCaptureImageSet_TS__Base
{
}


internal partial class APM_WebCaptureImageSet_TS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCaptureImageSet_TS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_WebCaptureImageSet_TS>(obj, "TS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// WebCaptureImageSet_R 
/// </summary>
internal partial class APM_WebCaptureImageSet_R : APM_WebCaptureImageSet_R__Base
{
}


internal partial class APM_WebCaptureImageSet_R__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "WebCaptureImageSet_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_WebCaptureImageSet_R>(obj, "R", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_WebCaptureImageSet_R>("R is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var O = obj.Get("O");
                    var R = obj.Get("R");
                    if (!(eq(((O as PdfArray)?.Count),((R as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_WebCaptureImageSet_R>($"Value failed special case check: fn:Eval(fn:ArrayLength(O)==fn:ArrayLength(R))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfIntegersGeneral, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfIntNumber)utval;
                    // no indirect obj reqs
                    var R = obj.Get("R");
                    if (!(gt(R,0))) 
                    {
                        ctx.Fail<APM_WebCaptureImageSet_R>($"Value failed special case check: fn:Eval(@R>0)");
                    }
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_WebCaptureImageSet_R>("R is required to one of 'array;integer', was " + utval.Type);
                return;
        }
    }


}

