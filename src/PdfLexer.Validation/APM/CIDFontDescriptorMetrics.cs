// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_CIDFontDescriptorMetrics : APM_CIDFontDescriptorMetrics__Base
{
}

internal partial class APM_CIDFontDescriptorMetrics__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "CIDFontDescriptorMetrics";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_CIDFontDescriptorMetrics_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_FontName, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_Flags, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_FontBBox, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_ItalicAngle, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_Ascent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_Descent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_Leading, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_CapHeight, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_XHeight, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_StemV, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_StemH, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_AvgWidth, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_MaxWidth, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_MissingWidth, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_CIDFontDescriptorMetrics_CharSet, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_CIDFontDescriptorMetrics>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_CIDFontDescriptorMetrics>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_CIDFontDescriptorMetrics>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_CIDFontDescriptorMetrics>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_CIDFontDescriptorMetrics>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_CIDFontDescriptorMetrics>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_CIDFontDescriptorMetrics>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_CIDFontDescriptorMetrics>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_CIDFontDescriptorMetrics>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_CIDFontDescriptorMetrics_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "FontName", "Flags", "FontBBox", "ItalicAngle", "Ascent", "Descent", "Leading", "CapHeight", "XHeight", "StemV", "StemH", "AvgWidth", "MaxWidth", "MissingWidth", "CharSet"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "FontName", "Flags", "FontBBox", "ItalicAngle", "Ascent", "Descent", "Leading", "CapHeight", "XHeight", "StemV", "StemH", "AvgWidth", "MaxWidth", "MissingWidth", "CharSet"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "FontName", "Flags", "FontBBox", "ItalicAngle", "Ascent", "Descent", "Leading", "CapHeight", "XHeight", "StemV", "StemH", "AvgWidth", "MaxWidth", "MissingWidth", "CharSet"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "FontName", "Flags", "FontBBox", "ItalicAngle", "Ascent", "Descent", "Leading", "CapHeight", "XHeight", "StemV", "StemH", "AvgWidth", "MaxWidth", "MissingWidth", "CharSet"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "FontName", "Flags", "FontBBox", "ItalicAngle", "Ascent", "Descent", "Leading", "CapHeight", "XHeight", "StemV", "StemH", "AvgWidth", "MaxWidth", "MissingWidth", "CharSet"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "FontName", "Flags", "FontBBox", "ItalicAngle", "Ascent", "Descent", "Leading", "CapHeight", "XHeight", "StemV", "StemH", "AvgWidth", "MaxWidth", "MissingWidth", "CharSet"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "FontName", "Flags", "FontBBox", "ItalicAngle", "Ascent", "Descent", "Leading", "CapHeight", "XHeight", "StemV", "StemH", "AvgWidth", "MaxWidth", "MissingWidth", "CharSet"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "FontName", "Flags", "FontBBox", "ItalicAngle", "Ascent", "Descent", "Leading", "CapHeight", "XHeight", "StemV", "StemH", "AvgWidth", "MaxWidth", "MissingWidth", "CharSet"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "FontName", "Flags", "FontBBox", "ItalicAngle", "Ascent", "Descent", "Leading", "CapHeight", "XHeight", "StemV", "StemH", "AvgWidth", "MaxWidth", "MissingWidth"
    };
    


}

/// <summary>
/// CIDFontDescriptorMetrics_Type Clause 9.8.3.3
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_Type : APM_CIDFontDescriptorMetrics_Type__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_CIDFontDescriptorMetrics_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "FontDescriptor")) 
        {
            ctx.Fail<APM_CIDFontDescriptorMetrics_Type>($"Invalid value {val}, allowed are: [FontDescriptor]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_FontName 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_FontName : APM_CIDFontDescriptorMetrics_FontName__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_FontName__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_FontName";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_CIDFontDescriptorMetrics_FontName>(obj, "FontName", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_Flags Table 121
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_Flags : APM_CIDFontDescriptorMetrics_Flags__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_Flags__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_Flags";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_CIDFontDescriptorMetrics_Flags>(obj, "Flags", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(BitsClear(val,0b00000000000000000000000000010000)&&BitsClear(val,0b00000000000000001111111110000000)&&BitsClear(val,0b11111111111110000000000000000000))) 
        {
            ctx.Fail<APM_CIDFontDescriptorMetrics_Flags>($"Value failed special case check: fn:Eval(fn:BitClear(5) && fn:BitsClear(8,16) && fn:BitsClear(20,32))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_FontBBox 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_FontBBox : APM_CIDFontDescriptorMetrics_FontBBox__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_FontBBox__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_FontBBox";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_CIDFontDescriptorMetrics_FontBBox>(obj, "FontBBox", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_ItalicAngle 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_ItalicAngle : APM_CIDFontDescriptorMetrics_ItalicAngle__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_ItalicAngle__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_ItalicAngle";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_CIDFontDescriptorMetrics_ItalicAngle>(obj, "ItalicAngle", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_Ascent 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_Ascent : APM_CIDFontDescriptorMetrics_Ascent__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_Ascent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_Ascent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_CIDFontDescriptorMetrics_Ascent>(obj, "Ascent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_Descent https://github.com/pdf-association/pdf-issues/issues/190
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_Descent : APM_CIDFontDescriptorMetrics_Descent__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_Descent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_Descent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_CIDFontDescriptorMetrics_Descent>(obj, "Descent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var Descent = obj.Get("Descent");
        if (!(lte(Descent,0))) 
        {
            ctx.Fail<APM_CIDFontDescriptorMetrics_Descent>($"Invalid value {val}, allowed are: [fn:Eval(@Descent<=0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_Leading 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_Leading : APM_CIDFontDescriptorMetrics_Leading__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_Leading__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_Leading";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_CIDFontDescriptorMetrics_Leading>(obj, "Leading", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_CapHeight 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_CapHeight : APM_CIDFontDescriptorMetrics_CapHeight__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_CapHeight__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_CapHeight";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_CIDFontDescriptorMetrics_CapHeight>(obj, "CapHeight", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_XHeight 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_XHeight : APM_CIDFontDescriptorMetrics_XHeight__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_XHeight__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_XHeight";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_CIDFontDescriptorMetrics_XHeight>(obj, "XHeight", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_StemV 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_StemV : APM_CIDFontDescriptorMetrics_StemV__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_StemV__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_StemV";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfNumber, APM_CIDFontDescriptorMetrics_StemV>(obj, "StemV", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_StemH 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_StemH : APM_CIDFontDescriptorMetrics_StemH__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_StemH__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_StemH";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_CIDFontDescriptorMetrics_StemH>(obj, "StemH", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_AvgWidth 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_AvgWidth : APM_CIDFontDescriptorMetrics_AvgWidth__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_AvgWidth__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_AvgWidth";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_CIDFontDescriptorMetrics_AvgWidth>(obj, "AvgWidth", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_MaxWidth 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_MaxWidth : APM_CIDFontDescriptorMetrics_MaxWidth__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_MaxWidth__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_MaxWidth";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_CIDFontDescriptorMetrics_MaxWidth>(obj, "MaxWidth", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_MissingWidth 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_MissingWidth : APM_CIDFontDescriptorMetrics_MissingWidth__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_MissingWidth__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_MissingWidth";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_CIDFontDescriptorMetrics_MissingWidth>(obj, "MissingWidth", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// CIDFontDescriptorMetrics_CharSet 
/// </summary>
internal partial class APM_CIDFontDescriptorMetrics_CharSet : APM_CIDFontDescriptorMetrics_CharSet__Base
{
}


internal partial class APM_CIDFontDescriptorMetrics_CharSet__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "CIDFontDescriptorMetrics_CharSet";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_CIDFontDescriptorMetrics_CharSet>(obj, "CharSet", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

