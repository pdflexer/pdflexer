// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_HalftoneType10 : APM_HalftoneType10__Base
{
}

internal partial class APM_HalftoneType10__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "HalftoneType10";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_HalftoneType10_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_HalftoneType, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_HalftoneName, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_Xsquare, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_Ysquare, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_TransferFunction, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_DecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_FFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_FDecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_HalftoneType10_DL, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType10>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 1.3m:
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13_14.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType10>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15_16_17_18_19_20.Contains(x)))
                {
                    ctx.Fail<APM_HalftoneType10>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_HalftoneType10_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "HalftoneName", "HalftoneType", "TransferFunction", "Type", "Xsquare", "Ysquare"
    };
    public static HashSet<string> AllowedFields_13_14 { get; } = new HashSet<string> 
    {
        "DecodeParms", "F", "FDecodeParms", "FFilter", "Filter", "HalftoneName", "HalftoneType", "Length", "TransferFunction", "Type", "Xsquare", "Ysquare"
    };
    public static HashSet<string> AllowedFields_15_16_17_18_19_20 { get; } = new HashSet<string> 
    {
        "DecodeParms", "DL", "F", "FDecodeParms", "FFilter", "Filter", "HalftoneName", "HalftoneType", "Length", "TransferFunction", "Type", "Xsquare", "Ysquare"
    };
    


}

/// <summary>
/// HalftoneType10_Type Table 5 and Table 130
/// </summary>
internal partial class APM_HalftoneType10_Type : APM_HalftoneType10_Type__Base
{
}


internal partial class APM_HalftoneType10_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_HalftoneType10_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Halftone)) 
        {
            ctx.Fail<APM_HalftoneType10_Type>($"Invalid value {val}, allowed are: [Halftone]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType10_HalftoneType 
/// </summary>
internal partial class APM_HalftoneType10_HalftoneType : APM_HalftoneType10_HalftoneType__Base
{
}


internal partial class APM_HalftoneType10_HalftoneType__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_HalftoneType";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfIntNumber, APM_HalftoneType10_HalftoneType>(obj, "HalftoneType", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 10)) 
        {
            ctx.Fail<APM_HalftoneType10_HalftoneType>($"Invalid value {val}, allowed are: [10]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType10_HalftoneName 
/// </summary>
internal partial class APM_HalftoneType10_HalftoneName : APM_HalftoneType10_HalftoneName__Base
{
}


internal partial class APM_HalftoneType10_HalftoneName__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_HalftoneName";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_HalftoneType10_HalftoneName>(obj, "HalftoneName", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType10_Xsquare 
/// </summary>
internal partial class APM_HalftoneType10_Xsquare : APM_HalftoneType10_Xsquare__Base
{
}


internal partial class APM_HalftoneType10_Xsquare__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_Xsquare";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfIntNumber, APM_HalftoneType10_Xsquare>(obj, "Xsquare", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var Xsquare = obj.Get("Xsquare");
        if (!(gt(Xsquare,0))) 
        {
            ctx.Fail<APM_HalftoneType10_Xsquare>($"Invalid value {val}, allowed are: [fn:Eval(@Xsquare>0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType10_Ysquare 
/// </summary>
internal partial class APM_HalftoneType10_Ysquare : APM_HalftoneType10_Ysquare__Base
{
}


internal partial class APM_HalftoneType10_Ysquare__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_Ysquare";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfIntNumber, APM_HalftoneType10_Ysquare>(obj, "Ysquare", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var Ysquare = obj.Get("Ysquare");
        if (!(gt(Ysquare,0))) 
        {
            ctx.Fail<APM_HalftoneType10_Ysquare>($"Invalid value {val}, allowed are: [fn:Eval(@Ysquare>0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType10_TransferFunction 
/// </summary>
internal partial class APM_HalftoneType10_TransferFunction : APM_HalftoneType10_TransferFunction__Base
{
}


internal partial class APM_HalftoneType10_TransferFunction__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_TransferFunction";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType10_TransferFunction>(obj, "TransferFunction", IndirectRequirement.Either);
        
        var parentHalftoneType = parent?.Get("HalftoneType");
        if ((eq(parentHalftoneType,5)) && utval == null) {
            ctx.Fail<APM_HalftoneType10_TransferFunction>("TransferFunction is required"); return;
        } else if (utval == null) {
            return;
        }
        
        switch (utval.Type) 
        {
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == PdfName.Identity)) 
                    {
                        ctx.Fail<APM_HalftoneType10_TransferFunction>($"Invalid value {val}, allowed are: [Identity]");
                    }
                    // no linked objects
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_HalftoneType10_TransferFunction>("TransferFunction is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    if (APM_FunctionType0.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_FunctionType0, PdfDictionary>(stack, val.Dictionary, obj);
                    } else if ((ctx.Version >= 1.3m && APM_FunctionType4.MatchesType(ctx, val.Dictionary))) 
                    {
                        ctx.Run<APM_FunctionType4, PdfDictionary>(stack, val.Dictionary, obj);
                    }else 
                    {
                        ctx.Fail<APM_HalftoneType10_TransferFunction>("TransferFunction did not match any allowable types: '[FunctionType0,fn:SinceVersion(1.3,FunctionType4)]'");
                    }
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    if (!(ctx.Version >= 1.3m)) 
                    {
                        ctx.Fail<APM_HalftoneType10_TransferFunction>("TransferFunction was type dictionary but not allowed for current conditions: 'fn:SinceVersion(1.3,dictionary)'");
                    }
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if ((ctx.Version >= 1.3m && APM_FunctionType2.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FunctionType2, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_FunctionType3.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FunctionType3, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_HalftoneType10_TransferFunction>("TransferFunction did not match any allowable types: '[fn:SinceVersion(1.3,FunctionType2),fn:SinceVersion(1.3,FunctionType3)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType10_TransferFunction>("TransferFunction is required to one of 'fn:SinceVersion(1.3,dictionary);name;stream', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType10_Length 
/// </summary>
internal partial class APM_HalftoneType10_Length : APM_HalftoneType10_Length__Base
{
}


internal partial class APM_HalftoneType10_Length__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfIntNumber, APM_HalftoneType10_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// HalftoneType10_Filter 
/// </summary>
internal partial class APM_HalftoneType10_Filter : APM_HalftoneType10_Filter__Base
{
}


internal partial class APM_HalftoneType10_Filter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType10_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var DecodeParms = obj.Get("DecodeParms");
                    var Filter = obj.Get("Filter");
                    if (!(eq(((DecodeParms as PdfArray)?.Count),((Filter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_HalftoneType10_Filter>($"Value failed special case check: fn:Eval(fn:ArrayLength(DecodeParms)==fn:ArrayLength(Filter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == PdfName.ASCIIHexDecode || val == PdfName.ASCII85Decode || val == PdfName.LZWDecode || val == PdfName.FlateDecode || val == PdfName.RunLengthDecode || (ctx.Version >= 1.5m && val == PdfName.Crypt))) 
                    {
                        ctx.Fail<APM_HalftoneType10_Filter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType10_Filter>("Filter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType10_DecodeParms 
/// </summary>
internal partial class APM_HalftoneType10_DecodeParms : APM_HalftoneType10_DecodeParms__Base
{
}


internal partial class APM_HalftoneType10_DecodeParms__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_DecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType10_DecodeParms>(obj, "DecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var DecodeParms = obj.Get("DecodeParms");
                    var Filter = obj.Get("Filter");
                    if (!(eq(((DecodeParms as PdfArray)?.Count),((Filter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_HalftoneType10_DecodeParms>($"Value failed special case check: fn:Eval(fn:ArrayLength(DecodeParms)==fn:ArrayLength(Filter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_FilterCrypt.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterCrypt, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_HalftoneType10_DecodeParms>("DecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType10_DecodeParms>("DecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType10_F 
/// </summary>
internal partial class APM_HalftoneType10_F : APM_HalftoneType10_F__Base
{
}


internal partial class APM_HalftoneType10_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType10_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType10_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType10_FFilter 
/// </summary>
internal partial class APM_HalftoneType10_FFilter : APM_HalftoneType10_FFilter__Base
{
}


internal partial class APM_HalftoneType10_FFilter__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_FFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType10_FFilter>(obj, "FFilter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var FDecodeParms = obj.Get("FDecodeParms");
                    var FFilter = obj.Get("FFilter");
                    if (!(eq(((FDecodeParms as PdfArray)?.Count),((FFilter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_HalftoneType10_FFilter>($"Value failed special case check: fn:Eval(fn:ArrayLength(FDecodeParms)==fn:ArrayLength(FFilter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfCompressionFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    
                    
                    if (!(val == PdfName.ASCIIHexDecode || val == PdfName.ASCII85Decode || val == PdfName.LZWDecode || val == PdfName.FlateDecode || val == PdfName.RunLengthDecode || (ctx.Version >= 1.5m && val == PdfName.Crypt))) 
                    {
                        ctx.Fail<APM_HalftoneType10_FFilter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,fn:SinceVersion(1.5,Crypt)]");
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType10_FFilter>("FFilter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType10_FDecodeParms 
/// </summary>
internal partial class APM_HalftoneType10_FDecodeParms : APM_HalftoneType10_FDecodeParms__Base
{
}


internal partial class APM_HalftoneType10_FDecodeParms__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_FDecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_HalftoneType10_FDecodeParms>(obj, "FDecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    var FDecodeParms = obj.Get("FDecodeParms");
                    var FFilter = obj.Get("FFilter");
                    if (!(eq(((FDecodeParms as PdfArray)?.Count),((FFilter as PdfArray)?.Count)))) 
                    {
                        ctx.Fail<APM_HalftoneType10_FDecodeParms>($"Value failed special case check: fn:Eval(fn:ArrayLength(FDecodeParms)==fn:ArrayLength(FFilter))");
                    }
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_FilterCrypt.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_FilterCrypt, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_HalftoneType10_FDecodeParms>("FDecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_HalftoneType10_FDecodeParms>("FDecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// HalftoneType10_DL 
/// </summary>
internal partial class APM_HalftoneType10_DL : APM_HalftoneType10_DL__Base
{
}


internal partial class APM_HalftoneType10_DL__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "HalftoneType10_DL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_HalftoneType10_DL>(obj, "DL", IndirectRequirement.Either);
        if (val == null) { return; }
        var DL = obj.Get("DL");
        var Xsquare = obj.Get("Xsquare");
        var Ysquare = obj.Get("Ysquare");
        if (!(eq(DL,plus(mult(Xsquare,Xsquare),mult(Ysquare,Ysquare))))) 
        {
            ctx.Fail<APM_HalftoneType10_DL>($"Value failed special case check: fn:Eval(@DL==((@Xsquare * @Xsquare)+(@Ysquare * @Ysquare)))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

