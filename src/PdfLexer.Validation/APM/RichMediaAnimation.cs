// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_RichMediaAnimation : APM_RichMediaAnimation_Base
{
}

internal partial class APM_RichMediaAnimation_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "RichMediaAnimation";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_RichMediaAnimation_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaAnimation_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaAnimation_PlayCount, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaAnimation_Speed, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaAnimation_AO, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
        
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_RichMediaAnimation_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    


}

/// <summary>
/// RichMediaAnimation_Type Table 337
/// </summary>
internal partial class APM_RichMediaAnimation_Type : APM_RichMediaAnimation_Type_Base
{
}


internal partial class APM_RichMediaAnimation_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaAnimation_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "RichMediaAnimation")) 
        {
            ctx.Fail<APM_RichMediaAnimation_Type>($"Invalid value {val}, allowed are: [RichMediaAnimation]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaAnimation_Subtype Table 313
/// </summary>
internal partial class APM_RichMediaAnimation_Subtype : APM_RichMediaAnimation_Subtype_Base
{
}


internal partial class APM_RichMediaAnimation_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaAnimation_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "None" || val == "Linear" || val == "Oscillating")) 
        {
            ctx.Fail<APM_RichMediaAnimation_Subtype>($"Invalid value {val}, allowed are: [None,Linear,Oscillating]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaAnimation_PlayCount 
/// </summary>
internal partial class APM_RichMediaAnimation_PlayCount : APM_RichMediaAnimation_PlayCount_Base
{
}


internal partial class APM_RichMediaAnimation_PlayCount_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_PlayCount";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_RichMediaAnimation_PlayCount>(obj, "PlayCount", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaAnimation_Speed 
/// </summary>
internal partial class APM_RichMediaAnimation_Speed : APM_RichMediaAnimation_Speed_Base
{
}


internal partial class APM_RichMediaAnimation_Speed_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_Speed";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_RichMediaAnimation_Speed>(obj, "Speed", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        {
        
        IPdfObject @Speed = val;
        if (!(gt(@Speed,0))) 
        {
            ctx.Fail<APM_RichMediaAnimation_Speed>($"Invalid value {val}, allowed are: [fn:Eval(@Speed>0)]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaAnimation_AO ISO/TS 32007
/// </summary>
internal partial class APM_RichMediaAnimation_AO : APM_RichMediaAnimation_AO_Base
{
}


internal partial class APM_RichMediaAnimation_AO_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_AO";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_RichMediaAnimation_AO>(obj, "AO", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

