// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_RichMediaAnimation : APM_RichMediaAnimation__Base
{
}

internal partial class APM_RichMediaAnimation__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "RichMediaAnimation";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_RichMediaAnimation_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaAnimation_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaAnimation_PlayCount, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaAnimation_Speed, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_RichMediaAnimation_AO, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_RichMediaAnimation>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_RichMediaAnimation>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_RichMediaAnimation>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_RichMediaAnimation>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_RichMediaAnimation_Type, PdfDictionary>(new CallStack(), obj, null);
        c.Run<APM_RichMediaAnimation_Subtype, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "Subtype", "PlayCount", "Speed"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "Subtype", "PlayCount", "Speed"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "Subtype", "PlayCount", "Speed"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "Subtype", "PlayCount", "Speed", "AO"
    };
    


}

/// <summary>
/// RichMediaAnimation_Type Table 337
/// </summary>
internal partial class APM_RichMediaAnimation_Type : APM_RichMediaAnimation_Type__Base
{
}


internal partial class APM_RichMediaAnimation_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaAnimation_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.RichMediaAnimation)) 
        {
            ctx.Fail<APM_RichMediaAnimation_Type>($"Invalid value {val}, allowed are: [RichMediaAnimation]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaAnimation_Subtype Table 313
/// </summary>
internal partial class APM_RichMediaAnimation_Subtype : APM_RichMediaAnimation_Subtype__Base
{
}


internal partial class APM_RichMediaAnimation_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_RichMediaAnimation_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.None || val == PdfName.Linear || val == PdfName.Oscillating)) 
        {
            ctx.Fail<APM_RichMediaAnimation_Subtype>($"Invalid value {val}, allowed are: [None,Linear,Oscillating]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaAnimation_PlayCount 
/// </summary>
internal partial class APM_RichMediaAnimation_PlayCount : APM_RichMediaAnimation_PlayCount__Base
{
}


internal partial class APM_RichMediaAnimation_PlayCount__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_PlayCount";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_RichMediaAnimation_PlayCount>(obj, "PlayCount", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaAnimation_Speed 
/// </summary>
internal partial class APM_RichMediaAnimation_Speed : APM_RichMediaAnimation_Speed__Base
{
}


internal partial class APM_RichMediaAnimation_Speed__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_Speed";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_RichMediaAnimation_Speed>(obj, "Speed", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        
        var Speed = obj.Get("Speed");
        if (!(gt(Speed,0))) 
        {
            ctx.Fail<APM_RichMediaAnimation_Speed>($"Invalid value {val}, allowed are: [fn:Eval(@Speed>0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// RichMediaAnimation_AO ISO/TS 32007
/// </summary>
internal partial class APM_RichMediaAnimation_AO : APM_RichMediaAnimation_AO__Base
{
}


internal partial class APM_RichMediaAnimation_AO__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "RichMediaAnimation_AO";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_RichMediaAnimation_AO>(obj, "AO", IndirectRequirement.Either);
        if (val == null) { return; }
        var AO = obj.Get("AO");
        if (!(gte(AO,0))) 
        {
            ctx.Fail<APM_RichMediaAnimation_AO>($"Value failed special case check: fn:Eval(@AO>=0)");
        }
        // no value restrictions
        // no linked objects
        
    }


}

