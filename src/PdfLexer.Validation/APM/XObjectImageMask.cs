// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_XObjectImageMask : APM_XObjectImageMask_Base
{
}

internal partial class APM_XObjectImageMask_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "XObjectImageMask";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_XObjectImageMask_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Width, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Height, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_BitsPerComponent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Intent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_ImageMask, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Decode, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Interpolate, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Alternates, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_SMask, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_SMaskInData, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Name, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_ID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_OPI, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Metadata, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Measure, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_PtData, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Length, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_Filter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_DecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_FFilter, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_FDecodeParms, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_XObjectImageMask_DL, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageMask>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageMask>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageMask>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageMask>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageMask>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageMask>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageMask>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_XObjectImageMask>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_XObjectImageMask_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Alternates", "Name", "StructParent", "ID", "OPI", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Alternates", "SMask", "Name", "StructParent", "ID", "OPI", "Metadata", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "Name", "StructParent", "ID", "OPI", "Metadata", "OC", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Width", "Height", "BitsPerComponent", "Intent", "ImageMask", "Decode", "Interpolate", "Alternates", "SMask", "SMaskInData", "StructParent", "ID", "Metadata", "OC", "AF", "Length", "Filter", "DecodeParms", "F", "FFilter", "FDecodeParms", "DL"
    };
    


}

/// <summary>
/// XObjectImageMask_Type Table 5 and Table 87
/// </summary>
internal partial class APM_XObjectImageMask_Type : APM_XObjectImageMask_Type_Base
{
}


internal partial class APM_XObjectImageMask_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectImageMask_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "XObject")) 
        {
            ctx.Fail<APM_XObjectImageMask_Type>($"Invalid value {val}, allowed are: [XObject]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_Subtype 
/// </summary>
internal partial class APM_XObjectImageMask_Subtype : APM_XObjectImageMask_Subtype_Base
{
}


internal partial class APM_XObjectImageMask_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_XObjectImageMask_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Image")) 
        {
            ctx.Fail<APM_XObjectImageMask_Subtype>($"Invalid value {val}, allowed are: [Image]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_Width 
/// </summary>
internal partial class APM_XObjectImageMask_Width : APM_XObjectImageMask_Width_Base
{
}


internal partial class APM_XObjectImageMask_Width_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Width";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectImageMask_Width>(obj, "Width", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_Height 
/// </summary>
internal partial class APM_XObjectImageMask_Height : APM_XObjectImageMask_Height_Base
{
}


internal partial class APM_XObjectImageMask_Height_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Height";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectImageMask_Height>(obj, "Height", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_BitsPerComponent 
/// </summary>
internal partial class APM_XObjectImageMask_BitsPerComponent : APM_XObjectImageMask_BitsPerComponent_Base
{
}


internal partial class APM_XObjectImageMask_BitsPerComponent_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_BitsPerComponent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectImageMask_BitsPerComponent>(obj, "BitsPerComponent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == 1)) 
        {
            ctx.Fail<APM_XObjectImageMask_BitsPerComponent>($"Invalid value {val}, allowed are: [1]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_Intent 
/// </summary>
internal partial class APM_XObjectImageMask_Intent : APM_XObjectImageMask_Intent_Base
{
}


internal partial class APM_XObjectImageMask_Intent_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Intent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectImageMask_Intent>(obj, "Intent", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_ImageMask 
/// </summary>
internal partial class APM_XObjectImageMask_ImageMask : APM_XObjectImageMask_ImageMask_Base
{
}


internal partial class APM_XObjectImageMask_ImageMask_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_ImageMask";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfBoolean, APM_XObjectImageMask_ImageMask>(obj, "ImageMask", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_Decode 
/// </summary>
internal partial class APM_XObjectImageMask_Decode : APM_XObjectImageMask_Decode_Base
{
}


internal partial class APM_XObjectImageMask_Decode_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Decode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectImageMask_Decode>(obj, "Decode", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // TODO value checks array
        ctx.Run<APM_ArrayOfNumbersGeneral, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectImageMask_Interpolate 
/// </summary>
internal partial class APM_XObjectImageMask_Interpolate : APM_XObjectImageMask_Interpolate_Base
{
}


internal partial class APM_XObjectImageMask_Interpolate_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Interpolate";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_XObjectImageMask_Interpolate>(obj, "Interpolate", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_Alternates 
/// </summary>
internal partial class APM_XObjectImageMask_Alternates : APM_XObjectImageMask_Alternates_Base
{
}


internal partial class APM_XObjectImageMask_Alternates_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Alternates";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_XObjectImageMask_Alternates>(obj, "Alternates", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfImageAlternates, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectImageMask_SMask 
/// </summary>
internal partial class APM_XObjectImageMask_SMask : APM_XObjectImageMask_SMask_Base
{
}


internal partial class APM_XObjectImageMask_SMask_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_SMask";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_XObjectImageMask_SMask>(obj, "SMask", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_XObjectImageSoftMask, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// XObjectImageMask_SMaskInData 
/// </summary>
internal partial class APM_XObjectImageMask_SMaskInData : APM_XObjectImageMask_SMaskInData_Base
{
}


internal partial class APM_XObjectImageMask_SMaskInData_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_SMaskInData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectImageMask_SMaskInData>(obj, "SMaskInData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_Name 
/// </summary>
internal partial class APM_XObjectImageMask_Name : APM_XObjectImageMask_Name_Base
{
}


internal partial class APM_XObjectImageMask_Name_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Name";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_XObjectImageMask_Name>(obj, "Name", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_StructParent Table 359
/// </summary>
internal partial class APM_XObjectImageMask_StructParent : APM_XObjectImageMask_StructParent_Base
{
}


internal partial class APM_XObjectImageMask_StructParent_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfIntNumber? val;
        {
            
            if (ImageIsStructContentItem(obj)) {
                val = ctx.GetRequired<PdfIntNumber, APM_XObjectImageMask_StructParent>(obj, "StructParent", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfIntNumber, APM_XObjectImageMask_StructParent>(obj, "StructParent", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_ID 
/// </summary>
internal partial class APM_XObjectImageMask_ID : APM_XObjectImageMask_ID_Base
{
}


internal partial class APM_XObjectImageMask_ID_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_ID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_XObjectImageMask_ID>(obj, "ID", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_OPI 
/// </summary>
internal partial class APM_XObjectImageMask_OPI : APM_XObjectImageMask_OPI_Base
{
}


internal partial class APM_XObjectImageMask_OPI_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_OPI";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectImageMask_OPI>(obj, "OPI", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        if (APM_OPIVersion13.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion13, PdfDictionary>(stack, val, obj);
        } else if (APM_OPIVersion20.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OPIVersion20, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectImageMask_OPI>("OPI did not match any allowable types: '[OPIVersion13,OPIVersion20]'");
        }
        
    }


}

/// <summary>
/// XObjectImageMask_Metadata 
/// </summary>
internal partial class APM_XObjectImageMask_Metadata : APM_XObjectImageMask_Metadata_Base
{
}


internal partial class APM_XObjectImageMask_Metadata_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Metadata";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfStream, APM_XObjectImageMask_Metadata>(obj, "Metadata", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Metadata, PdfDictionary>(stack, val.Dictionary, obj);
        
    }


}

/// <summary>
/// XObjectImageMask_OC 
/// </summary>
internal partial class APM_XObjectImageMask_OC : APM_XObjectImageMask_OC_Base
{
}


internal partial class APM_XObjectImageMask_OC_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectImageMask_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectImageMask_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// XObjectImageMask_AF 
/// </summary>
internal partial class APM_XObjectImageMask_AF : APM_XObjectImageMask_AF_Base
{
}


internal partial class APM_XObjectImageMask_AF_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageMask_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageMask_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageMask_Measure 
/// </summary>
internal partial class APM_XObjectImageMask_Measure : APM_XObjectImageMask_Measure_Base
{
}


internal partial class APM_XObjectImageMask_Measure_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Measure";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectImageMask_Measure>(obj, "Measure", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_MeasureRL.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_MeasureRL, PdfDictionary>(stack, val, obj);
        } else if (APM_MeasureGEO.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_MeasureGEO, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_XObjectImageMask_Measure>("Measure did not match any allowable types: '[MeasureRL,MeasureGEO]'");
        }
        
    }


}

/// <summary>
/// XObjectImageMask_PtData 
/// </summary>
internal partial class APM_XObjectImageMask_PtData : APM_XObjectImageMask_PtData_Base
{
}


internal partial class APM_XObjectImageMask_PtData_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_PtData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_XObjectImageMask_PtData>(obj, "PtData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PointData, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// XObjectImageMask_Length 
/// </summary>
internal partial class APM_XObjectImageMask_Length : APM_XObjectImageMask_Length_Base
{
}


internal partial class APM_XObjectImageMask_Length_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Length";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_XObjectImageMask_Length>(obj, "Length", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// XObjectImageMask_Filter 
/// </summary>
internal partial class APM_XObjectImageMask_Filter : APM_XObjectImageMask_Filter_Base
{
}


internal partial class APM_XObjectImageMask_Filter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_Filter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageMask_Filter>(obj, "Filter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || val == "CCITTFaxDecode" || ctx.Version >= 1.4m && val == "JBIG2Decode" || val == "DCTDecode" || ctx.Version >= 1.5m && val == "JPXDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_XObjectImageMask_Filter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,CCITTFaxDecode,fn:SinceVersion(1.4,JBIG2Decode),DCTDecode,fn:SinceVersion(1.5,JPXDecode),fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageMask_Filter>("Filter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageMask_DecodeParms 
/// </summary>
internal partial class APM_XObjectImageMask_DecodeParms : APM_XObjectImageMask_DecodeParms_Base
{
}


internal partial class APM_XObjectImageMask_DecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_DecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageMask_DecodeParms>(obj, "DecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterCCITTFaxDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterCCITTFaxDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterDCTDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterDCTDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectImageMask_DecodeParms>("DecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,FilterCCITTFaxDecode,fn:SinceVersion(1.4,FilterJBIG2Decode),FilterDCTDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageMask_DecodeParms>("DecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageMask_F 
/// </summary>
internal partial class APM_XObjectImageMask_F : APM_XObjectImageMask_F_Base
{
}


internal partial class APM_XObjectImageMask_F_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageMask_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageMask_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageMask_FFilter 
/// </summary>
internal partial class APM_XObjectImageMask_FFilter : APM_XObjectImageMask_FFilter_Base
{
}


internal partial class APM_XObjectImageMask_FFilter_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_FFilter";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageMask_FFilter>(obj, "FFilter", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFilterNames, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    {
                    
                    
                    if (!(val == "ASCIIHexDecode" || val == "ASCII85Decode" || val == "LZWDecode" || val == "FlateDecode" || val == "RunLengthDecode" || val == "CCITTFaxDecode" || ctx.Version >= 1.4m && val == "JBIG2Decode" || val == "DCTDecode" || ctx.Version >= 1.5m && val == "JPXDecode" || ctx.Version >= 1.5m && val == "Crypt")) 
                    {
                        ctx.Fail<APM_XObjectImageMask_FFilter>($"Invalid value {val}, allowed are: [ASCIIHexDecode,ASCII85Decode,LZWDecode,FlateDecode,RunLengthDecode,CCITTFaxDecode,fn:SinceVersion(1.4,JBIG2Decode),DCTDecode,fn:SinceVersion(1.5,JPXDecode),fn:SinceVersion(1.5,Crypt)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageMask_FFilter>("FFilter is required to one of 'array;name', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageMask_FDecodeParms 
/// </summary>
internal partial class APM_XObjectImageMask_FDecodeParms : APM_XObjectImageMask_FDecodeParms_Base
{
}


internal partial class APM_XObjectImageMask_FDecodeParms_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_FDecodeParms";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_XObjectImageMask_FDecodeParms>(obj, "FDecodeParms", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    ctx.Run<APM_ArrayOfDecodeParams, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_FilterLZWDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterLZWDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterFlateDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterFlateDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterCCITTFaxDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterCCITTFaxDecode, PdfDictionary>(stack, val, obj);
                    } else if (APM_FilterDCTDecode.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_FilterDCTDecode, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_XObjectImageMask_FDecodeParms>("FDecodeParms did not match any allowable types: '[FilterLZWDecode,FilterFlateDecode,FilterCCITTFaxDecode,fn:SinceVersion(1.4,FilterJBIG2Decode),FilterDCTDecode,fn:SinceVersion(1.5,FilterCrypt)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_XObjectImageMask_FDecodeParms>("FDecodeParms is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// XObjectImageMask_DL 
/// </summary>
internal partial class APM_XObjectImageMask_DL : APM_XObjectImageMask_DL_Base
{
}


internal partial class APM_XObjectImageMask_DL_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "XObjectImageMask_DL";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_XObjectImageMask_DL>(obj, "DL", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

