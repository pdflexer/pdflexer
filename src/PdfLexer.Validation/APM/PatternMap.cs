// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_PatternMap : APM_PatternMap_Base
{
}

internal partial class APM_PatternMap_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "PatternMap";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_PatternMap_CatchAll, PdfDictionary>(stack, obj, parent);
        
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    


}

/// <summary>
/// PatternMap_* Table 34
/// </summary>
internal partial class APM_PatternMap_CatchAll : APM_PatternMap_CatchAll_Base
{
}


internal partial class APM_PatternMap_CatchAll_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "PatternMap_*";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        foreach (var key in obj.Keys)
        {
            if (AllVals.Contains(key)) { continue; }
            
            
            var (utval, wasIR) = ctx.GetOptional<APM_PatternMap_CatchAll>(obj, key, IndirectRequirement.Either);
            if (utval == null) { return; }
            switch (utval.Type) 
            {
                // funcs: fn:SinceVersion(1.3,dictionary)
                case PdfObjectType.StreamObj:
                    {
                        var val =  (PdfStream)utval;
                        if (!wasIR) { ctx.Fail<APM_PatternMap_CatchAll>("* is required to be indirect when a stream"); return; }
                        // no special cases
                        // no value restrictions
                        ctx.Run<APM_PatternType1, PdfDictionary>(stack, val.Dictionary, obj);
                        return;
                    }
                
                default:
                    ctx.Fail<APM_PatternMap_CatchAll>("* is required to one of 'fn:SinceVersion(1.3,dictionary);stream', was " + utval.Type);
                    return;
            }
        }
        
    }

    public static HashSet<string> AllVals = new HashSet<string> {  };
}

