// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Projection : APM_Projection_Base
{
}

internal partial class APM_Projection_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Projection";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Projection_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Projection_CS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Projection_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Projection_N, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Projection_FOV, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Projection_PS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Projection_OS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Projection_OB, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_Projection>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_Projection>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_Projection>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_Projection>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_Projection>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Subtype", "CS", "F", "N", "FOV", "PS", "OS"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Subtype", "CS", "F", "N", "FOV", "PS", "OS", "OB"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Subtype", "CS", "F", "N", "FOV", "PS", "OS", "OB"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Subtype", "CS", "F", "N", "FOV", "PS", "OS", "OB"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Subtype", "CS", "F", "N", "FOV", "PS", "OS", "OB"
    };
    


}

/// <summary>
/// Projection_Subtype Table 316
/// </summary>
internal partial class APM_Projection_Subtype : APM_Projection_Subtype_Base
{
}


internal partial class APM_Projection_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Projection_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_Projection_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "O" || val == "P")) 
        {
            ctx.Fail<APM_Projection_Subtype>($"Invalid value {val}, allowed are: [O,P]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// Projection_CS 
/// </summary>
internal partial class APM_Projection_CS : APM_Projection_CS_Base
{
}


internal partial class APM_Projection_CS_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Projection_CS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_Projection_CS>(obj, "CS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "XNF" || val == "ANF")) 
        {
            ctx.Fail<APM_Projection_CS>($"Invalid value {val}, allowed are: [XNF,ANF]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// Projection_F 
/// </summary>
internal partial class APM_Projection_F : APM_Projection_F_Base
{
}


internal partial class APM_Projection_F_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Projection_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_Projection_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// Projection_N 
/// </summary>
internal partial class APM_Projection_N : APM_Projection_N_Base
{
}


internal partial class APM_Projection_N_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Projection_N";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfNumber? val;
        {
            var Subtype = obj.Get("Subtype");
            if (eq(Subtype,"P")) {
                val = ctx.GetRequired<PdfNumber, APM_Projection_N>(obj, "N", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfNumber, APM_Projection_N>(obj, "N", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // TODO special case
        {
        
        var Subtype2 = obj.Get("Subtype");
        IPdfObject @N = val;
        if (!(((eq(Subtype2,"P")&&gt(@N,0))||(eq(Subtype2,"O")&&gte(@N,0))))) 
        {
            ctx.Fail<APM_Projection_N>($"Invalid value {val}, allowed are: [fn:Eval(((@Subtype==P) && (@N>0)) || ((@Subtype==O) && (@N>=0)))]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// Projection_FOV 
/// </summary>
internal partial class APM_Projection_FOV : APM_Projection_FOV_Base
{
}


internal partial class APM_Projection_FOV_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Projection_FOV";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_Projection_FOV>(obj, "FOV", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        {
        
        IPdfObject @FOV = val;
        if (!((gte(@FOV,0)&&lte(@FOV,180)))) 
        {
            ctx.Fail<APM_Projection_FOV>($"Invalid value {val}, allowed are: [fn:Eval((@FOV>=0) && (@FOV<=180))]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// Projection_PS 
/// </summary>
internal partial class APM_Projection_PS : APM_Projection_PS_Base
{
}


internal partial class APM_Projection_PS_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Projection_PS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Projection_PS>(obj, "PS", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // TODO special case
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.NumericObj:
                {
                    var val =  (PdfNumber)utval;
                    // no indirect obj reqs
                    // TODO special case
                    {
                    
                    IPdfObject @PS = val;
                    if (!(gt(@PS,0))) 
                    {
                        ctx.Fail<APM_Projection_PS>($"Invalid value {val}, allowed are: [fn:Eval(@PS>0)]");
                    }
                    }
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_Projection_PS>("PS is required to one of 'name;number', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Projection_OS 
/// </summary>
internal partial class APM_Projection_OS : APM_Projection_OS_Base
{
}


internal partial class APM_Projection_OS_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Projection_OS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_Projection_OS>(obj, "OS", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        {
        
        IPdfObject @OS = val;
        if (!(gt(@OS,0))) 
        {
            ctx.Fail<APM_Projection_OS>($"Invalid value {val}, allowed are: [fn:Eval(@OS>0)]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// Projection_OB 
/// </summary>
internal partial class APM_Projection_OB : APM_Projection_OB_Base
{
}


internal partial class APM_Projection_OB_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Projection_OB";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_Projection_OB>(obj, "OB", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        {
        
        
        if (!(val == "W" || val == "H" || val == "Min" || val == "Max" || val == "Absolute")) 
        {
            ctx.Fail<APM_Projection_OB>($"Invalid value {val}, allowed are: [W,H,Min,Max,Absolute]");
        }
        }
        // no linked objects
        
    }


}

