// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_3DNode : APM_3DNode__Base
{
}

internal partial class APM_3DNode__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "3DNode";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_3DNode_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DNode_N, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DNode_O, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DNode_V, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DNode_M, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DNode_Instance, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DNode_Data, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_3DNode_RM, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_3DNode>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_3DNode>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_3DNode>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_3DNode>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_3DNode_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "N", "O", "V", "M"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "N", "O", "V", "M"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "N", "O", "V", "M"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "N", "O", "V", "M", "Instance", "Data", "RM"
    };
    


}

/// <summary>
/// 3DNode_Type Table 323
/// </summary>
internal partial class APM_3DNode_Type : APM_3DNode_Type__Base
{
}


internal partial class APM_3DNode_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DNode_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_3DNode_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.N3DNode)) 
        {
            ctx.Fail<APM_3DNode_Type>($"Invalid value {val}, allowed are: [3DNode]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DNode_N 
/// </summary>
internal partial class APM_3DNode_N : APM_3DNode_N__Base
{
}


internal partial class APM_3DNode_N__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DNode_N";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfString, APM_3DNode_N>(obj, "N", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DNode_O 
/// </summary>
internal partial class APM_3DNode_O : APM_3DNode_O__Base
{
}


internal partial class APM_3DNode_O__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DNode_O";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfNumber, APM_3DNode_O>(obj, "O", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var O = obj.Get("O");
        if (!((gte(O,0)&&lte(O,1)))) 
        {
            ctx.Fail<APM_3DNode_O>($"Invalid value {val}, allowed are: [fn:Eval((@O>=0) && (@O<=1))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// 3DNode_V 
/// </summary>
internal partial class APM_3DNode_V : APM_3DNode_V__Base
{
}


internal partial class APM_3DNode_V__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DNode_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfBoolean, APM_3DNode_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// 3DNode_M 
/// </summary>
internal partial class APM_3DNode_M : APM_3DNode_M__Base
{
}


internal partial class APM_3DNode_M__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DNode_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_3DNode_M>(obj, "M", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf3DTransMatrix, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DNode_Instance 
/// </summary>
internal partial class APM_3DNode_Instance : APM_3DNode_Instance__Base
{
}


internal partial class APM_3DNode_Instance__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DNode_Instance";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_3DNode_Instance>(obj, "Instance", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_RichMediaInstance, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// 3DNode_Data 
/// </summary>
internal partial class APM_3DNode_Data : APM_3DNode_Data__Base
{
}


internal partial class APM_3DNode_Data__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DNode_Data";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_3DNode_Data>(obj, "Data", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_3DNode_Data>("Data is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_3DNode_Data>("Data is required to one of 'stream;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// 3DNode_RM 
/// </summary>
internal partial class APM_3DNode_RM : APM_3DNode_RM__Base
{
}


internal partial class APM_3DNode_RM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "3DNode_RM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_3DNode_RM>(obj, "RM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_3DRenderMode, PdfDictionary>(stack, val, obj);
        
    }


}

