// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_GeographicCoordinateSystem : APM_GeographicCoordinateSystem__Base
{
}

internal partial class APM_GeographicCoordinateSystem__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "GeographicCoordinateSystem";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_GeographicCoordinateSystem_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_GeographicCoordinateSystem_EPSG, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_GeographicCoordinateSystem_WKT, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_GeographicCoordinateSystem>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_GeographicCoordinateSystem>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_GeographicCoordinateSystem>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_GeographicCoordinateSystem>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_GeographicCoordinateSystem_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "EPSG", "WKT"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "EPSG", "WKT"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "EPSG", "WKT"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "EPSG", "WKT"
    };
    


}

/// <summary>
/// GeographicCoordinateSystem_Type Table 270
/// </summary>
internal partial class APM_GeographicCoordinateSystem_Type : APM_GeographicCoordinateSystem_Type__Base
{
}


internal partial class APM_GeographicCoordinateSystem_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "GeographicCoordinateSystem_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_GeographicCoordinateSystem_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.GEOGCS)) 
        {
            ctx.Fail<APM_GeographicCoordinateSystem_Type>($"Invalid value {val}, allowed are: [GEOGCS]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// GeographicCoordinateSystem_EPSG 
/// </summary>
internal partial class APM_GeographicCoordinateSystem_EPSG : APM_GeographicCoordinateSystem_EPSG__Base
{
}


internal partial class APM_GeographicCoordinateSystem_EPSG__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "GeographicCoordinateSystem_EPSG";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_GeographicCoordinateSystem_EPSG>(obj, "EPSG", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(!obj.ContainsKey(PdfName.WKT))) 
        {
            ctx.Fail<APM_GeographicCoordinateSystem_EPSG>($"Value failed special case check: fn:Eval(fn:Not(fn:IsPresent(WKT)))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// GeographicCoordinateSystem_WKT 
/// </summary>
internal partial class APM_GeographicCoordinateSystem_WKT : APM_GeographicCoordinateSystem_WKT__Base
{
}


internal partial class APM_GeographicCoordinateSystem_WKT__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "GeographicCoordinateSystem_WKT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfString, APM_GeographicCoordinateSystem_WKT>(obj, "WKT", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!(!obj.ContainsKey(PdfName.EPSG))) 
        {
            ctx.Fail<APM_GeographicCoordinateSystem_WKT>($"Value failed special case check: fn:Eval(fn:Not(fn:IsPresent(EPSG)))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

