// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Appearance : APM_Appearance_Base
{
}

internal partial class APM_Appearance_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Appearance";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Appearance_N, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Appearance_R, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Appearance_D, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_Appearance>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_Appearance>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_Appearance>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_Appearance>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_Appearance>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_Appearance>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_Appearance>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_Appearance>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_Appearance>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_12 { get; } = new List<string> 
    {
        "N", "R", "D"
    };
    public static List<string> AllowedFields_13 { get; } = new List<string> 
    {
        "N", "R", "D"
    };
    public static List<string> AllowedFields_14 { get; } = new List<string> 
    {
        "N", "R", "D"
    };
    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "N", "R", "D"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "N", "R", "D"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "N", "R", "D"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "N", "R", "D"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "N", "R", "D"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "N", "R", "D"
    };
    


}

/// <summary>
/// Appearance_N Table 170
/// </summary>
internal partial class APM_Appearance_N : APM_Appearance_N_Base
{
}


internal partial class APM_Appearance_N_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Appearance_N";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Appearance_N>(obj, "N", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_Appearance_N>("N is required"); return; }
        switch (utval.Type) 
        {
            // funcs: fn:SinceVersion(1.3,dictionary)
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_Appearance_N>("N is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    if (APM_XObjectFormType1.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_XObjectFormType1, PdfDictionary>(stack, val.Dictionary, obj);
                    } else if (APM_XObjectFormPS.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_XObjectFormPS, PdfDictionary>(stack, val.Dictionary, obj);
                    } else if (APM_XObjectFormPSpassthrough.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_XObjectFormPSpassthrough, PdfDictionary>(stack, val.Dictionary, obj);
                    }else 
                    {
                        ctx.Fail<APM_Appearance_N>("N did not match any allowable types: '[XObjectFormType1,XObjectFormPS,XObjectFormPSpassthrough]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_Appearance_N>("N is required to one of 'fn:SinceVersion(1.3,dictionary);stream', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Appearance_R 
/// </summary>
internal partial class APM_Appearance_R : APM_Appearance_R_Base
{
}


internal partial class APM_Appearance_R_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Appearance_R";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Appearance_R>(obj, "R", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            // funcs: fn:SinceVersion(1.3,dictionary)
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_Appearance_R>("R is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    if (APM_XObjectFormType1.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_XObjectFormType1, PdfDictionary>(stack, val.Dictionary, obj);
                    } else if (APM_XObjectFormPS.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_XObjectFormPS, PdfDictionary>(stack, val.Dictionary, obj);
                    } else if (APM_XObjectFormPSpassthrough.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_XObjectFormPSpassthrough, PdfDictionary>(stack, val.Dictionary, obj);
                    }else 
                    {
                        ctx.Fail<APM_Appearance_R>("R did not match any allowable types: '[XObjectFormType1,XObjectFormPS,XObjectFormPSpassthrough]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_Appearance_R>("R is required to one of 'fn:SinceVersion(1.3,dictionary);stream', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Appearance_D 
/// </summary>
internal partial class APM_Appearance_D : APM_Appearance_D_Base
{
}


internal partial class APM_Appearance_D_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Appearance_D";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Appearance_D>(obj, "D", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            // funcs: fn:SinceVersion(1.3,dictionary)
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_Appearance_D>("D is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    if (APM_XObjectFormType1.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_XObjectFormType1, PdfDictionary>(stack, val.Dictionary, obj);
                    } else if (APM_XObjectFormPS.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_XObjectFormPS, PdfDictionary>(stack, val.Dictionary, obj);
                    } else if (APM_XObjectFormPSpassthrough.MatchesType(ctx, val.Dictionary)) 
                    {
                        ctx.Run<APM_XObjectFormPSpassthrough, PdfDictionary>(stack, val.Dictionary, obj);
                    }else 
                    {
                        ctx.Fail<APM_Appearance_D>("D did not match any allowable types: '[XObjectFormType1,XObjectFormPS,XObjectFormPSpassthrough]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_Appearance_D>("D is required to one of 'fn:SinceVersion(1.3,dictionary);stream', was " + utval.Type);
                return;
        }
    }


}

