// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AnnotLink : APM_AnnotLink__Base
{
}

internal partial class APM_AnnotLink__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AnnotLink";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AnnotLink_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_Rect, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_Contents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_NM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_M, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_AP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_AS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_Border, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_ca, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_CA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_BM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_Lang, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_A, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_Dest, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_H, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_PA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_QuadPoints, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_BS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotLink_Path, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.0");
                }
                break;
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_AnnotLink>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_AnnotLink_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_10 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "Border", "Dest"
    };
    public static HashSet<string> AllowedFields_11 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "M", "F", "Border", "C", "A", "Dest"
    };
    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "M", "F", "AP", "AS", "Border", "C", "A", "Dest", "H"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "M", "F", "AP", "AS", "Border", "C", "StructParent", "A", "Dest", "H", "PA"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "A", "Dest", "H", "PA"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "A", "Dest", "H", "PA"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "A", "Dest", "H", "PA", "QuadPoints", "BS"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "A", "Dest", "H", "PA", "QuadPoints", "BS"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "A", "Dest", "H", "PA", "QuadPoints", "BS"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "A", "Dest", "H", "PA", "QuadPoints", "BS"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "AF", "ca", "CA", "BM", "Lang", "A", "Dest", "H", "PA", "QuadPoints", "BS"
    };
    


}

/// <summary>
/// AnnotLink_Type Table 166 and Table 176 (NOT markup annot)
/// </summary>
internal partial class APM_AnnotLink_Type : APM_AnnotLink_Type__Base
{
}


internal partial class APM_AnnotLink_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotLink_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Annot")) 
        {
            ctx.Fail<APM_AnnotLink_Type>($"Invalid value {val}, allowed are: [Annot]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_Subtype 
/// </summary>
internal partial class APM_AnnotLink_Subtype : APM_AnnotLink_Subtype__Base
{
}


internal partial class APM_AnnotLink_Subtype__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_AnnotLink_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "Link")) 
        {
            ctx.Fail<APM_AnnotLink_Subtype>($"Invalid value {val}, allowed are: [Link]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_Rect 
/// </summary>
internal partial class APM_AnnotLink_Rect : APM_AnnotLink_Rect__Base
{
}


internal partial class APM_AnnotLink_Rect__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_Rect";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_AnnotLink_Rect>(obj, "Rect", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_Contents 
/// </summary>
internal partial class APM_AnnotLink_Contents : APM_AnnotLink_Contents__Base
{
}


internal partial class APM_AnnotLink_Contents__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_Contents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotLink_Contents>(obj, "Contents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_P 
/// </summary>
internal partial class APM_AnnotLink_P : APM_AnnotLink_P__Base
{
}


internal partial class APM_AnnotLink_P__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLink_P>(obj, "P", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PageObject, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLink_NM 
/// </summary>
internal partial class APM_AnnotLink_NM : APM_AnnotLink_NM__Base
{
}


internal partial class APM_AnnotLink_NM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_NM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotLink_NM>(obj, "NM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_M 
/// </summary>
internal partial class APM_AnnotLink_M : APM_AnnotLink_M__Base
{
}


internal partial class APM_AnnotLink_M__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotLink_M>(obj, "M", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            
            // TODO MC date;string-text
            
            default:
                ctx.Fail<APM_AnnotLink_M>("M is required to one of 'date;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotLink_F Table 167
/// </summary>
internal partial class APM_AnnotLink_F : APM_AnnotLink_F__Base
{
}


internal partial class APM_AnnotLink_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotLink_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        
        if (!((ctx.Version >= 1.3m || BitsClear(val,0b11111111111111111111111111111000))&&(ctx.Version >= 1.4m || BitsClear(val,0b11111111111111111111111110000000))&&(ctx.Version >= 1.5m || BitsClear(val,0b11111111111111111111111100000000))&&(ctx.Version >= 1.6m || BitsClear(val,0b11111111111111111111111000000000))&&(ctx.Version < 2.0m || BitsClear(val,0b11111111111111111111110000000000)))) 
        {
            ctx.Fail<APM_AnnotLink_F>($"Value failed special case check: fn:Eval(fn:BeforeVersion(1.3,fn:BitsClear(4,32)) && fn:BeforeVersion(1.4,fn:BitsClear(8,32)) && fn:BeforeVersion(1.5,fn:BitsClear(9,32)) && fn:BeforeVersion(1.6,fn:BitsClear(10,32)) && fn:SinceVersion(2.0,fn:BitsClear(11,32)))");
        }
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_AP 
/// </summary>
internal partial class APM_AnnotLink_AP : APM_AnnotLink_AP__Base
{
}


internal partial class APM_AnnotLink_AP__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_AP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLink_AP>(obj, "AP", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Appearance, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLink_AS 
/// </summary>
internal partial class APM_AnnotLink_AS : APM_AnnotLink_AS__Base
{
}


internal partial class APM_AnnotLink_AS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_AS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var APN = obj.Get("AP")?.Get("N");
        var APR = obj.Get("AP")?.Get("R");
        var APD = obj.Get("AP")?.Get("D");
        var val = ctx.GetOptional<PdfName, APM_AnnotLink_AS>(obj, "AS", IndirectRequirement.Either);
        if (((APN != null)||(APR != null)||(APD != null)) && val == null) {
            ctx.Fail<APM_AnnotLink_AS>("AS is required when 'fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))"); return;
        } else if (val == null) {
            return;
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_Border 
/// </summary>
internal partial class APM_AnnotLink_Border : APM_AnnotLink_Border__Base
{
}


internal partial class APM_AnnotLink_Border__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_Border";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotLink_Border>(obj, "Border", IndirectRequirement.Either);
        if (val == null) { return; }
        // special case is an fn:Ignore, not pertinent to validation
        // no value restrictions
        ctx.Run<APM_ArrayOf_4AnnotBorderCharacteristics, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLink_C 
/// </summary>
internal partial class APM_AnnotLink_C : APM_AnnotLink_C__Base
{
}


internal partial class APM_AnnotLink_C__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotLink_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4NumbersColorAnnotation, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLink_StructParent Table 359
/// </summary>
internal partial class APM_AnnotLink_StructParent : APM_AnnotLink_StructParent__Base
{
}


internal partial class APM_AnnotLink_StructParent__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotLink_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_OC 
/// </summary>
internal partial class APM_AnnotLink_OC : APM_AnnotLink_OC__Base
{
}


internal partial class APM_AnnotLink_OC__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLink_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotLink_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// AnnotLink_AF 
/// </summary>
internal partial class APM_AnnotLink_AF : APM_AnnotLink_AF__Base
{
}


internal partial class APM_AnnotLink_AF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotLink_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotLink_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotLink_ca 
/// </summary>
internal partial class APM_AnnotLink_ca : APM_AnnotLink_ca__Base
{
}


internal partial class APM_AnnotLink_ca__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_ca";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotLink_ca>(obj, "ca", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var ca = obj.Get("ca");
        if (!((gte(ca,0.0m)&&lte(ca,1.0m)))) 
        {
            ctx.Fail<APM_AnnotLink_ca>($"Invalid value {val}, allowed are: [fn:Eval((@ca>=0.0) && (@ca<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_CA 
/// </summary>
internal partial class APM_AnnotLink_CA : APM_AnnotLink_CA__Base
{
}


internal partial class APM_AnnotLink_CA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_CA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotLink_CA>(obj, "CA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var CA = obj.Get("CA");
        if (!((gte(CA,0.0m)&&lte(CA,1.0m)))) 
        {
            ctx.Fail<APM_AnnotLink_CA>($"Invalid value {val}, allowed are: [fn:Eval((@CA>=0.0) && (@CA<=1.0))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_BM Table 134 and Table 135
/// </summary>
internal partial class APM_AnnotLink_BM : APM_AnnotLink_BM__Base
{
}


internal partial class APM_AnnotLink_BM__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_BM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotLink_BM>(obj, "BM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!((ctx.Version < 1.4m && val == "Compatible") || val == "Normal" || val == "Multiply" || val == "Screen" || val == "Difference" || val == "Darken" || val == "Lighten" || val == "ColorDodge" || val == "ColorBurn" || val == "Exclusion" || val == "HardLight" || val == "Overlay" || val == "SoftLight" || val == "Luminosity" || val == "Hue" || val == "Saturation" || val == "Color")) 
        {
            ctx.Fail<APM_AnnotLink_BM>($"Invalid value {val}, allowed are: [fn:Deprecated(1.4,Compatible),Normal,Multiply,Screen,Difference,Darken,Lighten,ColorDodge,ColorBurn,Exclusion,HardLight,Overlay,SoftLight,Luminosity,Hue,Saturation,Color]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_Lang 
/// </summary>
internal partial class APM_AnnotLink_Lang : APM_AnnotLink_Lang__Base
{
}


internal partial class APM_AnnotLink_Lang__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_Lang";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotLink_Lang>(obj, "Lang", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_A 
/// </summary>
internal partial class APM_AnnotLink_A : APM_AnnotLink_A__Base
{
}


internal partial class APM_AnnotLink_A__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_A";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLink_A>(obj, "A", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_ActionGoTo.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoTo, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionGoToR.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionGoToR, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionLaunch.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionLaunch, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionThread.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionThread, PdfDictionary>(stack, val, obj);
        } else if (APM_ActionURI.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ActionURI, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.6m && APM_ActionGoToE.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionGoToE, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_ActionGoToDp.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionGoToDp, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version == 1.2m && APM_ActionNOP.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionNOP, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version == 1.2m && APM_ActionSetState.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionSetState, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionSound.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionSound, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionMovie.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionMovie, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionHide.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionHide, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionNamed.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionNamed, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionSubmitForm.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionSubmitForm, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionResetForm.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionResetForm, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.2m && APM_ActionImportData.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionImportData, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.5m && APM_ActionSetOCGState.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionSetOCGState, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.5m && APM_ActionRendition.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionRendition, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.5m && APM_ActionTransition.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionTransition, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.6m && APM_ActionGoTo3DView.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionGoTo3DView, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 1.3m && APM_ActionECMAScript.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
        } else if ((ctx.Version >= 2.0m && APM_ActionRichMediaExecute.MatchesType(ctx, val))) 
        {
            ctx.Run<APM_ActionRichMediaExecute, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotLink_A>("A did not match any allowable types: '[ActionGoTo,ActionGoToR,fn:SinceVersion(1.6,ActionGoToE),fn:SinceVersion(2.0,ActionGoToDp),ActionLaunch,fn:IsPDFVersion(1.2,ActionNOP),fn:IsPDFVersion(1.2,ActionSetState),ActionThread,ActionURI,fn:SinceVersion(1.2,ActionSound),fn:SinceVersion(1.2,ActionMovie),fn:SinceVersion(1.2,ActionHide),fn:SinceVersion(1.2,ActionNamed),fn:SinceVersion(1.2,ActionSubmitForm),fn:SinceVersion(1.2,ActionResetForm),fn:SinceVersion(1.2,ActionImportData),fn:SinceVersion(1.5,ActionSetOCGState),fn:SinceVersion(1.5,ActionRendition),fn:SinceVersion(1.5,ActionTransition),fn:SinceVersion(1.6,ActionGoTo3DView),fn:SinceVersion(1.3,ActionECMAScript),fn:SinceVersion(2.0,ActionRichMediaExecute)]'");
        }
        
    }


}

/// <summary>
/// AnnotLink_Dest 
/// </summary>
internal partial class APM_AnnotLink_Dest : APM_AnnotLink_Dest__Base
{
}


internal partial class APM_AnnotLink_Dest__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_Dest";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotLink_Dest>(obj, "Dest", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_DestXYZArray.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_DestXYZArray, PdfArray>(stack, val, obj);
                    } else if (APM_Dest0Array.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_Dest0Array, PdfArray>(stack, val, obj);
                    } else if (APM_Dest1Array.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_Dest1Array, PdfArray>(stack, val, obj);
                    } else if (APM_Dest4Array.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_Dest4Array, PdfArray>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_AnnotLink_Dest>("Dest did not match any allowable types: '[DestXYZArray,Dest0Array,Dest1Array,Dest4Array]'");
                    }
                    return;
                }
            case PdfObjectType.NameObj:
                {
                    var val =  (PdfName)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotLink_Dest>("Dest is required to one of 'array;name;string-byte', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotLink_H 
/// </summary>
internal partial class APM_AnnotLink_H : APM_AnnotLink_H__Base
{
}


internal partial class APM_AnnotLink_H__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_H";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotLink_H>(obj, "H", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == "N" || val == "I" || val == "O" || val == "P")) 
        {
            ctx.Fail<APM_AnnotLink_H>($"Invalid value {val}, allowed are: [N,I,O,P]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotLink_PA 
/// </summary>
internal partial class APM_AnnotLink_PA : APM_AnnotLink_PA__Base
{
}


internal partial class APM_AnnotLink_PA__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_PA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLink_PA>(obj, "PA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ActionURI, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLink_QuadPoints 
/// </summary>
internal partial class APM_AnnotLink_QuadPoints : APM_AnnotLink_QuadPoints__Base
{
}


internal partial class APM_AnnotLink_QuadPoints__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_QuadPoints";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotLink_QuadPoints>(obj, "QuadPoints", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfQuadPoints, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLink_BS 
/// </summary>
internal partial class APM_AnnotLink_BS : APM_AnnotLink_BS__Base
{
}


internal partial class APM_AnnotLink_BS__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_BS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotLink_BS>(obj, "BS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_BorderStyle, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotLink_Path ISO/TS 24654 non-rectangular links
/// </summary>
internal partial class APM_AnnotLink_Path : APM_AnnotLink_Path__Base
{
}


internal partial class APM_AnnotLink_Path__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotLink_Path";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotLink_Path>(obj, "Path", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfArraysPaths, PdfArray>(stack, val, obj);
        
    }


}

