// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_FileTrailer : APM_FileTrailer__Base
{
}

internal partial class APM_FileTrailer__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "FileTrailer";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_FileTrailer_Size, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FileTrailer_Prev, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FileTrailer_Root, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FileTrailer_Encrypt, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FileTrailer_Info, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FileTrailer_ID, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FileTrailer_XRefStm, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_FileTrailer_AuthCode, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_10.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.0");
                }
                break;
            case 1.1m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_11.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.1");
                }
                break;
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_FileTrailer>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_10 { get; } = new List<string> 
    {
        "Size", "Prev", "Root", "Info"
    };
    public static HashSet<string> AllowedFields_11 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID"
    };
    public static HashSet<string> AllowedFields_12 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID"
    };
    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID", "XRefStm"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID", "XRefStm"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID", "XRefStm"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID", "XRefStm"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID", "XRefStm"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Size", "Prev", "Root", "Encrypt", "Info", "ID", "XRefStm", "AuthCode"
    };
    


}

/// <summary>
/// FileTrailer_Size Table 15 and Table 19
/// </summary>
internal partial class APM_FileTrailer_Size : APM_FileTrailer_Size__Base
{
}


internal partial class APM_FileTrailer_Size__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FileTrailer_Size";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfIntNumber, APM_FileTrailer_Size>(obj, "Size", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        
        var Size = obj.Get("Size");
        if (!(gt(Size,0))) 
        {
            ctx.Fail<APM_FileTrailer_Size>($"Invalid value {val}, allowed are: [fn:Eval(@Size>0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FileTrailer_Prev 
/// </summary>
internal partial class APM_FileTrailer_Prev : APM_FileTrailer_Prev__Base
{
}


internal partial class APM_FileTrailer_Prev__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FileTrailer_Prev";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_FileTrailer_Prev>(obj, "Prev", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        // no special cases
        
        var Prev = obj.Get("Prev");
        if (!((gte(Prev,0)&&lte(Prev,ctx.FileSize)))) 
        {
            ctx.Fail<APM_FileTrailer_Prev>($"Invalid value {val}, allowed are: [fn:Eval((@Prev>=0) && (@Prev<=fn:FileSize()))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FileTrailer_Root 
/// </summary>
internal partial class APM_FileTrailer_Root : APM_FileTrailer_Root__Base
{
}


internal partial class APM_FileTrailer_Root__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FileTrailer_Root";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfDictionary, APM_FileTrailer_Root>(obj, "Root", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Catalog, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// FileTrailer_Encrypt 
/// </summary>
internal partial class APM_FileTrailer_Encrypt : APM_FileTrailer_Encrypt__Base
{
}


internal partial class APM_FileTrailer_Encrypt__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FileTrailer_Encrypt";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_FileTrailer_Encrypt>(obj, "Encrypt", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_EncryptionStandard.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_EncryptionStandard, PdfDictionary>(stack, val, obj);
        } else if (APM_EncryptionPublicKey.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_EncryptionPublicKey, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_FileTrailer_Encrypt>("Encrypt did not match any allowable types: '[EncryptionStandard,EncryptionPublicKey]'");
        }
        
    }


}

/// <summary>
/// FileTrailer_Info https://github.com/pdf-association/pdf-issues/issues/106
/// </summary>
internal partial class APM_FileTrailer_Info : APM_FileTrailer_Info__Base
{
}


internal partial class APM_FileTrailer_Info__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FileTrailer_Info";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_FileTrailer_Info>(obj, "Info", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_DocInfo, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// FileTrailer_ID 
/// </summary>
internal partial class APM_FileTrailer_ID : APM_FileTrailer_ID__Base
{
}


internal partial class APM_FileTrailer_ID__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FileTrailer_ID";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.1m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        
        var val = ctx.GetOptional<PdfArray, APM_FileTrailer_ID>(obj, "ID", IndirectRequirement.Either);
        if (((ctx.Version >= 2.0m||obj.ContainsKey("Encrypt"))) && val == null) {
            ctx.Fail<APM_FileTrailer_ID>("ID is required when 'fn:IsRequired(fn:SinceVersion(2.0) || fn:IsPresent(Encrypt))"); return;
        } else if (val == null) {
            return;
        }
        var ID0 = obj.Get("ID")?.Get("0");
        var ID1 = obj.Get("ID")?.Get("1");
        if (!((MustBeDirect(ID0)&&MustBeDirect(ID1)))) 
        {
            ctx.Fail<APM_FileTrailer_ID>($"Value failed special case check: fn:Eval(fn:MustBeDirect(ID::0) && fn:MustBeDirect(ID::1))");
        }
        // no value restrictions
        ctx.Run<APM_ArrayOf_2UnencryptedStringsByte, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// FileTrailer_XRefStm 
/// </summary>
internal partial class APM_FileTrailer_XRefStm : APM_FileTrailer_XRefStm__Base
{
}


internal partial class APM_FileTrailer_XRefStm__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FileTrailer_XRefStm";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_FileTrailer_XRefStm>(obj, "XRefStm", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var XRefStm = obj.Get("XRefStm");
        if (!((gte(XRefStm,0)&&lte(XRefStm,ctx.FileSize)))) 
        {
            ctx.Fail<APM_FileTrailer_XRefStm>($"Invalid value {val}, allowed are: [fn:Eval((@XRefStm>=0) && (@XRefStm<=fn:FileSize()))]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// FileTrailer_AuthCode ISO/TS 32004 integrity protection
/// </summary>
internal partial class APM_FileTrailer_AuthCode : APM_FileTrailer_AuthCode__Base
{
}


internal partial class APM_FileTrailer_AuthCode__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "FileTrailer_AuthCode";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return false; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_FileTrailer_AuthCode>(obj, "AuthCode", IndirectRequirement.MustBeDirect);
        if (val == null) { return; }
        var EncryptV = obj.Get("Encrypt")?.Get("V");
        if (!(gte(EncryptV,5))) 
        {
            ctx.Fail<APM_FileTrailer_AuthCode>($"Value failed special case check: fn:Eval(Encrypt::@V>=5)");
        }
        // no value restrictions
        ctx.Run<APM_AuthCode, PdfDictionary>(stack, val, obj);
        
    }


}

