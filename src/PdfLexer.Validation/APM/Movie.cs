// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_Movie : APM_Movie__Base
{
}

internal partial class APM_Movie__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "Movie";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_Movie_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Movie_Aspect, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Movie_Rotate, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_Movie_Poster, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
            case 1.3m:
            case 1.4m:
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12_13_14_15_16_17_18_19.Contains(x)))
                {
                    ctx.Fail<APM_Movie>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_12_13_14_15_16_17_18_19 { get; } = new List<string> 
    {
        "Aspect", "F", "Poster", "Rotate"
    };
    


}

/// <summary>
/// Movie_F Table 306
/// </summary>
internal partial class APM_Movie_F : APM_Movie_F__Base
{
}


internal partial class APM_Movie_F__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Movie_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Movie_F>(obj, "F", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_Movie_F>("F is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_Movie_F>("F is required to one of 'dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// Movie_Aspect 
/// </summary>
internal partial class APM_Movie_Aspect : APM_Movie_Aspect__Base
{
}


internal partial class APM_Movie_Aspect__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Movie_Aspect";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_Movie_Aspect>(obj, "Aspect", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_2Numbers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// Movie_Rotate 
/// </summary>
internal partial class APM_Movie_Rotate : APM_Movie_Rotate__Base
{
}


internal partial class APM_Movie_Rotate__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Movie_Rotate";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_Movie_Rotate>(obj, "Rotate", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        var Rotate = obj.Get("Rotate");
        if (!(eq(mod(Rotate,90),0))) 
        {
            ctx.Fail<APM_Movie_Rotate>($"Invalid value {val}, allowed are: [fn:Eval((@Rotate mod 90)==0)]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// Movie_Poster 
/// </summary>
internal partial class APM_Movie_Poster : APM_Movie_Poster__Base
{
}


internal partial class APM_Movie_Poster__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "Movie_Poster";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m && version < 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_Movie_Poster>(obj, "Poster", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.BooleanObj:
                {
                    var val =  (PdfBoolean)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_Movie_Poster>("Poster is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_XObjectImage, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_Movie_Poster>("Poster is required to one of 'boolean;stream', was " + utval.Type);
                return;
        }
    }


}

