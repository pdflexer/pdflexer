// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_MinimumScreenSize : APM_MinimumScreenSize__Base
{
}

internal partial class APM_MinimumScreenSize__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "MinimumScreenSize";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_MinimumScreenSize_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MinimumScreenSize_V, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_MinimumScreenSize_M, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_MinimumScreenSize>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_MinimumScreenSize>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_MinimumScreenSize>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_MinimumScreenSize>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_MinimumScreenSize>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_MinimumScreenSize>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_MinimumScreenSize_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "Type", "V", "M"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "Type", "V", "M"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "V", "M"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "V", "M"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "V", "M"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "V", "M"
    };
    


}

/// <summary>
/// MinimumScreenSize_Type Table 281
/// </summary>
internal partial class APM_MinimumScreenSize_Type : APM_MinimumScreenSize_Type__Base
{
}


internal partial class APM_MinimumScreenSize_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MinimumScreenSize_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfName, APM_MinimumScreenSize_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.MinScreenSize)) 
        {
            ctx.Fail<APM_MinimumScreenSize_Type>($"Invalid value {val}, allowed are: [MinScreenSize]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// MinimumScreenSize_V 2 non-negative integers of screen: width, height
/// </summary>
internal partial class APM_MinimumScreenSize_V : APM_MinimumScreenSize_V__Base
{
}


internal partial class APM_MinimumScreenSize_V__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MinimumScreenSize_V";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfArray, APM_MinimumScreenSize_V>(obj, "V", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_2Integers, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// MinimumScreenSize_M Table 304
/// </summary>
internal partial class APM_MinimumScreenSize_M : APM_MinimumScreenSize_M__Base
{
}


internal partial class APM_MinimumScreenSize_M__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "MinimumScreenSize_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_MinimumScreenSize_M>(obj, "M", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == 0 || val == 1 || val == 2 || val == 3 || val == 4 || val == 5 || val == 6)) 
        {
            ctx.Fail<APM_MinimumScreenSize_M>($"Invalid value {val}, allowed are: [0,1,2,3,4,5,6]");
        }
        // no linked objects
        
    }


}

