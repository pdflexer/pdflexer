// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_AnnotStrikeOut : APM_AnnotStrikeOut_Base
{
}

internal partial class APM_AnnotStrikeOut_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "AnnotStrikeOut";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_AnnotStrikeOut_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_Subtype, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_Rect, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_Contents, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_P, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_NM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_M, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_F, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_AP, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_AS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_Border, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_C, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_StructParent, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_OC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_AF, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_ca, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_CA, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_BM, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_Lang, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_T, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_Popup, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_RC, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_CreationDate, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_IRT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_Subj, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_RT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_IT, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_QuadPoints, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_AnnotStrikeOut_ExData, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_AnnotStrikeOut>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_AnnotStrikeOut>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_AnnotStrikeOut>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_AnnotStrikeOut>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_AnnotStrikeOut>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_AnnotStrikeOut>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_AnnotStrikeOut>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_AnnotStrikeOut>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_AnnotStrikeOut_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_13 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "M", "F", "AP", "AS", "Border", "C", "StructParent", "T", "Popup", "QuadPoints"
    };
    public static HashSet<string> AllowedFields_14 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "CA", "T", "Popup", "QuadPoints"
    };
    public static HashSet<string> AllowedFields_15 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "QuadPoints"
    };
    public static HashSet<string> AllowedFields_16 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "QuadPoints"
    };
    public static HashSet<string> AllowedFields_17 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "QuadPoints", "ExData"
    };
    public static HashSet<string> AllowedFields_18 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "QuadPoints", "ExData"
    };
    public static HashSet<string> AllowedFields_19 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "CA", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "QuadPoints", "ExData"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "Type", "Subtype", "Rect", "Contents", "P", "NM", "M", "F", "AP", "AS", "Border", "C", "StructParent", "OC", "AF", "ca", "CA", "BM", "Lang", "T", "Popup", "RC", "CreationDate", "IRT", "Subj", "RT", "IT", "QuadPoints", "ExData"
    };
    


}

/// <summary>
/// AnnotStrikeOut_Type Table 166 and Table 172 and Table 182 (markup annot)
/// </summary>
internal partial class APM_AnnotStrikeOut_Type : APM_AnnotStrikeOut_Type_Base
{
}


internal partial class APM_AnnotStrikeOut_Type_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotStrikeOut_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "Annot")) 
        {
            ctx.Fail<APM_AnnotStrikeOut_Type>($"Invalid value {val}, allowed are: [Annot]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_Subtype 
/// </summary>
internal partial class APM_AnnotStrikeOut_Subtype : APM_AnnotStrikeOut_Subtype_Base
{
}


internal partial class APM_AnnotStrikeOut_Subtype_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_Subtype";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_AnnotStrikeOut_Subtype>(obj, "Subtype", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!(val == "StrikeOut")) 
        {
            ctx.Fail<APM_AnnotStrikeOut_Subtype>($"Invalid value {val}, allowed are: [StrikeOut]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_Rect 
/// </summary>
internal partial class APM_AnnotStrikeOut_Rect : APM_AnnotStrikeOut_Rect_Base
{
}


internal partial class APM_AnnotStrikeOut_Rect_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_Rect";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_AnnotStrikeOut_Rect>(obj, "Rect", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_Contents 
/// </summary>
internal partial class APM_AnnotStrikeOut_Contents : APM_AnnotStrikeOut_Contents_Base
{
}


internal partial class APM_AnnotStrikeOut_Contents_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_Contents";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotStrikeOut_Contents>(obj, "Contents", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_P 
/// </summary>
internal partial class APM_AnnotStrikeOut_P : APM_AnnotStrikeOut_P_Base
{
}


internal partial class APM_AnnotStrikeOut_P_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_P";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotStrikeOut_P>(obj, "P", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_PageObject, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotStrikeOut_NM 
/// </summary>
internal partial class APM_AnnotStrikeOut_NM : APM_AnnotStrikeOut_NM_Base
{
}


internal partial class APM_AnnotStrikeOut_NM_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_NM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotStrikeOut_NM>(obj, "NM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_M 
/// </summary>
internal partial class APM_AnnotStrikeOut_M : APM_AnnotStrikeOut_M_Base
{
}


internal partial class APM_AnnotStrikeOut_M_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_M";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotStrikeOut_M>(obj, "M", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            
            // TODO MC date;string-text
            
            default:
                ctx.Fail<APM_AnnotStrikeOut_M>("M is required to one of 'date;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotStrikeOut_F Table 167
/// </summary>
internal partial class APM_AnnotStrikeOut_F : APM_AnnotStrikeOut_F_Base
{
}


internal partial class APM_AnnotStrikeOut_F_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_F";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotStrikeOut_F>(obj, "F", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_AP 
/// </summary>
internal partial class APM_AnnotStrikeOut_AP : APM_AnnotStrikeOut_AP_Base
{
}


internal partial class APM_AnnotStrikeOut_AP_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_AP";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfDictionary? val;
        {
            var Rect = obj.Get("Rect");
            if (ctx.Version >= 2.0m && (gt(RectWidth(obj),0)||gt(RectHeight(Rect),0))) {
                val = ctx.GetRequired<PdfDictionary, APM_AnnotStrikeOut_AP>(obj, "AP", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfDictionary, APM_AnnotStrikeOut_AP>(obj, "AP", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        ctx.Run<APM_Appearance, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotStrikeOut_AS 
/// </summary>
internal partial class APM_AnnotStrikeOut_AS : APM_AnnotStrikeOut_AS_Base
{
}


internal partial class APM_AnnotStrikeOut_AS_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_AS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfName? val;
        {
            var APN = obj.Get("AP")?.Get("N");
            var APR = obj.Get("AP")?.Get("R");
            var APD = obj.Get("AP")?.Get("D");
            if (obj.ContainsKey(APN)||obj.ContainsKey(APR)||obj.ContainsKey(APD)) {
                val = ctx.GetRequired<PdfName, APM_AnnotStrikeOut_AS>(obj, "AS", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfName, APM_AnnotStrikeOut_AS>(obj, "AS", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_Border 
/// </summary>
internal partial class APM_AnnotStrikeOut_Border : APM_AnnotStrikeOut_Border_Base
{
}


internal partial class APM_AnnotStrikeOut_Border_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_Border";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotStrikeOut_Border>(obj, "Border", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4AnnotBorderCharacteristics, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotStrikeOut_C 
/// </summary>
internal partial class APM_AnnotStrikeOut_C : APM_AnnotStrikeOut_C_Base
{
}


internal partial class APM_AnnotStrikeOut_C_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfArray, APM_AnnotStrikeOut_C>(obj, "C", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOf_4NumbersColorAnnotation, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotStrikeOut_StructParent Table 359
/// </summary>
internal partial class APM_AnnotStrikeOut_StructParent : APM_AnnotStrikeOut_StructParent_Base
{
}


internal partial class APM_AnnotStrikeOut_StructParent_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_StructParent";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_AnnotStrikeOut_StructParent>(obj, "StructParent", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_OC 
/// </summary>
internal partial class APM_AnnotStrikeOut_OC : APM_AnnotStrikeOut_OC_Base
{
}


internal partial class APM_AnnotStrikeOut_OC_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_OC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotStrikeOut_OC>(obj, "OC", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_OptContentGroup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentGroup, PdfDictionary>(stack, val, obj);
        } else if (APM_OptContentMembership.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_OptContentMembership, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotStrikeOut_OC>("OC did not match any allowable types: '[OptContentGroup,OptContentMembership]'");
        }
        
    }


}

/// <summary>
/// AnnotStrikeOut_AF 
/// </summary>
internal partial class APM_AnnotStrikeOut_AF : APM_AnnotStrikeOut_AF_Base
{
}


internal partial class APM_AnnotStrikeOut_AF_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotStrikeOut_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotStrikeOut_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotStrikeOut_ca 
/// </summary>
internal partial class APM_AnnotStrikeOut_ca : APM_AnnotStrikeOut_ca_Base
{
}


internal partial class APM_AnnotStrikeOut_ca_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_ca";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotStrikeOut_ca>(obj, "ca", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @ca = val;
        if (!((gte(@ca,0.0m)&&lte(@ca,1.0m)))) 
        {
            ctx.Fail<APM_AnnotStrikeOut_ca>($"Invalid value {val}, allowed are: [fn:Eval((@ca>=0.0) && (@ca<=1.0))]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_CA 
/// </summary>
internal partial class APM_AnnotStrikeOut_CA : APM_AnnotStrikeOut_CA_Base
{
}


internal partial class APM_AnnotStrikeOut_CA_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_CA";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.4m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfNumber, APM_AnnotStrikeOut_CA>(obj, "CA", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        IPdfObject @CA = val;
        if (!((gte(@CA,0.0m)&&lte(@CA,1.0m)))) 
        {
            ctx.Fail<APM_AnnotStrikeOut_CA>($"Invalid value {val}, allowed are: [fn:Eval((@CA>=0.0) && (@CA<=1.0))]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_BM Table 134 and Table 135
/// </summary>
internal partial class APM_AnnotStrikeOut_BM : APM_AnnotStrikeOut_BM_Base
{
}


internal partial class APM_AnnotStrikeOut_BM_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_BM";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotStrikeOut_BM>(obj, "BM", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        {
        
        
        if (!((ctx.Version <= 1.4m && val == "Compatible") || val == "Normal" || val == "Multiply" || val == "Screen" || val == "Difference" || val == "Darken" || val == "Lighten" || val == "ColorDodge" || val == "ColorBurn" || val == "Exclusion" || val == "HardLight" || val == "Overlay" || val == "SoftLight" || val == "Luminosity" || val == "Hue" || val == "Saturation" || val == "Color")) 
        {
            ctx.Fail<APM_AnnotStrikeOut_BM>($"Invalid value {val}, allowed are: [fn:Deprecated(1.4,Compatible),Normal,Multiply,Screen,Difference,Darken,Lighten,ColorDodge,ColorBurn,Exclusion,HardLight,Overlay,SoftLight,Luminosity,Hue,Saturation,Color]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_Lang 
/// </summary>
internal partial class APM_AnnotStrikeOut_Lang : APM_AnnotStrikeOut_Lang_Base
{
}


internal partial class APM_AnnotStrikeOut_Lang_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_Lang";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotStrikeOut_Lang>(obj, "Lang", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_T 
/// </summary>
internal partial class APM_AnnotStrikeOut_T : APM_AnnotStrikeOut_T_Base
{
}


internal partial class APM_AnnotStrikeOut_T_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotStrikeOut_T>(obj, "T", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_Popup 
/// </summary>
internal partial class APM_AnnotStrikeOut_Popup : APM_AnnotStrikeOut_Popup_Base
{
}


internal partial class APM_AnnotStrikeOut_Popup_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_Popup";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotStrikeOut_Popup>(obj, "Popup", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_AnnotPopup, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotStrikeOut_RC 
/// </summary>
internal partial class APM_AnnotStrikeOut_RC : APM_AnnotStrikeOut_RC_Base
{
}


internal partial class APM_AnnotStrikeOut_RC_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_RC";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_AnnotStrikeOut_RC>(obj, "RC", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.StreamObj:
                {
                    var val =  (PdfStream)utval;
                    if (!wasIR) { ctx.Fail<APM_AnnotStrikeOut_RC>("RC is required to be indirect when a stream"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_Stream, PdfDictionary>(stack, val.Dictionary, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_AnnotStrikeOut_RC>("RC is required to one of 'stream;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// AnnotStrikeOut_CreationDate 
/// </summary>
internal partial class APM_AnnotStrikeOut_CreationDate : APM_AnnotStrikeOut_CreationDate_Base
{
}


internal partial class APM_AnnotStrikeOut_CreationDate_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_CreationDate";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotStrikeOut_CreationDate>(obj, "CreationDate", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_IRT 
/// </summary>
internal partial class APM_AnnotStrikeOut_IRT : APM_AnnotStrikeOut_IRT_Base
{
}


internal partial class APM_AnnotStrikeOut_IRT_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_IRT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        PdfDictionary? val;
        {
            
            if (obj.ContainsKey("RT")) {
                val = ctx.GetRequired<PdfDictionary, APM_AnnotStrikeOut_IRT>(obj, "IRT", IndirectRequirement.Either);
            } else {
                val = ctx.GetOptional<PdfDictionary, APM_AnnotStrikeOut_IRT>(obj, "IRT", IndirectRequirement.Either);
            }
            if (val == null) { return; }
        }
        // no special cases
        // no value restrictions
        if (APM_AnnotText.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotText, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotLink.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotLink, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotFreeText.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotFreeText, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotLine.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotLine, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSquare.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSquare, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotCircle.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotCircle, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPolygon.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPolygon, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotHighlight.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotHighlight, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotUnderline.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotUnderline, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSquiggly.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSquiggly, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotStrikeOut.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotStrikeOut, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotCaret.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotCaret, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotStamp.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotStamp, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotInk.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotInk, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPopup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPopup, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotFileAttachment.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotFileAttachment, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotSound.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotSound, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotMovie.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotMovie, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotScreen.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotScreen, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotWidget.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotWidget, PdfDictionary>(stack, val, obj);
        } else if (APM_AnnotPrinterMark.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_AnnotPrinterMark, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotStrikeOut_IRT>("IRT did not match any allowable types: '[AnnotText,AnnotLink,AnnotFreeText,AnnotLine,AnnotSquare,AnnotCircle,AnnotPolygon,AnnotHighlight,AnnotUnderline,AnnotSquiggly,AnnotStrikeOut,AnnotCaret,AnnotStamp,AnnotInk,AnnotPopup,AnnotFileAttachment,AnnotSound,AnnotMovie,AnnotScreen,AnnotWidget,AnnotPrinterMark,fn:SinceVersion(1.6,AnnotWatermark),fn:SinceVersion(1.6,Annot3D),fn:SinceVersion(1.7,AnnotRedact),fn:SinceVersion(2.0,AnnotProjection),fn:SinceVersion(2.0,AnnotRichMedia)]'");
        }
        
    }


}

/// <summary>
/// AnnotStrikeOut_Subj 
/// </summary>
internal partial class APM_AnnotStrikeOut_Subj : APM_AnnotStrikeOut_Subj_Base
{
}


internal partial class APM_AnnotStrikeOut_Subj_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_Subj";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.5m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_AnnotStrikeOut_Subj>(obj, "Subj", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_RT 
/// </summary>
internal partial class APM_AnnotStrikeOut_RT : APM_AnnotStrikeOut_RT_Base
{
}


internal partial class APM_AnnotStrikeOut_RT_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_RT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotStrikeOut_RT>(obj, "RT", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        {
        
        
        if (!(val == "R" || val == "Group")) 
        {
            ctx.Fail<APM_AnnotStrikeOut_RT>($"Invalid value {val}, allowed are: [R,Group]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_IT 
/// </summary>
internal partial class APM_AnnotStrikeOut_IT : APM_AnnotStrikeOut_IT_Base
{
}


internal partial class APM_AnnotStrikeOut_IT_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_IT";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.6m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_AnnotStrikeOut_IT>(obj, "IT", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// AnnotStrikeOut_QuadPoints 
/// </summary>
internal partial class APM_AnnotStrikeOut_QuadPoints : APM_AnnotStrikeOut_QuadPoints_Base
{
}


internal partial class APM_AnnotStrikeOut_QuadPoints_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_QuadPoints";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfArray, APM_AnnotStrikeOut_QuadPoints>(obj, "QuadPoints", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfQuadPoints, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// AnnotStrikeOut_ExData 2D markup annots only 
/// </summary>
internal partial class APM_AnnotStrikeOut_ExData : APM_AnnotStrikeOut_ExData_Base
{
}


internal partial class APM_AnnotStrikeOut_ExData_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "AnnotStrikeOut_ExData";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.7m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_AnnotStrikeOut_ExData>(obj, "ExData", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_ExData3DMarkup.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_ExData3DMarkup, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_AnnotStrikeOut_ExData>("ExData did not match any allowable types: '[ExData3DMarkup,fn:IsPDFVersion(1.7,fn:Extension(ADBE_Extn3,ExDataMarkupGeo)),fn:SinceVersion(2.0,ExDataMarkupGeo),fn:SinceVersion(2.0,ExDataProjection)]'");
        }
        
    }


}

