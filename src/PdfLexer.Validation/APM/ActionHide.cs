// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_ActionHide : APM_ActionHide__Base
{
}

internal partial class APM_ActionHide__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "ActionHide";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_ActionHide_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionHide_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionHide_Next, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionHide_T, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_ActionHide_H, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.2m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_12.Contains(x)))
                {
                    ctx.Fail<APM_ActionHide>($"Unknown field {extra} for version 1.2");
                }
                break;
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_ActionHide>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_ActionHide>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_ActionHide>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_ActionHide>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_ActionHide>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_ActionHide>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_ActionHide>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_ActionHide>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_ActionHide_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static List<string> AllowedFields_12 { get; } = new List<string> 
    {
        "Type", "S", "Next", "T", "H"
    };
    public static List<string> AllowedFields_13 { get; } = new List<string> 
    {
        "Type", "S", "Next", "T", "H"
    };
    public static List<string> AllowedFields_14 { get; } = new List<string> 
    {
        "Type", "S", "Next", "T", "H"
    };
    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "Type", "S", "Next", "T", "H"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "Type", "S", "Next", "T", "H"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "Type", "S", "Next", "T", "H"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "Type", "S", "Next", "T", "H"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "Type", "S", "Next", "T", "H"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "Type", "S", "Next", "T", "H"
    };
    


}

/// <summary>
/// ActionHide_Type Table 196 and Table 214
/// </summary>
internal partial class APM_ActionHide_Type : APM_ActionHide_Type__Base
{
}


internal partial class APM_ActionHide_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionHide_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfName, APM_ActionHide_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Action)) 
        {
            ctx.Fail<APM_ActionHide_Type>($"Invalid value {val}, allowed are: [Action]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// ActionHide_S 
/// </summary>
internal partial class APM_ActionHide_S : APM_ActionHide_S__Base
{
}


internal partial class APM_ActionHide_S__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionHide_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfName, APM_ActionHide_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.Hide)) 
        {
            ctx.Fail<APM_ActionHide_S>($"Invalid value {val}, allowed are: [Hide]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// ActionHide_Next 
/// </summary>
internal partial class APM_ActionHide_Next : APM_ActionHide_Next__Base
{
}


internal partial class APM_ActionHide_Next__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionHide_Next";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_ActionHide_Next>(obj, "Next", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfActions, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    if (APM_ActionGoTo.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionGoTo, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionGoToR.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionGoToR, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionLaunch.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionLaunch, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionThread.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionThread, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionURI.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionURI, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionSound.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionSound, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionMovie.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionMovie, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionHide.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionHide, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionNamed.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionNamed, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionSubmitForm.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionSubmitForm, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionResetForm.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionResetForm, PdfDictionary>(stack, val, obj);
                    } else if (APM_ActionImportData.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_ActionImportData, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.6m && APM_ActionGoToE.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionGoToE, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 2.0m && APM_ActionGoToDp.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionGoToDp, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version == 1.2m && APM_ActionNOP.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionNOP, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version == 1.2m && APM_ActionSetState.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionSetState, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_ActionSetOCGState.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionSetOCGState, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_ActionRendition.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionRendition, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_ActionTransition.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionTransition, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.6m && APM_ActionGoTo3DView.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionGoTo3DView, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_ActionECMAScript.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionECMAScript, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 2.0m && APM_ActionRichMediaExecute.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_ActionRichMediaExecute, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_ActionHide_Next>("Next did not match any allowable types: '[ActionGoTo,ActionGoToR,fn:SinceVersion(1.6,ActionGoToE),fn:SinceVersion(2.0,ActionGoToDp),ActionLaunch,fn:IsPDFVersion(1.2,ActionNOP),fn:IsPDFVersion(1.2,ActionSetState),ActionThread,ActionURI,ActionSound,ActionMovie,ActionHide,ActionNamed,ActionSubmitForm,ActionResetForm,ActionImportData,fn:SinceVersion(1.5,ActionSetOCGState),fn:SinceVersion(1.5,ActionRendition),fn:SinceVersion(1.5,ActionTransition),fn:SinceVersion(1.6,ActionGoTo3DView),fn:SinceVersion(1.3,ActionECMAScript),fn:SinceVersion(2.0,ActionRichMediaExecute)]'");
                    }
                    return;
                }
            
            default:
                ctx.Fail<APM_ActionHide_Next>("Next is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// ActionHide_T 
/// </summary>
internal partial class APM_ActionHide_T : APM_ActionHide_T__Base
{
}


internal partial class APM_ActionHide_T__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionHide_T";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_ActionHide_T>(obj, "T", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_ActionHide_T>("T is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfActionHideAnnots, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    if (!wasIR) { ctx.Fail<APM_ActionHide_T>("T is required to be indirect when a dictionary"); return; }
                    // no special cases
                    // no value restrictions
                    if (APM_AnnotText.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_AnnotText, PdfDictionary>(stack, val, obj);
                    } else if (APM_AnnotLink.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_AnnotLink, PdfDictionary>(stack, val, obj);
                    } else if (APM_AnnotSound.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_AnnotSound, PdfDictionary>(stack, val, obj);
                    } else if (APM_AnnotMovie.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_AnnotMovie, PdfDictionary>(stack, val, obj);
                    } else if (APM_AnnotWidget.MatchesType(ctx, val)) 
                    {
                        ctx.Run<APM_AnnotWidget, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotFreeText.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotFreeText, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotLine.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotLine, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotSquare.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotSquare, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotCircle.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotCircle, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_AnnotPolygon.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotPolygon, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_AnnotPolyLine.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotPolyLine, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotHighlight.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotHighlight, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotUnderline.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotUnderline, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.4m && APM_AnnotSquiggly.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotSquiggly, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotStrikeOut.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotStrikeOut, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_AnnotCaret.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotCaret, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotStamp.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotStamp, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotInk.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotInk, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotPopup.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotPopup, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotFileAttachment.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotFileAttachment, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.5m && APM_AnnotScreen.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotScreen, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.4m && APM_AnnotPrinterMark.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotPrinterMark, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.3m && APM_AnnotTrapNetwork.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotTrapNetwork, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.6m && APM_AnnotWatermark.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotWatermark, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.6m && APM_Annot3D.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_Annot3D, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 1.7m && APM_AnnotRedact.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotRedact, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 2.0m && APM_AnnotProjection.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotProjection, PdfDictionary>(stack, val, obj);
                    } else if ((ctx.Version >= 2.0m && APM_AnnotRichMedia.MatchesType(ctx, val))) 
                    {
                        ctx.Run<APM_AnnotRichMedia, PdfDictionary>(stack, val, obj);
                    }else 
                    {
                        ctx.Fail<APM_ActionHide_T>("T did not match any allowable types: '[AnnotText,AnnotLink,fn:SinceVersion(1.3,AnnotFreeText),fn:SinceVersion(1.3,AnnotLine),fn:SinceVersion(1.3,AnnotSquare),fn:SinceVersion(1.3,AnnotCircle),fn:SinceVersion(1.5,AnnotPolygon),fn:SinceVersion(1.5,AnnotPolyLine),fn:SinceVersion(1.3,AnnotHighlight),fn:SinceVersion(1.3,AnnotUnderline),fn:SinceVersion(1.4,AnnotSquiggly),fn:SinceVersion(1.3,AnnotStrikeOut),fn:SinceVersion(1.5,AnnotCaret),fn:SinceVersion(1.3,AnnotStamp),fn:SinceVersion(1.3,AnnotInk),fn:SinceVersion(1.3,AnnotPopup),fn:SinceVersion(1.3,AnnotFileAttachment),AnnotSound,AnnotMovie,fn:SinceVersion(1.5,AnnotScreen),AnnotWidget,fn:SinceVersion(1.4,AnnotPrinterMark),fn:SinceVersion(1.3,AnnotTrapNetwork),fn:SinceVersion(1.6,AnnotWatermark),fn:SinceVersion(1.6,Annot3D),fn:SinceVersion(1.7,AnnotRedact),fn:SinceVersion(2.0,AnnotProjection),fn:SinceVersion(2.0,AnnotRichMedia)]'");
                    }
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    var T = obj.Get("T");
                    if (!(IsFieldName(val))) 
                    {
                        ctx.Fail<APM_ActionHide_T>($"Value failed special case check: fn:Eval(fn:IsFieldName(@T))");
                    }
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_ActionHide_T>("T is required to one of 'array;dictionary;string-text', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// ActionHide_H 
/// </summary>
internal partial class APM_ActionHide_H : APM_ActionHide_H__Base
{
}


internal partial class APM_ActionHide_H__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "ActionHide_H";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfBoolean, APM_ActionHide_H>(obj, "H", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

