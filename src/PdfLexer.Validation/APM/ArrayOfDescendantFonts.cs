// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

internal partial class APM_ArrayOfDescendantFonts : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfDescendantFonts";
    public static bool RuleGroup() { return true; }
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        ctx.Run<APM_ArrayOfDescendantFonts_0, PdfArray>(stack, obj, parent);

    }

    public static bool MatchesType(PdfValidator ctx, PdfArray obj) 
    {
        return false; // TODO
    }
}

/// <summary>
/// ArrayOfDescendantFonts_0 Table 119
/// </summary>
internal partial class APM_ArrayOfDescendantFonts_0 : ISpecification<PdfArray>
{
    public static string Name { get; } = "ArrayOfDescendantFonts_0";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfArray obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.2m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfArray obj, IPdfObject? parent)
    {
        var val = ctx.GetRequired<PdfDictionary, APM_ArrayOfDescendantFonts_0>(obj, 0, IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        if (APM_FontCIDType0.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_FontCIDType0, PdfDictionary>(stack, val, obj);
        } else if (APM_FontCIDType2.MatchesType(ctx, val)) 
        {
            ctx.Run<APM_FontCIDType2, PdfDictionary>(stack, val, obj);
        }else 
        {
            ctx.Fail<APM_ArrayOfDescendantFonts_0>("0 did not match any allowable types: '[FontCIDType0,FontCIDType2]'");
        }
        
    }
}

