// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_StructTreeRoot : APM_StructTreeRoot__Base
{
}

internal partial class APM_StructTreeRoot__Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "StructTreeRoot";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_StructTreeRoot_Type, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_StructTreeRoot_K, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_StructTreeRoot_IDTree, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_StructTreeRoot_ParentTree, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_StructTreeRoot_ParentTreeNextKey, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_StructTreeRoot_RoleMap, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_StructTreeRoot_ClassMap, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_StructTreeRoot_Namespaces, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_StructTreeRoot_PronunciationLexicon, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_StructTreeRoot_AF, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
            case 1.4m:
            case 1.5m:
            case 1.6m:
            case 1.7m:
            case 1.8m:
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13_14_15_16_17_18_19.Contains(x)))
                {
                    ctx.Fail<APM_StructTreeRoot>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_StructTreeRoot>($"Unknown field {extra} for version {ctx.Version}");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        var c = ctx.Clone();
        c.Run<APM_StructTreeRoot_Type, PdfDictionary>(new CallStack(), obj, null);
        if (c.Errors.Any())
        {
            return false;
        }
        return true;
    }

    public static HashSet<string> AllowedFields_13_14_15_16_17_18_19 { get; } = new HashSet<string> 
    {
        "ClassMap", "IDTree", "K", "ParentTree", "ParentTreeNextKey", "RoleMap", "Type"
    };
    public static HashSet<string> AllowedFields_20 { get; } = new HashSet<string> 
    {
        "AF", "ClassMap", "IDTree", "K", "Namespaces", "ParentTree", "ParentTreeNextKey", "PronunciationLexicon", "RoleMap", "Type"
    };
    


}

/// <summary>
/// StructTreeRoot_Type Table 354
/// </summary>
internal partial class APM_StructTreeRoot_Type : APM_StructTreeRoot_Type__Base
{
}


internal partial class APM_StructTreeRoot_Type__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_Type";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetRequired<PdfName, APM_StructTreeRoot_Type>(obj, "Type", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        
        
        if (!(val == PdfName.StructTreeRoot)) 
        {
            ctx.Fail<APM_StructTreeRoot_Type>($"Invalid value {val}, allowed are: [StructTreeRoot]");
        }
        // no linked objects
        
    }


}

/// <summary>
/// StructTreeRoot_K 
/// </summary>
internal partial class APM_StructTreeRoot_K : APM_StructTreeRoot_K__Base
{
}


internal partial class APM_StructTreeRoot_K__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_K";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_StructTreeRoot_K>(obj, "K", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfStructElem, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_StructElem, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_StructTreeRoot_K>("K is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// StructTreeRoot_IDTree 
/// </summary>
internal partial class APM_StructTreeRoot_IDTree : APM_StructTreeRoot_IDTree__Base
{
}


internal partial class APM_StructTreeRoot_IDTree__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_IDTree";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_StructTreeRoot_IDTree>(obj, "IDTree", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // TODO trees
        
    }


}

/// <summary>
/// StructTreeRoot_ParentTree 
/// </summary>
internal partial class APM_StructTreeRoot_ParentTree : APM_StructTreeRoot_ParentTree__Base
{
}


internal partial class APM_StructTreeRoot_ParentTree__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_ParentTree";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_StructTreeRoot_ParentTree>(obj, "ParentTree", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // TODO trees
        
    }


}

/// <summary>
/// StructTreeRoot_ParentTreeNextKey 
/// </summary>
internal partial class APM_StructTreeRoot_ParentTreeNextKey : APM_StructTreeRoot_ParentTreeNextKey__Base
{
}


internal partial class APM_StructTreeRoot_ParentTreeNextKey__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_ParentTreeNextKey";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfIntNumber, APM_StructTreeRoot_ParentTreeNextKey>(obj, "ParentTreeNextKey", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// StructTreeRoot_RoleMap 
/// </summary>
internal partial class APM_StructTreeRoot_RoleMap : APM_StructTreeRoot_RoleMap__Base
{
}


internal partial class APM_StructTreeRoot_RoleMap__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_RoleMap";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_StructTreeRoot_RoleMap>(obj, "RoleMap", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_RoleMap, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// StructTreeRoot_ClassMap 
/// </summary>
internal partial class APM_StructTreeRoot_ClassMap : APM_StructTreeRoot_ClassMap__Base
{
}


internal partial class APM_StructTreeRoot_ClassMap__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_ClassMap";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfDictionary, APM_StructTreeRoot_ClassMap>(obj, "ClassMap", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ClassMap, PdfDictionary>(stack, val, obj);
        
    }


}

/// <summary>
/// StructTreeRoot_Namespaces 
/// </summary>
internal partial class APM_StructTreeRoot_Namespaces : APM_StructTreeRoot_Namespaces__Base
{
}


internal partial class APM_StructTreeRoot_Namespaces__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_Namespaces";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (val, wasIR) = ctx.GetOptional<PdfArray, APM_StructTreeRoot_Namespaces>(obj, "Namespaces", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        ctx.Run<APM_ArrayOfNamespace, PdfArray>(stack, val, obj);
        
    }


}

/// <summary>
/// StructTreeRoot_PronunciationLexicon 
/// </summary>
internal partial class APM_StructTreeRoot_PronunciationLexicon : APM_StructTreeRoot_PronunciationLexicon__Base
{
}


internal partial class APM_StructTreeRoot_PronunciationLexicon__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_PronunciationLexicon";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_StructTreeRoot_PronunciationLexicon>(obj, "PronunciationLexicon", IndirectRequirement.MustBeIndirect);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    if (!wasIR) { ctx.Fail<APM_StructTreeRoot_PronunciationLexicon>("PronunciationLexicon is required to be indirect when a array"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    if (!wasIR) { ctx.Fail<APM_StructTreeRoot_PronunciationLexicon>("PronunciationLexicon is required to be indirect when a dictionary"); return; }
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    if (!wasIR) { ctx.Fail<APM_StructTreeRoot_PronunciationLexicon>("PronunciationLexicon is required to be indirect when a string"); return; }
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_StructTreeRoot_PronunciationLexicon>("PronunciationLexicon is required to one of 'array;dictionary;string', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// StructTreeRoot_AF 
/// </summary>
internal partial class APM_StructTreeRoot_AF : APM_StructTreeRoot_AF__Base
{
}


internal partial class APM_StructTreeRoot_AF__Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "StructTreeRoot_AF";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 2.0m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_StructTreeRoot_AF>(obj, "AF", IndirectRequirement.Either);
        if (utval == null) { return; }
        switch (utval.Type) 
        {
            case PdfObjectType.ArrayObj:
                {
                    var val =  (PdfArray)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_ArrayOfFileSpecifications, PdfArray>(stack, val, obj);
                    return;
                }
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_FileSpecification, PdfDictionary>(stack, val, obj);
                    return;
                }
            
            default:
                ctx.Fail<APM_StructTreeRoot_AF>("AF is required to one of 'array;dictionary', was " + utval.Type);
                return;
        }
    }


}

