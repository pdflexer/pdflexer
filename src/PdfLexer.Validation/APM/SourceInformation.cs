// AUTOGENERATED DO NOT MODIFY

using PdfLexer;
using static PdfLexer.Validation.MathUtil;

namespace PdfLexer.Validation;

using System.Linq;

internal partial class APM_SourceInformation : APM_SourceInformation_Base
{
}

internal partial class APM_SourceInformation_Base : ISpecification<PdfDictionary>
{
    public static bool RuleGroup() { return true; }
    public static string Name { get; } = "SourceInformation";
    public static bool AppliesTo(decimal version, List<string> extensions) => true; // managed by links
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        ctx.Run<APM_SourceInformation_AU, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SourceInformation_TS, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SourceInformation_E, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SourceInformation_S, PdfDictionary>(stack, obj, parent);
        ctx.Run<APM_SourceInformation_C, PdfDictionary>(stack, obj, parent);
        switch (ctx.Version) {
            case 1.3m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_13.Contains(x)))
                {
                    ctx.Fail<APM_SourceInformation>($"Unknown field {extra} for version 1.3");
                }
                break;
            case 1.4m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_14.Contains(x)))
                {
                    ctx.Fail<APM_SourceInformation>($"Unknown field {extra} for version 1.4");
                }
                break;
            case 1.5m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_15.Contains(x)))
                {
                    ctx.Fail<APM_SourceInformation>($"Unknown field {extra} for version 1.5");
                }
                break;
            case 1.6m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_16.Contains(x)))
                {
                    ctx.Fail<APM_SourceInformation>($"Unknown field {extra} for version 1.6");
                }
                break;
            case 1.7m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_17.Contains(x)))
                {
                    ctx.Fail<APM_SourceInformation>($"Unknown field {extra} for version 1.7");
                }
                break;
            case 1.8m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_18.Contains(x)))
                {
                    ctx.Fail<APM_SourceInformation>($"Unknown field {extra} for version 1.8");
                }
                break;
            case 1.9m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_19.Contains(x)))
                {
                    ctx.Fail<APM_SourceInformation>($"Unknown field {extra} for version 1.9");
                }
                break;
            case 2.0m:
                foreach (var extra in obj.Keys.Where(x=> !AllowedFields_20.Contains(x)))
                {
                    ctx.Fail<APM_SourceInformation>($"Unknown field {extra} for version 2.0");
                }
                break;
            default:
                break;
        }
    }

    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) 
    {
        return false;
    }

    public static List<string> AllowedFields_13 { get; } = new List<string> 
    {
        "AU", "TS", "E", "S", "C"
    };
    public static List<string> AllowedFields_14 { get; } = new List<string> 
    {
        "AU", "TS", "E", "S", "C"
    };
    public static List<string> AllowedFields_15 { get; } = new List<string> 
    {
        "AU", "TS", "E", "S", "C"
    };
    public static List<string> AllowedFields_16 { get; } = new List<string> 
    {
        "AU", "TS", "E", "S", "C"
    };
    public static List<string> AllowedFields_17 { get; } = new List<string> 
    {
        "AU", "TS", "E", "S", "C"
    };
    public static List<string> AllowedFields_18 { get; } = new List<string> 
    {
        "AU", "TS", "E", "S", "C"
    };
    public static List<string> AllowedFields_19 { get; } = new List<string> 
    {
        "AU", "TS", "E", "S", "C"
    };
    public static List<string> AllowedFields_20 { get; } = new List<string> 
    {
        "AU", "TS", "E", "S", "C"
    };
    


}

/// <summary>
/// SourceInformation_AU Table 391
/// </summary>
internal partial class APM_SourceInformation_AU : APM_SourceInformation_AU_Base
{
}


internal partial class APM_SourceInformation_AU_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SourceInformation_AU";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var (utval, wasIR) = ctx.GetOptional<APM_SourceInformation_AU>(obj, "AU", IndirectRequirement.Either);
        if (utval == null) { ctx.Fail<APM_SourceInformation_AU>("AU is required"); return; }
        switch (utval.Type) 
        {
            case PdfObjectType.DictionaryObj:
                {
                    var val =  (PdfDictionary)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    ctx.Run<APM_URLAlias, PdfDictionary>(stack, val, obj);
                    return;
                }
            case PdfObjectType.StringObj:
                {
                    var val =  (PdfString)utval;
                    // no indirect obj reqs
                    // no special cases
                    // no value restrictions
                    // no linked objects
                    return;
                }
            
            default:
                ctx.Fail<APM_SourceInformation_AU>("AU is required to one of 'dictionary;string-ascii', was " + utval.Type);
                return;
        }
    }


}

/// <summary>
/// SourceInformation_TS 
/// </summary>
internal partial class APM_SourceInformation_TS : APM_SourceInformation_TS_Base
{
}


internal partial class APM_SourceInformation_TS_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SourceInformation_TS";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_SourceInformation_TS>(obj, "TS", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SourceInformation_E 
/// </summary>
internal partial class APM_SourceInformation_E : APM_SourceInformation_E_Base
{
}


internal partial class APM_SourceInformation_E_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SourceInformation_E";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfString, APM_SourceInformation_E>(obj, "E", IndirectRequirement.Either);
        if (val == null) { return; }
        // no special cases
        // no value restrictions
        // no linked objects
        
    }


}

/// <summary>
/// SourceInformation_S only for spider page sets
/// </summary>
internal partial class APM_SourceInformation_S : APM_SourceInformation_S_Base
{
}


internal partial class APM_SourceInformation_S_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SourceInformation_S";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfIntNumber, APM_SourceInformation_S>(obj, "S", IndirectRequirement.Either);
        if (val == null) { return; }
        // TODO special case
        {
        
        
        if (!(val == 0 || val == 1 || val == 2)) 
        {
            ctx.Fail<APM_SourceInformation_S>($"Invalid value {val}, allowed are: [0,1,2]");
        }
        }
        // no linked objects
        
    }


}

/// <summary>
/// SourceInformation_C only for spider page sets
/// </summary>
internal partial class APM_SourceInformation_C : APM_SourceInformation_C_Base
{
}


internal partial class APM_SourceInformation_C_Base : ISpecification<PdfDictionary>
{
    public static string Name { get; } = "SourceInformation_C";
    public static bool RuleGroup() { return false; }
    public static bool MatchesType(PdfValidator ctx, PdfDictionary obj) { return false; } // not used for children
    public static bool AppliesTo(decimal version, List<string> extensions) { return version >= 1.3m; }
    public static void Validate(PdfValidator ctx, CallStack stack, PdfDictionary obj, IPdfObject? parent)
    {
        var val = ctx.GetOptional<PdfDictionary, APM_SourceInformation_C>(obj, "C", IndirectRequirement.MustBeIndirect);
        if (val == null) { return; }
        // TODO special case
        // no value restrictions
        ctx.Run<APM_WebCaptureCommand, PdfDictionary>(stack, val, obj);
        
    }


}

